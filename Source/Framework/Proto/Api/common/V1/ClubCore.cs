// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/common/v1/club_core.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/common/v1/club_core.proto</summary>
  public static partial class ClubCoreReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/common/v1/club_core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubCoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9iZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YxL2NsdWJfY29yZS5w",
            "cm90bxIUYmdzLnByb3RvY29sLmNsdWIudjEaLmJncy9sb3cvcGIvY2xpZW50",
            "L2FwaS9jb21tb24vdjEvY2x1Yl90YWcucHJvdG8aL2Jncy9sb3cvcGIvY2xp",
            "ZW50L2FwaS9jb21tb24vdjEvY2x1Yl90eXBlLnByb3RvGi9iZ3MvbG93L3Bi",
            "L2NsaWVudC9hcGkvY29tbW9uL3YxL2NsdWJfZW51bS5wcm90bxoxYmdzL2xv",
            "dy9wYi9jbGllbnQvYXBpL2NsaWVudC92MS9jbHViX21lbWJlci5wcm90byIW",
            "CghBdmF0YXJJZBIKCgJpZBgBIAEoDSKRBAoPQ2x1YkRlc2NyaXB0aW9uEgoK",
            "AmlkGAEgASgEEjIKBHR5cGUYAiABKAsyJC5iZ3MucHJvdG9jb2wuY2x1Yi52",
            "MS5VbmlxdWVDbHViVHlwZRIMCgRuYW1lGAMgASgJEhMKC2Rlc2NyaXB0aW9u",
            "GAQgASgJEi4KBmF2YXRhchgFIAEoCzIeLmJncy5wcm90b2NvbC5jbHViLnYx",
            "LkF2YXRhcklkEk8KDXByaXZhY3lfbGV2ZWwYBiABKA4yIi5iZ3MucHJvdG9j",
            "b2wuY2x1Yi52MS5Qcml2YWN5TGV2ZWw6FFBSSVZBQ1lfTEVWRUxfQ0xPU0VE",
            "ElkKEHZpc2liaWxpdHlfbGV2ZWwYByABKA4yJS5iZ3MucHJvdG9jb2wuY2x1",
            "Yi52MS5WaXNpYmlsaXR5TGV2ZWw6GFZJU0lCSUxJVFlfTEVWRUxfUFJJVkFU",
            "RRIUCgxtZW1iZXJfY291bnQYCCABKA0SPgoGbGVhZGVyGAkgAygLMi4uYmdz",
            "LnByb3RvY29sLmNsdWIudjEuY2xpZW50Lk1lbWJlckRlc2NyaXB0aW9uEhUK",
            "DWNyZWF0aW9uX3RpbWUYCiABKAQSEAoIdGltZXpvbmUYCyABKAkSDgoGbG9j",
            "YWxlGAwgASgJEjAKA3RhZxgNIAMoCzIjLmJncy5wcm90b2NvbC5jbHViLnYx",
            "LlRhZ0lkZW50aWZpZXI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Club.V1.ClubTagReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubTypeReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubEnumReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubMemberReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.AvatarId), global::Bgs.Protocol.Club.V1.AvatarId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubDescription), global::Bgs.Protocol.Club.V1.ClubDescription.Parser, new[]{ "Id", "Type", "Name", "Description", "Avatar", "PrivacyLevel", "VisibilityLevel", "MemberCount", "Leader", "CreationTime", "Timezone", "Locale", "Tag" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AvatarId : pb::IMessage<AvatarId> {
    private static readonly pb::MessageParser<AvatarId> _parser = new pb::MessageParser<AvatarId>(() => new AvatarId());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvatarId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId(AvatarId other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId Clone() {
      return new AvatarId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvatarId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvatarId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvatarId other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubDescription : pb::IMessage<ClubDescription> {
    private static readonly pb::MessageParser<ClubDescription> _parser = new pb::MessageParser<ClubDescription>(() => new ClubDescription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription(ClubDescription other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.HasType ? other.type_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      visibilityLevel_ = other.visibilityLevel_;
      memberCount_ = other.memberCount_;
      leader_ = other.leader_.Clone();
      creationTime_ = other.creationTime_;
      timezone_ = other.timezone_;
      locale_ = other.locale_;
      tag_ = other.tag_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription Clone() {
      return new ClubDescription(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 8;
    private readonly static uint MemberCountDefaultValue = 0;

    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { if ((_hasBits0 & 8) != 0) { return memberCount_; } else { return MemberCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        memberCount_ = value;
      }
    }
    /// <summary>Gets whether the "member_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemberCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "member_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemberCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.MemberDescription> _repeated_leader_codec
        = pb::FieldCodec.ForMessage(74, global::Bgs.Protocol.Club.V1.Client.MemberDescription.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription> leader_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription> Leader {
      get { return leader_; }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 10;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 16) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 11;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 12;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.TagIdentifier> _repeated_tag_codec
        = pb::FieldCodec.ForMessage(106, global::Bgs.Protocol.Club.V1.TagIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> tag_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> Tag {
      get { return tag_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (MemberCount != other.MemberCount) return false;
      if(!leader_.Equals(other.leader_)) return false;
      if (CreationTime != other.CreationTime) return false;
      if (Timezone != other.Timezone) return false;
      if (Locale != other.Locale) return false;
      if(!tag_.Equals(other.tag_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasMemberCount) hash ^= MemberCount.GetHashCode();
      hash ^= leader_.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      hash ^= tag_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        output.WriteRawTag(64);
        output.WriteUInt32(MemberCount);
      }
      leader_.WriteTo(output, _repeated_leader_codec);
      if (HasCreationTime) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreationTime);
      }
      if (HasTimezone) {
        output.WriteRawTag(90);
        output.WriteString(Timezone);
      }
      if (HasLocale) {
        output.WriteRawTag(98);
        output.WriteString(Locale);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      size += leader_.CalculateSize(_repeated_leader_codec);
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubDescription other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasMemberCount) {
        MemberCount = other.MemberCount;
      }
      leader_.Add(other.leader_);
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      tag_.Add(other.tag_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 56: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 64: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 74: {
            leader_.AddEntriesFrom(input, _repeated_leader_codec);
            break;
          }
          case 80: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 90: {
            Timezone = input.ReadString();
            break;
          }
          case 98: {
            Locale = input.ReadString();
            break;
          }
          case 106: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
