// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/common/v1/event_view_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/common/v1/event_view_types.proto</summary>
  public static partial class EventViewTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/common/v1/event_view_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventViewTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZiZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YxL2V2ZW50X3ZpZXdf",
            "dHlwZXMucHJvdG8SDGJncy5wcm90b2NvbCKJAQoPR2V0RXZlbnRPcHRpb25z",
            "EhIKCmZldGNoX2Zyb20YASABKAQSEwoLZmV0Y2hfdW50aWwYAiABKAQSEgoK",
            "bWF4X2V2ZW50cxgDIAEoDRI5CgVvcmRlchgEIAEoDjIYLmJncy5wcm90b2Nv",
            "bC5FdmVudE9yZGVyOhBFVkVOVF9ERVNDRU5ESU5HIj8KClZpZXdNYXJrZXIS",
            "FgoObGFzdF9yZWFkX3RpbWUYASABKAQSGQoRbGFzdF9tZXNzYWdlX3RpbWUY",
            "AiABKAQqNwoKRXZlbnRPcmRlchIUChBFVkVOVF9ERVNDRU5ESU5HEAASEwoP",
            "RVZFTlRfQVNDRU5ESU5HEAE="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bgs.Protocol.EventOrder), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.GetEventOptions), global::Bgs.Protocol.GetEventOptions.Parser, new[]{ "FetchFrom", "FetchUntil", "MaxEvents", "Order" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.ViewMarker), global::Bgs.Protocol.ViewMarker.Parser, new[]{ "LastReadTime", "LastMessageTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EventOrder {
    [pbr::OriginalName("EVENT_DESCENDING")] EventDescending = 0,
    [pbr::OriginalName("EVENT_ASCENDING")] EventAscending = 1,
  }

  #endregion

  #region Messages
  public sealed partial class GetEventOptions : pb::IMessage<GetEventOptions> {
    private static readonly pb::MessageParser<GetEventOptions> _parser = new pb::MessageParser<GetEventOptions>(() => new GetEventOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEventOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.EventViewTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventOptions(GetEventOptions other) : this() {
      _hasBits0 = other._hasBits0;
      fetchFrom_ = other.fetchFrom_;
      fetchUntil_ = other.fetchUntil_;
      maxEvents_ = other.maxEvents_;
      order_ = other.order_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEventOptions Clone() {
      return new GetEventOptions(this);
    }

    /// <summary>Field number for the "fetch_from" field.</summary>
    public const int FetchFromFieldNumber = 1;
    private readonly static ulong FetchFromDefaultValue = 0UL;

    private ulong fetchFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FetchFrom {
      get { if ((_hasBits0 & 1) != 0) { return fetchFrom_; } else { return FetchFromDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fetchFrom_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_from" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchFrom {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fetch_from" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchFrom() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fetch_until" field.</summary>
    public const int FetchUntilFieldNumber = 2;
    private readonly static ulong FetchUntilDefaultValue = 0UL;

    private ulong fetchUntil_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FetchUntil {
      get { if ((_hasBits0 & 2) != 0) { return fetchUntil_; } else { return FetchUntilDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fetchUntil_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_until" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFetchUntil {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fetch_until" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFetchUntil() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_events" field.</summary>
    public const int MaxEventsFieldNumber = 3;
    private readonly static uint MaxEventsDefaultValue = 0;

    private uint maxEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxEvents {
      get { if ((_hasBits0 & 4) != 0) { return maxEvents_; } else { return MaxEventsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxEvents_ = value;
      }
    }
    /// <summary>Gets whether the "max_events" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxEvents {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_events" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxEvents() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 4;
    private readonly static global::Bgs.Protocol.EventOrder OrderDefaultValue = global::Bgs.Protocol.EventOrder.EventDescending;

    private global::Bgs.Protocol.EventOrder order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.EventOrder Order {
      get { if ((_hasBits0 & 8) != 0) { return order_; } else { return OrderDefaultValue; } }
      set {
        _hasBits0 |= 8;
        order_ = value;
      }
    }
    /// <summary>Gets whether the "order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrder {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrder() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEventOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEventOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FetchFrom != other.FetchFrom) return false;
      if (FetchUntil != other.FetchUntil) return false;
      if (MaxEvents != other.MaxEvents) return false;
      if (Order != other.Order) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFetchFrom) hash ^= FetchFrom.GetHashCode();
      if (HasFetchUntil) hash ^= FetchUntil.GetHashCode();
      if (HasMaxEvents) hash ^= MaxEvents.GetHashCode();
      if (HasOrder) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasFetchFrom) {
        output.WriteRawTag(8);
        output.WriteUInt64(FetchFrom);
      }
      if (HasFetchUntil) {
        output.WriteRawTag(16);
        output.WriteUInt64(FetchUntil);
      }
      if (HasMaxEvents) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxEvents);
      }
      if (HasOrder) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasFetchFrom) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FetchFrom);
      }
      if (HasFetchUntil) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FetchUntil);
      }
      if (HasMaxEvents) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxEvents);
      }
      if (HasOrder) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEventOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasFetchFrom) {
        FetchFrom = other.FetchFrom;
      }
      if (other.HasFetchUntil) {
        FetchUntil = other.FetchUntil;
      }
      if (other.HasMaxEvents) {
        MaxEvents = other.MaxEvents;
      }
      if (other.HasOrder) {
        Order = other.Order;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FetchFrom = input.ReadUInt64();
            break;
          }
          case 16: {
            FetchUntil = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxEvents = input.ReadUInt32();
            break;
          }
          case 32: {
            Order = (global::Bgs.Protocol.EventOrder) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewMarker : pb::IMessage<ViewMarker> {
    private static readonly pb::MessageParser<ViewMarker> _parser = new pb::MessageParser<ViewMarker>(() => new ViewMarker());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewMarker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.EventViewTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewMarker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewMarker(ViewMarker other) : this() {
      _hasBits0 = other._hasBits0;
      lastReadTime_ = other.lastReadTime_;
      lastMessageTime_ = other.lastMessageTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewMarker Clone() {
      return new ViewMarker(this);
    }

    /// <summary>Field number for the "last_read_time" field.</summary>
    public const int LastReadTimeFieldNumber = 1;
    private readonly static ulong LastReadTimeDefaultValue = 0UL;

    private ulong lastReadTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastReadTime {
      get { if ((_hasBits0 & 1) != 0) { return lastReadTime_; } else { return LastReadTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastReadTime_ = value;
      }
    }
    /// <summary>Gets whether the "last_read_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastReadTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_read_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastReadTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "last_message_time" field.</summary>
    public const int LastMessageTimeFieldNumber = 2;
    private readonly static ulong LastMessageTimeDefaultValue = 0UL;

    private ulong lastMessageTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastMessageTime {
      get { if ((_hasBits0 & 2) != 0) { return lastMessageTime_; } else { return LastMessageTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastMessageTime_ = value;
      }
    }
    /// <summary>Gets whether the "last_message_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastMessageTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "last_message_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastMessageTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewMarker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewMarker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastReadTime != other.LastReadTime) return false;
      if (LastMessageTime != other.LastMessageTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLastReadTime) hash ^= LastReadTime.GetHashCode();
      if (HasLastMessageTime) hash ^= LastMessageTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLastReadTime) {
        output.WriteRawTag(8);
        output.WriteUInt64(LastReadTime);
      }
      if (HasLastMessageTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(LastMessageTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLastReadTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastReadTime);
      }
      if (HasLastMessageTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastMessageTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewMarker other) {
      if (other == null) {
        return;
      }
      if (other.HasLastReadTime) {
        LastReadTime = other.LastReadTime;
      }
      if (other.HasLastMessageTime) {
        LastMessageTime = other.LastMessageTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastReadTime = input.ReadUInt64();
            break;
          }
          case 16: {
            LastMessageTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
