// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/common/v2/whisper_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Whisper.V2 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/common/v2/whisper_types.proto</summary>
  public static partial class WhisperTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/common/v2/whisper_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WhisperTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNiZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YyL3doaXNwZXJfdHlw",
            "ZXMucHJvdG8SF2Jncy5wcm90b2NvbC53aGlzcGVyLnYyGjFiZ3MvbG93L3Bi",
            "L2NsaWVudC9hcGkvY29tbW9uL3YxL2VtYmVkX3R5cGVzLnByb3RvGjZiZ3Mv",
            "bG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YxL2V2ZW50X3ZpZXdfdHlwZXMu",
            "cHJvdG8aM2Jncy9sb3cvcGIvY2xpZW50L2FwaS9jb21tb24vdjEvbWVzc2Fn",
            "ZV90eXBlcy5wcm90bxohYmdzL2xvdy9wYi9jbGllbnQvcnBjX3R5cGVzLnBy",
            "b3RvGjdiZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9maWVs",
            "ZF9vcHRpb25zLnByb3RvGjliZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0",
            "ZW5zaW9ucy9tZXNzYWdlX29wdGlvbnMucHJvdG8aOGJncy9sb3cvcGIvY2xp",
            "ZW50L2dsb2JhbF9leHRlbnNpb25zL21ldGhvZF9vcHRpb25zLnByb3RvGjli",
            "Z3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9zZXJ2aWNlX29w",
            "dGlvbnMucHJvdG8iugEKB1doaXNwZXISKwoKd2hpc3Blcl9pZBgBIAEoCzIX",
            "LmJncy5wcm90b2NvbC5NZXNzYWdlSWQSGQoRc2VuZGVyX2FjY291bnRfaWQY",
            "AiABKAQSGwoTcmVjZWl2ZXJfYWNjb3VudF9pZBgDIAEoBBIQCgh0aXRsZV9p",
            "ZBgEIAEoDRIPCgdjb250ZW50GAUgASgJEicKBmVtYmVkcxgGIAMoCzIXLmJn",
            "cy5wcm90b2NvbC5FbWJlZEluZm8iegoLV2hpc3BlclZpZXcSGQoRdGFyZ2V0",
            "X2FjY291bnRfaWQYASABKAQSLQoLdmlld19tYXJrZXIYAiABKAsyGC5iZ3Mu",
            "cHJvdG9jb2wuVmlld01hcmtlchIhChF0YXJnZXRfYmF0dGxlX3RhZxgDIAEo",
            "CUIGgvkrAggBIiUKElNlbmRXaGlzcGVyT3B0aW9ucxIPCgdjb250ZW50GAEg",
            "ASgJ"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.EmbedTypesReflection.Descriptor, global::Bgs.Protocol.EventViewTypesReflection.Descriptor, global::Bgs.Protocol.MessageTypesReflection.Descriptor, global::Bgs.Protocol.RpcTypesReflection.Descriptor, global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Whisper), global::Bgs.Protocol.Whisper.V2.Whisper.Parser, new[]{ "WhisperId", "SenderAccountId", "ReceiverAccountId", "TitleId", "Content", "Embeds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.WhisperView), global::Bgs.Protocol.Whisper.V2.WhisperView.Parser, new[]{ "TargetAccountId", "ViewMarker", "TargetBattleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.SendWhisperOptions), global::Bgs.Protocol.Whisper.V2.SendWhisperOptions.Parser, new[]{ "Content" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Whisper : pb::IMessage<Whisper> {
    private static readonly pb::MessageParser<Whisper> _parser = new pb::MessageParser<Whisper>(() => new Whisper());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Whisper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.WhisperTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Whisper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Whisper(Whisper other) : this() {
      _hasBits0 = other._hasBits0;
      whisperId_ = other.HasWhisperId ? other.whisperId_.Clone() : null;
      senderAccountId_ = other.senderAccountId_;
      receiverAccountId_ = other.receiverAccountId_;
      titleId_ = other.titleId_;
      content_ = other.content_;
      embeds_ = other.embeds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Whisper Clone() {
      return new Whisper(this);
    }

    /// <summary>Field number for the "whisper_id" field.</summary>
    public const int WhisperIdFieldNumber = 1;
    private global::Bgs.Protocol.MessageId whisperId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.MessageId WhisperId {
      get { return whisperId_; }
      set {
        whisperId_ = value;
      }
    }
    /// <summary>Gets whether the whisper_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWhisperId {
      get { return whisperId_ != null; }
    }
    /// <summary>Clears the value of the whisper_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWhisperId() {
      whisperId_ = null;
    }

    /// <summary>Field number for the "sender_account_id" field.</summary>
    public const int SenderAccountIdFieldNumber = 2;
    private readonly static ulong SenderAccountIdDefaultValue = 0UL;

    private ulong senderAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SenderAccountId {
      get { if ((_hasBits0 & 1) != 0) { return senderAccountId_; } else { return SenderAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        senderAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "sender_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSenderAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sender_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSenderAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "receiver_account_id" field.</summary>
    public const int ReceiverAccountIdFieldNumber = 3;
    private readonly static ulong ReceiverAccountIdDefaultValue = 0UL;

    private ulong receiverAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReceiverAccountId {
      get { if ((_hasBits0 & 2) != 0) { return receiverAccountId_; } else { return ReceiverAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        receiverAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "receiver_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReceiverAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "receiver_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReceiverAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 4;
    private readonly static uint TitleIdDefaultValue = 0;

    private uint titleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { if ((_hasBits0 & 4) != 0) { return titleId_; } else { return TitleIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        titleId_ = value;
      }
    }
    /// <summary>Gets whether the "title_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitleId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "title_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitleId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "embeds" field.</summary>
    public const int EmbedsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.EmbedInfo> _repeated_embeds_codec
        = pb::FieldCodec.ForMessage(50, global::Bgs.Protocol.EmbedInfo.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo> embeds_ = new pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo> Embeds {
      get { return embeds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Whisper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Whisper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WhisperId, other.WhisperId)) return false;
      if (SenderAccountId != other.SenderAccountId) return false;
      if (ReceiverAccountId != other.ReceiverAccountId) return false;
      if (TitleId != other.TitleId) return false;
      if (Content != other.Content) return false;
      if(!embeds_.Equals(other.embeds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWhisperId) hash ^= WhisperId.GetHashCode();
      if (HasSenderAccountId) hash ^= SenderAccountId.GetHashCode();
      if (HasReceiverAccountId) hash ^= ReceiverAccountId.GetHashCode();
      if (HasTitleId) hash ^= TitleId.GetHashCode();
      if (HasContent) hash ^= Content.GetHashCode();
      hash ^= embeds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasWhisperId) {
        output.WriteRawTag(10);
        output.WriteMessage(WhisperId);
      }
      if (HasSenderAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SenderAccountId);
      }
      if (HasReceiverAccountId) {
        output.WriteRawTag(24);
        output.WriteUInt64(ReceiverAccountId);
      }
      if (HasTitleId) {
        output.WriteRawTag(32);
        output.WriteUInt32(TitleId);
      }
      if (HasContent) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      embeds_.WriteTo(output, _repeated_embeds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWhisperId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhisperId);
      }
      if (HasSenderAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SenderAccountId);
      }
      if (HasReceiverAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReceiverAccountId);
      }
      if (HasTitleId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += embeds_.CalculateSize(_repeated_embeds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Whisper other) {
      if (other == null) {
        return;
      }
      if (other.HasWhisperId) {
        if (!HasWhisperId) {
          WhisperId = new global::Bgs.Protocol.MessageId();
        }
        WhisperId.MergeFrom(other.WhisperId);
      }
      if (other.HasSenderAccountId) {
        SenderAccountId = other.SenderAccountId;
      }
      if (other.HasReceiverAccountId) {
        ReceiverAccountId = other.ReceiverAccountId;
      }
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      embeds_.Add(other.embeds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasWhisperId) {
              WhisperId = new global::Bgs.Protocol.MessageId();
            }
            input.ReadMessage(WhisperId);
            break;
          }
          case 16: {
            SenderAccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            ReceiverAccountId = input.ReadUInt64();
            break;
          }
          case 32: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            embeds_.AddEntriesFrom(input, _repeated_embeds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WhisperView : pb::IMessage<WhisperView> {
    private static readonly pb::MessageParser<WhisperView> _parser = new pb::MessageParser<WhisperView>(() => new WhisperView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhisperView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.WhisperTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperView(WhisperView other) : this() {
      _hasBits0 = other._hasBits0;
      targetAccountId_ = other.targetAccountId_;
      viewMarker_ = other.HasViewMarker ? other.viewMarker_.Clone() : null;
      targetBattleTag_ = other.targetBattleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperView Clone() {
      return new WhisperView(this);
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 1;
    private readonly static ulong TargetAccountIdDefaultValue = 0UL;

    private ulong targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetAccountId {
      get { if ((_hasBits0 & 1) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "view_marker" field.</summary>
    public const int ViewMarkerFieldNumber = 2;
    private global::Bgs.Protocol.ViewMarker viewMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ViewMarker ViewMarker {
      get { return viewMarker_; }
      set {
        viewMarker_ = value;
      }
    }
    /// <summary>Gets whether the view_marker field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewMarker {
      get { return viewMarker_ != null; }
    }
    /// <summary>Clears the value of the view_marker field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewMarker() {
      viewMarker_ = null;
    }

    /// <summary>Field number for the "target_battle_tag" field.</summary>
    public const int TargetBattleTagFieldNumber = 3;
    private readonly static string TargetBattleTagDefaultValue = "";

    private string targetBattleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetBattleTag {
      get { return targetBattleTag_ ?? TargetBattleTagDefaultValue; }
      set {
        targetBattleTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "target_battle_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetBattleTag {
      get { return targetBattleTag_ != null; }
    }
    /// <summary>Clears the value of the "target_battle_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetBattleTag() {
      targetBattleTag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhisperView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhisperView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetAccountId != other.TargetAccountId) return false;
      if (!object.Equals(ViewMarker, other.ViewMarker)) return false;
      if (TargetBattleTag != other.TargetBattleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasViewMarker) hash ^= ViewMarker.GetHashCode();
      if (HasTargetBattleTag) hash ^= TargetBattleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(TargetAccountId);
      }
      if (HasViewMarker) {
        output.WriteRawTag(18);
        output.WriteMessage(ViewMarker);
      }
      if (HasTargetBattleTag) {
        output.WriteRawTag(26);
        output.WriteString(TargetBattleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetAccountId);
      }
      if (HasViewMarker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewMarker);
      }
      if (HasTargetBattleTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetBattleTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhisperView other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasViewMarker) {
        if (!HasViewMarker) {
          ViewMarker = new global::Bgs.Protocol.ViewMarker();
        }
        ViewMarker.MergeFrom(other.ViewMarker);
      }
      if (other.HasTargetBattleTag) {
        TargetBattleTag = other.TargetBattleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetAccountId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasViewMarker) {
              ViewMarker = new global::Bgs.Protocol.ViewMarker();
            }
            input.ReadMessage(ViewMarker);
            break;
          }
          case 26: {
            TargetBattleTag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendWhisperOptions : pb::IMessage<SendWhisperOptions> {
    private static readonly pb::MessageParser<SendWhisperOptions> _parser = new pb::MessageParser<SendWhisperOptions>(() => new SendWhisperOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendWhisperOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.WhisperTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendWhisperOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendWhisperOptions(SendWhisperOptions other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendWhisperOptions Clone() {
      return new SendWhisperOptions(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendWhisperOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendWhisperOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendWhisperOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
