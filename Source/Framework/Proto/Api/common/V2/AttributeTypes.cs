// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/common/v2/attribute_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.V2 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/common/v2/attribute_types.proto</summary>
  public static partial class AttributeTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/common/v2/attribute_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AttributeTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjViZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YyL2F0dHJpYnV0ZV90",
            "eXBlcy5wcm90bxIPYmdzLnByb3RvY29sLnYyIpcBCgdWYXJpYW50EhQKCmJv",
            "b2xfdmFsdWUYASABKAhIABITCglpbnRfdmFsdWUYAiABKANIABIVCgtmbG9h",
            "dF92YWx1ZRgDIAEoAUgAEhYKDHN0cmluZ192YWx1ZRgEIAEoCUgAEhQKCmJs",
            "b2JfdmFsdWUYBSABKAxIABIUCgp1aW50X3ZhbHVlGAYgASgESABCBgoEdHlw",
            "ZSJCCglBdHRyaWJ1dGUSDAoEbmFtZRgBIAEoCRInCgV2YWx1ZRgCIAEoCzIY",
            "LmJncy5wcm90b2NvbC52Mi5WYXJpYW50ItwBCg9BdHRyaWJ1dGVGaWx0ZXIS",
            "QgoCb3AYASABKA4yKi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlRmlsdGVy",
            "Lk9wZXJhdGlvbjoKTUFUQ0hfTk9ORRItCglhdHRyaWJ1dGUYAiADKAsyGi5i",
            "Z3MucHJvdG9jb2wudjIuQXR0cmlidXRlIlYKCU9wZXJhdGlvbhIOCgpNQVRD",
            "SF9OT05FEAASDQoJTUFUQ0hfQU5ZEAESDQoJTUFUQ0hfQUxMEAISGwoXTUFU",
            "Q0hfQUxMX01PU1RfU1BFQ0lGSUMQAw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.V2.Variant), global::Bgs.Protocol.V2.Variant.Parser, new[]{ "BoolValue", "IntValue", "FloatValue", "StringValue", "BlobValue", "UintValue" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.V2.Attribute), global::Bgs.Protocol.V2.Attribute.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.V2.AttributeFilter), global::Bgs.Protocol.V2.AttributeFilter.Parser, new[]{ "Op", "Attribute" }, null, new[]{ typeof(global::Bgs.Protocol.V2.AttributeFilter.Types.Operation) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Variant : pb::IMessage<Variant> {
    private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant(Variant other) : this() {
      _hasBits0 = other._hasBits0;
      switch (other.TypeCase) {
        case TypeOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case TypeOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BlobValue:
          BlobValue = other.BlobValue;
          break;
        case TypeOneofCase.UintValue:
          UintValue = other.UintValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant Clone() {
      return new Variant(this);
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return HasBoolValue ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.BoolValue;
      }
    }
    /// <summary>Gets whether the "bool_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoolValue {
      get { return typeCase_ == TypeOneofCase.BoolValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "bool_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoolValue() {
      if (HasBoolValue) {
        ClearType();
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return HasIntValue ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.IntValue;
      }
    }
    /// <summary>Gets whether the "int_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntValue {
      get { return typeCase_ == TypeOneofCase.IntValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "int_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntValue() {
      if (HasIntValue) {
        ClearType();
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FloatValue {
      get { return HasFloatValue ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.FloatValue;
      }
    }
    /// <summary>Gets whether the "float_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFloatValue {
      get { return typeCase_ == TypeOneofCase.FloatValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "float_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFloatValue() {
      if (HasFloatValue) {
        ClearType();
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return HasStringValue ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.StringValue;
      }
    }
    /// <summary>Gets whether the "string_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStringValue {
      get { return typeCase_ == TypeOneofCase.StringValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "string_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStringValue() {
      if (HasStringValue) {
        ClearType();
      }
    }

    /// <summary>Field number for the "blob_value" field.</summary>
    public const int BlobValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlobValue {
      get { return HasBlobValue ? (pb::ByteString) type_ : pb::ByteString.Empty; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.BlobValue;
      }
    }
    /// <summary>Gets whether the "blob_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlobValue {
      get { return typeCase_ == TypeOneofCase.BlobValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "blob_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlobValue() {
      if (HasBlobValue) {
        ClearType();
      }
    }

    /// <summary>Field number for the "uint_value" field.</summary>
    public const int UintValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UintValue {
      get { return HasUintValue ? (ulong) type_ : 0UL; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.UintValue;
      }
    }
    /// <summary>Gets whether the "uint_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUintValue {
      get { return typeCase_ == TypeOneofCase.UintValue; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uint_value" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUintValue() {
      if (HasUintValue) {
        ClearType();
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      BoolValue = 1,
      IntValue = 2,
      FloatValue = 3,
      StringValue = 4,
      BlobValue = 5,
      UintValue = 6,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolValue != other.BoolValue) return false;
      if (IntValue != other.IntValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (StringValue != other.StringValue) return false;
      if (BlobValue != other.BlobValue) return false;
      if (UintValue != other.UintValue) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBoolValue) hash ^= BoolValue.GetHashCode();
      if (HasIntValue) hash ^= IntValue.GetHashCode();
      if (HasFloatValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FloatValue);
      if (HasStringValue) hash ^= StringValue.GetHashCode();
      if (HasBlobValue) hash ^= BlobValue.GetHashCode();
      if (HasUintValue) hash ^= UintValue.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBoolValue) {
        output.WriteRawTag(8);
        output.WriteBool(BoolValue);
      }
      if (HasIntValue) {
        output.WriteRawTag(16);
        output.WriteInt64(IntValue);
      }
      if (HasFloatValue) {
        output.WriteRawTag(25);
        output.WriteDouble(FloatValue);
      }
      if (HasStringValue) {
        output.WriteRawTag(34);
        output.WriteString(StringValue);
      }
      if (HasBlobValue) {
        output.WriteRawTag(42);
        output.WriteBytes(BlobValue);
      }
      if (HasUintValue) {
        output.WriteRawTag(48);
        output.WriteUInt64(UintValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBoolValue) {
        size += 1 + 1;
      }
      if (HasIntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      if (HasFloatValue) {
        size += 1 + 8;
      }
      if (HasStringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (HasBlobValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlobValue);
      }
      if (HasUintValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UintValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variant other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case TypeOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case TypeOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case TypeOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case TypeOneofCase.BlobValue:
          BlobValue = other.BlobValue;
          break;
        case TypeOneofCase.UintValue:
          UintValue = other.UintValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoolValue = input.ReadBool();
            break;
          }
          case 16: {
            IntValue = input.ReadInt64();
            break;
          }
          case 25: {
            FloatValue = input.ReadDouble();
            break;
          }
          case 34: {
            StringValue = input.ReadString();
            break;
          }
          case 42: {
            BlobValue = input.ReadBytes();
            break;
          }
          case 48: {
            UintValue = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Attribute : pb::IMessage<Attribute> {
    private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attribute(Attribute other) : this() {
      name_ = other.name_;
      value_ = other.HasValue ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attribute Clone() {
      return new Attribute(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Bgs.Protocol.V2.Variant value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.V2.Variant Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }
    /// <summary>Gets whether the value field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the value field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attribute other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        if (!HasValue) {
          Value = new global::Bgs.Protocol.V2.Variant();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (!HasValue) {
              Value = new global::Bgs.Protocol.V2.Variant();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeFilter : pb::IMessage<AttributeFilter> {
    private static readonly pb::MessageParser<AttributeFilter> _parser = new pb::MessageParser<AttributeFilter>(() => new AttributeFilter());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeFilter(AttributeFilter other) : this() {
      _hasBits0 = other._hasBits0;
      op_ = other.op_;
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeFilter Clone() {
      return new AttributeFilter(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private readonly static global::Bgs.Protocol.V2.AttributeFilter.Types.Operation OpDefaultValue = global::Bgs.Protocol.V2.AttributeFilter.Types.Operation.MatchNone;

    private global::Bgs.Protocol.V2.AttributeFilter.Types.Operation op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.V2.AttributeFilter.Types.Operation Op {
      get { if ((_hasBits0 & 1) != 0) { return op_; } else { return OpDefaultValue; } }
      set {
        _hasBits0 |= 1;
        op_ = value;
      }
    }
    /// <summary>Gets whether the "op" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "op" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOp) hash ^= Op.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasOp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeFilter other) {
      if (other == null) {
        return;
      }
      if (other.HasOp) {
        Op = other.Op;
      }
      attribute_.Add(other.attribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::Bgs.Protocol.V2.AttributeFilter.Types.Operation) input.ReadEnum();
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttributeFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operation {
        [pbr::OriginalName("MATCH_NONE")] MatchNone = 0,
        [pbr::OriginalName("MATCH_ANY")] MatchAny = 1,
        [pbr::OriginalName("MATCH_ALL")] MatchAll = 2,
        [pbr::OriginalName("MATCH_ALL_MOST_SPECIFIC")] MatchAllMostSpecific = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
