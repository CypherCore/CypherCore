// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/club_stream.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/club_stream.proto</summary>
  public static partial class ClubStreamReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/club_stream.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubStreamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfc3RyZWFt",
            "LnByb3RvEhtiZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQaL2Jncy9sb3cv",
            "cGIvY2xpZW50L2FwaS9jbGllbnQvdjEvY2x1Yl9lbnVtLnByb3RvGjFiZ3Mv",
            "bG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfbWVtYmVyLnByb3Rv",
            "Gi9iZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YxL2NsdWJfdHlwZS5w",
            "cm90bxo1YmdzL2xvdy9wYi9jbGllbnQvYXBpL2NvbW1vbi92Mi9hdHRyaWJ1",
            "dGVfdHlwZXMucHJvdG8aI2Jncy9sb3cvcGIvY2xpZW50L2VtYmVkX3R5cGVz",
            "LnByb3RvGiFiZ3MvbG93L3BiL2NsaWVudC9ldHNfdHlwZXMucHJvdG8aKGJn",
            "cy9sb3cvcGIvY2xpZW50L2V2ZW50X3ZpZXdfdHlwZXMucHJvdG8aJWJncy9s",
            "b3cvcGIvY2xpZW50L21lc3NhZ2VfdHlwZXMucHJvdG8iJwoOU3RyZWFtUG9z",
            "aXRpb24SFQoJc3RyZWFtX2lkGAEgAygEQgIQASIgCgxTdHJlYW1BY2Nlc3MS",
            "EAoEcm9sZRgBIAMoDUICEAEi+AEKE0NyZWF0ZVN0cmVhbU9wdGlvbnMSLQoJ",
            "YXR0cmlidXRlGAEgAygLMhouYmdzLnByb3RvY29sLnYyLkF0dHJpYnV0ZRIM",
            "CgRuYW1lGAIgASgJEg8KB3N1YmplY3QYAyABKAkSOQoGYWNjZXNzGAQgASgL",
            "MikuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbUFjY2VzcxJY",
            "Cgt2b2ljZV9sZXZlbBgFIAEoDjItLmJncy5wcm90b2NvbC5jbHViLnYxLmNs",
            "aWVudC5TdHJlYW1Wb2ljZUxldmVsOhRWT0lDRV9MRVZFTF9ESVNBQkxFRCKf",
            "AgoGU3RyZWFtEg8KB2NsdWJfaWQYASABKAQSCgoCaWQYAiABKAQSLQoJYXR0",
            "cmlidXRlGAMgAygLMhouYmdzLnByb3RvY29sLnYyLkF0dHJpYnV0ZRIMCgRu",
            "YW1lGAQgASgJEg8KB3N1YmplY3QYBSABKAkSOQoGYWNjZXNzGAYgASgLMiku",
            "YmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbUFjY2VzcxJYCgt2",
            "b2ljZV9sZXZlbBgHIAEoDjItLmJncy5wcm90b2NvbC5jbHViLnYxLmNsaWVu",
            "dC5TdHJlYW1Wb2ljZUxldmVsOhRWT0lDRV9MRVZFTF9ESVNBQkxFRBIVCg1j",
            "cmVhdGlvbl90aW1lGAggASgEIi0KEVN0cmVhbURlc2NyaXB0aW9uEgoKAmlk",
            "GAIgASgEEgwKBG5hbWUYBCABKAkicAoOTWVudGlvbkNvbnRlbnQSCwoDYWxs",
            "GAEgASgIEgwKBGhlcmUYAiABKAgSMQoJbWVtYmVyX2lkGAMgAygLMh4uYmdz",
            "LnByb3RvY29sLmNsdWIudjEuTWVtYmVySWQSEAoEcm9sZRgEIAMoDUICEAEi",
            "ZQoUQ3JlYXRlTWVzc2FnZU9wdGlvbnMSDwoHY29udGVudBgCIAEoCRI8Cgdt",
            "ZW50aW9uGAMgASgLMisuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50Lk1l",
            "bnRpb25Db250ZW50IlkKGkNsdWJTdHJlYW1NZXNzYWdlQ29udGFpbmVyEjsK",
            "B21lc3NhZ2UYASADKAsyKi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQu",
            "U3RyZWFtTWVzc2FnZSKYAQoMQ29udGVudENoYWluEg8KB2NvbnRlbnQYBSAB",
            "KAkSJgoFZW1iZWQYBiADKAsyFy5iZ3MucHJvdG9jb2wuRW1iZWRJbmZvEjwK",
            "B21lbnRpb24YByABKAsyKy5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQu",
            "TWVudGlvbkNvbnRlbnQSEQoJZWRpdF90aW1lGAggASgEIqICCg1TdHJlYW1N",
            "ZXNzYWdlEiMKAmlkGAMgASgLMhcuYmdzLnByb3RvY29sLk1lc3NhZ2VJZBI+",
            "CgZhdXRob3IYBCABKAsyLi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQu",
            "TWVtYmVyRGVzY3JpcHRpb24SQAoNY29udGVudF9jaGFpbhgGIAMoCzIpLmJn",
            "cy5wcm90b2NvbC5jbHViLnYxLmNsaWVudC5Db250ZW50Q2hhaW4SQQoJZGVz",
            "dHJveWVyGA8gASgLMi4uYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50Lk1l",
            "bWJlckRlc2NyaXB0aW9uEhEKCWRlc3Ryb3llZBgQIAEoCBIUCgxkZXN0cm95",
            "X3RpbWUYESABKAQijAMKDVN0cmVhbU1lbnRpb24SDwoHY2x1Yl9pZBgBIAEo",
            "BBIRCglzdHJlYW1faWQYAiABKAQSKwoKbWVzc2FnZV9pZBgDIAEoCzIXLmJn",
            "cy5wcm90b2NvbC5NZXNzYWdlSWQSPgoGYXV0aG9yGAQgASgLMi4uYmdzLnBy",
            "b3RvY29sLmNsdWIudjEuY2xpZW50Lk1lbWJlckRlc2NyaXB0aW9uEhEKCWRl",
            "c3Ryb3llZBgFIAEoCBIuCgptZW50aW9uX2lkGAYgASgLMhouYmdzLnByb3Rv",
            "Y29sLlRpbWVTZXJpZXNJZBIxCgltZW1iZXJfaWQYByABKAsyHi5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5NZW1iZXJJZBI7CgdtZXNzYWdlGAggASgLMiouYmdz",
            "LnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbU1lc3NhZ2USNwoJY2x1",
            "Yl90eXBlGAkgASgLMiQuYmdzLnByb3RvY29sLmNsdWIudjEuVW5pcXVlQ2x1",
            "YlR5cGUiWgoKU3RyZWFtVmlldxIPCgdjbHViX2lkGAEgASgEEhEKCXN0cmVh",
            "bV9pZBgCIAEoBBIoCgZtYXJrZXIYAyABKAsyGC5iZ3MucHJvdG9jb2wuVmll",
            "d01hcmtlciI9ChVTdHJlYW1BZHZhbmNlVmlld1RpbWUSEQoJc3RyZWFtX2lk",
            "GAEgASgEEhEKCXZpZXdfdGltZRgCIAEoBCI4Cg9TdHJlYW1FdmVudFRpbWUS",
            "EQoJc3RyZWFtX2lkGAEgASgEEhIKCmV2ZW50X3RpbWUYAiABKAQiYQoRU3Ry",
            "ZWFtTWVudGlvblZpZXcSDwoHY2x1Yl9pZBgBIAEoBBIRCglzdHJlYW1faWQY",
            "AiABKAQSKAoGbWFya2VyGAMgASgLMhguYmdzLnByb3RvY29sLlZpZXdNYXJr",
            "ZXIi9wEKElN0cmVhbVN0YXRlT3B0aW9ucxItCglhdHRyaWJ1dGUYASADKAsy",
            "Gi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5hbWUYAiABKAkSDwoH",
            "c3ViamVjdBgDIAEoCRI5CgZhY2Nlc3MYBCABKAsyKS5iZ3MucHJvdG9jb2wu",
            "Y2x1Yi52MS5jbGllbnQuU3RyZWFtQWNjZXNzElgKC3ZvaWNlX2xldmVsGAUg",
            "ASgOMi0uYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbVZvaWNl",
            "TGV2ZWw6FFZPSUNFX0xFVkVMX0RJU0FCTEVEIrICChVTdHJlYW1TdGF0ZUFz",
            "c2lnbm1lbnQSEQoJc3RyZWFtX2lkGAEgASgEEi0KCWF0dHJpYnV0ZRgCIAMo",
            "CzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUSDAoEbmFtZRgDIAEoCRIP",
            "CgdzdWJqZWN0GAQgASgJEjkKBmFjY2VzcxgFIAEoCzIpLmJncy5wcm90b2Nv",
            "bC5jbHViLnYxLmNsaWVudC5TdHJlYW1BY2Nlc3MSIwobc3RyZWFtX3N1YnNj",
            "cmlwdGlvbl9yZW1vdmVkGAYgASgIElgKC3ZvaWNlX2xldmVsGAcgASgOMi0u",
            "YmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbVZvaWNlTGV2ZWw6",
            "FFZPSUNFX0xFVkVMX0RJU0FCTEVEIpkBChVTdHJlYW1UeXBpbmdJbmRpY2F0",
            "b3ISMQoJYXV0aG9yX2lkGAEgASgLMh4uYmdzLnByb3RvY29sLmNsdWIudjEu",
            "TWVtYmVySWQSPgoJaW5kaWNhdG9yGAIgASgOMh0uYmdzLnByb3RvY29sLlR5",
            "cGluZ0luZGljYXRvcjoMVFlQSU5HX1NUQVJUEg0KBWVwb2NoGAMgASgE"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Club.V1.Client.ClubEnumReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubMemberReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubTypeReflection.Descriptor, global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.EmbedTypesReflection.Descriptor, global::Bgs.Protocol.EtsTypesReflection.Descriptor, global::Bgs.Protocol.EventViewTypesReflection.Descriptor, global::Bgs.Protocol.MessageTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamPosition), global::Bgs.Protocol.Club.V1.Client.StreamPosition.Parser, new[]{ "StreamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamAccess), global::Bgs.Protocol.Club.V1.Client.StreamAccess.Parser, new[]{ "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions), global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions.Parser, new[]{ "Attribute", "Name", "Subject", "Access", "VoiceLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.Stream), global::Bgs.Protocol.Club.V1.Client.Stream.Parser, new[]{ "ClubId", "Id", "Attribute", "Name", "Subject", "Access", "VoiceLevel", "CreationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamDescription), global::Bgs.Protocol.Club.V1.Client.StreamDescription.Parser, new[]{ "Id", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.MentionContent), global::Bgs.Protocol.Club.V1.Client.MentionContent.Parser, new[]{ "All", "Here", "MemberId", "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.CreateMessageOptions), global::Bgs.Protocol.Club.V1.Client.CreateMessageOptions.Parser, new[]{ "Content", "Mention" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubStreamMessageContainer), global::Bgs.Protocol.Club.V1.Client.ClubStreamMessageContainer.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ContentChain), global::Bgs.Protocol.Club.V1.Client.ContentChain.Parser, new[]{ "Content", "Embed", "Mention", "EditTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamMessage), global::Bgs.Protocol.Club.V1.Client.StreamMessage.Parser, new[]{ "Id", "Author", "ContentChain", "Destroyer", "Destroyed", "DestroyTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamMention), global::Bgs.Protocol.Club.V1.Client.StreamMention.Parser, new[]{ "ClubId", "StreamId", "MessageId", "Author", "Destroyed", "MentionId", "MemberId", "Message", "ClubType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamView), global::Bgs.Protocol.Club.V1.Client.StreamView.Parser, new[]{ "ClubId", "StreamId", "Marker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamAdvanceViewTime), global::Bgs.Protocol.Club.V1.Client.StreamAdvanceViewTime.Parser, new[]{ "StreamId", "ViewTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamEventTime), global::Bgs.Protocol.Club.V1.Client.StreamEventTime.Parser, new[]{ "StreamId", "EventTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamMentionView), global::Bgs.Protocol.Club.V1.Client.StreamMentionView.Parser, new[]{ "ClubId", "StreamId", "Marker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamStateOptions), global::Bgs.Protocol.Club.V1.Client.StreamStateOptions.Parser, new[]{ "Attribute", "Name", "Subject", "Access", "VoiceLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamStateAssignment), global::Bgs.Protocol.Club.V1.Client.StreamStateAssignment.Parser, new[]{ "StreamId", "Attribute", "Name", "Subject", "Access", "StreamSubscriptionRemoved", "VoiceLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamTypingIndicator), global::Bgs.Protocol.Club.V1.Client.StreamTypingIndicator.Parser, new[]{ "AuthorId", "Indicator", "Epoch" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StreamPosition : pb::IMessage<StreamPosition> {
    private static readonly pb::MessageParser<StreamPosition> _parser = new pb::MessageParser<StreamPosition>(() => new StreamPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPosition(StreamPosition other) : this() {
      streamId_ = other.streamId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPosition Clone() {
      return new StreamPosition(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_streamId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> streamId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> StreamId {
      get { return streamId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!streamId_.Equals(other.streamId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= streamId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      streamId_.WriteTo(output, _repeated_streamId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += streamId_.CalculateSize(_repeated_streamId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamPosition other) {
      if (other == null) {
        return;
      }
      streamId_.Add(other.streamId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            streamId_.AddEntriesFrom(input, _repeated_streamId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamAccess : pb::IMessage<StreamAccess> {
    private static readonly pb::MessageParser<StreamAccess> _parser = new pb::MessageParser<StreamAccess>(() => new StreamAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAccess(StreamAccess other) : this() {
      role_ = other.role_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAccess Clone() {
      return new StreamAccess(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_role_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> role_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!role_.Equals(other.role_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= role_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      role_.WriteTo(output, _repeated_role_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += role_.CalculateSize(_repeated_role_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamAccess other) {
      if (other == null) {
        return;
      }
      role_.Add(other.role_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateStreamOptions : pb::IMessage<CreateStreamOptions> {
    private static readonly pb::MessageParser<CreateStreamOptions> _parser = new pb::MessageParser<CreateStreamOptions>(() => new CreateStreamOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateStreamOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStreamOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStreamOptions(CreateStreamOptions other) : this() {
      _hasBits0 = other._hasBits0;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      subject_ = other.subject_;
      access_ = other.HasAccess ? other.access_.Clone() : null;
      voiceLevel_ = other.voiceLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateStreamOptions Clone() {
      return new CreateStreamOptions(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 3;
    private readonly static string SubjectDefaultValue = "";

    private string subject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_ ?? SubjectDefaultValue; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subject" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubject {
      get { return subject_ != null; }
    }
    /// <summary>Clears the value of the "subject" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubject() {
      subject_ = null;
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.StreamAccess access_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamAccess Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }
    /// <summary>Gets whether the access field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccess {
      get { return access_ != null; }
    }
    /// <summary>Clears the value of the access field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccess() {
      access_ = null;
    }

    /// <summary>Field number for the "voice_level" field.</summary>
    public const int VoiceLevelFieldNumber = 5;
    private readonly static global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevelDefaultValue = global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel.VoiceLevelDisabled;

    private global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel voiceLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevel {
      get { if ((_hasBits0 & 1) != 0) { return voiceLevel_; } else { return VoiceLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        voiceLevel_ = value;
      }
    }
    /// <summary>Gets whether the "voice_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "voice_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceLevel() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateStreamOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateStreamOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Subject != other.Subject) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (VoiceLevel != other.VoiceLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSubject) hash ^= Subject.GetHashCode();
      if (HasAccess) hash ^= Access.GetHashCode();
      if (HasVoiceLevel) hash ^= VoiceLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasSubject) {
        output.WriteRawTag(26);
        output.WriteString(Subject);
      }
      if (HasAccess) {
        output.WriteRawTag(34);
        output.WriteMessage(Access);
      }
      if (HasVoiceLevel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSubject) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (HasAccess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (HasVoiceLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateStreamOptions other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSubject) {
        Subject = other.Subject;
      }
      if (other.HasAccess) {
        if (!HasAccess) {
          Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
        }
        Access.MergeFrom(other.Access);
      }
      if (other.HasVoiceLevel) {
        VoiceLevel = other.VoiceLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Subject = input.ReadString();
            break;
          }
          case 34: {
            if (!HasAccess) {
              Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
            }
            input.ReadMessage(Access);
            break;
          }
          case 40: {
            VoiceLevel = (global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stream : pb::IMessage<Stream> {
    private static readonly pb::MessageParser<Stream> _parser = new pb::MessageParser<Stream>(() => new Stream());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream(Stream other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      id_ = other.id_;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      subject_ = other.subject_;
      access_ = other.HasAccess ? other.access_.Clone() : null;
      voiceLevel_ = other.voiceLevel_;
      creationTime_ = other.creationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream Clone() {
      return new Stream(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 2) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 5;
    private readonly static string SubjectDefaultValue = "";

    private string subject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_ ?? SubjectDefaultValue; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subject" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubject {
      get { return subject_ != null; }
    }
    /// <summary>Clears the value of the "subject" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubject() {
      subject_ = null;
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 6;
    private global::Bgs.Protocol.Club.V1.Client.StreamAccess access_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamAccess Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }
    /// <summary>Gets whether the access field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccess {
      get { return access_ != null; }
    }
    /// <summary>Clears the value of the access field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccess() {
      access_ = null;
    }

    /// <summary>Field number for the "voice_level" field.</summary>
    public const int VoiceLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevelDefaultValue = global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel.VoiceLevelDisabled;

    private global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel voiceLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevel {
      get { if ((_hasBits0 & 4) != 0) { return voiceLevel_; } else { return VoiceLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        voiceLevel_ = value;
      }
    }
    /// <summary>Gets whether the "voice_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "voice_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 8;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 8) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (Id != other.Id) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Subject != other.Subject) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (VoiceLevel != other.VoiceLevel) return false;
      if (CreationTime != other.CreationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSubject) hash ^= Subject.GetHashCode();
      if (HasAccess) hash ^= Access.GetHashCode();
      if (HasVoiceLevel) hash ^= VoiceLevel.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt64(Id);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasSubject) {
        output.WriteRawTag(42);
        output.WriteString(Subject);
      }
      if (HasAccess) {
        output.WriteRawTag(50);
        output.WriteMessage(Access);
      }
      if (HasVoiceLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VoiceLevel);
      }
      if (HasCreationTime) {
        output.WriteRawTag(64);
        output.WriteUInt64(CreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSubject) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (HasAccess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (HasVoiceLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoiceLevel);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stream other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSubject) {
        Subject = other.Subject;
      }
      if (other.HasAccess) {
        if (!HasAccess) {
          Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
        }
        Access.MergeFrom(other.Access);
      }
      if (other.HasVoiceLevel) {
        VoiceLevel = other.VoiceLevel;
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadUInt64();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Subject = input.ReadString();
            break;
          }
          case 50: {
            if (!HasAccess) {
              Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
            }
            input.ReadMessage(Access);
            break;
          }
          case 56: {
            VoiceLevel = (global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel) input.ReadEnum();
            break;
          }
          case 64: {
            CreationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamDescription : pb::IMessage<StreamDescription> {
    private static readonly pb::MessageParser<StreamDescription> _parser = new pb::MessageParser<StreamDescription>(() => new StreamDescription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamDescription(StreamDescription other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamDescription Clone() {
      return new StreamDescription(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt64(Id);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamDescription other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Id = input.ReadUInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MentionContent : pb::IMessage<MentionContent> {
    private static readonly pb::MessageParser<MentionContent> _parser = new pb::MessageParser<MentionContent>(() => new MentionContent());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MentionContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MentionContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MentionContent(MentionContent other) : this() {
      _hasBits0 = other._hasBits0;
      all_ = other.all_;
      here_ = other.here_;
      memberId_ = other.memberId_.Clone();
      role_ = other.role_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MentionContent Clone() {
      return new MentionContent(this);
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private readonly static bool AllDefaultValue = false;

    private bool all_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool All {
      get { if ((_hasBits0 & 1) != 0) { return all_; } else { return AllDefaultValue; } }
      set {
        _hasBits0 |= 1;
        all_ = value;
      }
    }
    /// <summary>Gets whether the "all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAll() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "here" field.</summary>
    public const int HereFieldNumber = 2;
    private readonly static bool HereDefaultValue = false;

    private bool here_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Here {
      get { if ((_hasBits0 & 2) != 0) { return here_; } else { return HereDefaultValue; } }
      set {
        _hasBits0 |= 2;
        here_ = value;
      }
    }
    /// <summary>Gets whether the "here" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHere {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "here" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHere() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.MemberId> _repeated_memberId_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.Club.V1.MemberId.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberId> memberId_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberId> MemberId {
      get { return memberId_; }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_role_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> role_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MentionContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MentionContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (All != other.All) return false;
      if (Here != other.Here) return false;
      if(!memberId_.Equals(other.memberId_)) return false;
      if(!role_.Equals(other.role_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAll) hash ^= All.GetHashCode();
      if (HasHere) hash ^= Here.GetHashCode();
      hash ^= memberId_.GetHashCode();
      hash ^= role_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAll) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
      if (HasHere) {
        output.WriteRawTag(16);
        output.WriteBool(Here);
      }
      memberId_.WriteTo(output, _repeated_memberId_codec);
      role_.WriteTo(output, _repeated_role_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAll) {
        size += 1 + 1;
      }
      if (HasHere) {
        size += 1 + 1;
      }
      size += memberId_.CalculateSize(_repeated_memberId_codec);
      size += role_.CalculateSize(_repeated_role_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MentionContent other) {
      if (other == null) {
        return;
      }
      if (other.HasAll) {
        All = other.All;
      }
      if (other.HasHere) {
        Here = other.Here;
      }
      memberId_.Add(other.memberId_);
      role_.Add(other.role_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
          case 16: {
            Here = input.ReadBool();
            break;
          }
          case 26: {
            memberId_.AddEntriesFrom(input, _repeated_memberId_codec);
            break;
          }
          case 34:
          case 32: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateMessageOptions : pb::IMessage<CreateMessageOptions> {
    private static readonly pb::MessageParser<CreateMessageOptions> _parser = new pb::MessageParser<CreateMessageOptions>(() => new CreateMessageOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateMessageOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMessageOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMessageOptions(CreateMessageOptions other) : this() {
      content_ = other.content_;
      mention_ = other.HasMention ? other.mention_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateMessageOptions Clone() {
      return new CreateMessageOptions(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "mention" field.</summary>
    public const int MentionFieldNumber = 3;
    private global::Bgs.Protocol.Club.V1.Client.MentionContent mention_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MentionContent Mention {
      get { return mention_; }
      set {
        mention_ = value;
      }
    }
    /// <summary>Gets whether the mention field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMention {
      get { return mention_ != null; }
    }
    /// <summary>Clears the value of the mention field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMention() {
      mention_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateMessageOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateMessageOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (!object.Equals(Mention, other.Mention)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (HasMention) hash ^= Mention.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (HasMention) {
        output.WriteRawTag(26);
        output.WriteMessage(Mention);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (HasMention) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mention);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateMessageOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasMention) {
        if (!HasMention) {
          Mention = new global::Bgs.Protocol.Club.V1.Client.MentionContent();
        }
        Mention.MergeFrom(other.Mention);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            if (!HasMention) {
              Mention = new global::Bgs.Protocol.Club.V1.Client.MentionContent();
            }
            input.ReadMessage(Mention);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStreamMessageContainer : pb::IMessage<ClubStreamMessageContainer> {
    private static readonly pb::MessageParser<ClubStreamMessageContainer> _parser = new pb::MessageParser<ClubStreamMessageContainer>(() => new ClubStreamMessageContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStreamMessageContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamMessageContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamMessageContainer(ClubStreamMessageContainer other) : this() {
      message_ = other.message_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamMessageContainer Clone() {
      return new ClubStreamMessageContainer(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.StreamMessage> _repeated_message_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.Client.StreamMessage.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamMessage> message_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamMessage> Message {
      get { return message_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStreamMessageContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStreamMessageContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!message_.Equals(other.message_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= message_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      message_.WriteTo(output, _repeated_message_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += message_.CalculateSize(_repeated_message_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStreamMessageContainer other) {
      if (other == null) {
        return;
      }
      message_.Add(other.message_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            message_.AddEntriesFrom(input, _repeated_message_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentChain : pb::IMessage<ContentChain> {
    private static readonly pb::MessageParser<ContentChain> _parser = new pb::MessageParser<ContentChain>(() => new ContentChain());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentChain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentChain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentChain(ContentChain other) : this() {
      _hasBits0 = other._hasBits0;
      content_ = other.content_;
      embed_ = other.embed_.Clone();
      mention_ = other.HasMention ? other.mention_.Clone() : null;
      editTime_ = other.editTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentChain Clone() {
      return new ContentChain(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "embed" field.</summary>
    public const int EmbedFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.EmbedInfo> _repeated_embed_codec
        = pb::FieldCodec.ForMessage(50, global::Bgs.Protocol.EmbedInfo.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo> embed_ = new pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.EmbedInfo> Embed {
      get { return embed_; }
    }

    /// <summary>Field number for the "mention" field.</summary>
    public const int MentionFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.Client.MentionContent mention_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MentionContent Mention {
      get { return mention_; }
      set {
        mention_ = value;
      }
    }
    /// <summary>Gets whether the mention field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMention {
      get { return mention_ != null; }
    }
    /// <summary>Clears the value of the mention field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMention() {
      mention_ = null;
    }

    /// <summary>Field number for the "edit_time" field.</summary>
    public const int EditTimeFieldNumber = 8;
    private readonly static ulong EditTimeDefaultValue = 0UL;

    private ulong editTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EditTime {
      get { if ((_hasBits0 & 1) != 0) { return editTime_; } else { return EditTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        editTime_ = value;
      }
    }
    /// <summary>Gets whether the "edit_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEditTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "edit_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEditTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentChain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentChain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if(!embed_.Equals(other.embed_)) return false;
      if (!object.Equals(Mention, other.Mention)) return false;
      if (EditTime != other.EditTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      hash ^= embed_.GetHashCode();
      if (HasMention) hash ^= Mention.GetHashCode();
      if (HasEditTime) hash ^= EditTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      embed_.WriteTo(output, _repeated_embed_codec);
      if (HasMention) {
        output.WriteRawTag(58);
        output.WriteMessage(Mention);
      }
      if (HasEditTime) {
        output.WriteRawTag(64);
        output.WriteUInt64(EditTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += embed_.CalculateSize(_repeated_embed_codec);
      if (HasMention) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mention);
      }
      if (HasEditTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EditTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentChain other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      embed_.Add(other.embed_);
      if (other.HasMention) {
        if (!HasMention) {
          Mention = new global::Bgs.Protocol.Club.V1.Client.MentionContent();
        }
        Mention.MergeFrom(other.Mention);
      }
      if (other.HasEditTime) {
        EditTime = other.EditTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 50: {
            embed_.AddEntriesFrom(input, _repeated_embed_codec);
            break;
          }
          case 58: {
            if (!HasMention) {
              Mention = new global::Bgs.Protocol.Club.V1.Client.MentionContent();
            }
            input.ReadMessage(Mention);
            break;
          }
          case 64: {
            EditTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamMessage : pb::IMessage<StreamMessage> {
    private static readonly pb::MessageParser<StreamMessage> _parser = new pb::MessageParser<StreamMessage>(() => new StreamMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage(StreamMessage other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.HasId ? other.id_.Clone() : null;
      author_ = other.HasAuthor ? other.author_.Clone() : null;
      contentChain_ = other.contentChain_.Clone();
      destroyer_ = other.HasDestroyer ? other.destroyer_.Clone() : null;
      destroyed_ = other.destroyed_;
      destroyTime_ = other.destroyTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage Clone() {
      return new StreamMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private global::Bgs.Protocol.MessageId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.MessageId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }
    /// <summary>Gets whether the id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription author_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }
    /// <summary>Gets whether the author field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthor {
      get { return author_ != null; }
    }
    /// <summary>Clears the value of the author field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthor() {
      author_ = null;
    }

    /// <summary>Field number for the "content_chain" field.</summary>
    public const int ContentChainFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.ContentChain> _repeated_contentChain_codec
        = pb::FieldCodec.ForMessage(50, global::Bgs.Protocol.Club.V1.Client.ContentChain.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.ContentChain> contentChain_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.ContentChain>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.ContentChain> ContentChain {
      get { return contentChain_; }
    }

    /// <summary>Field number for the "destroyer" field.</summary>
    public const int DestroyerFieldNumber = 15;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription destroyer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Destroyer {
      get { return destroyer_; }
      set {
        destroyer_ = value;
      }
    }
    /// <summary>Gets whether the destroyer field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyer {
      get { return destroyer_ != null; }
    }
    /// <summary>Clears the value of the destroyer field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyer() {
      destroyer_ = null;
    }

    /// <summary>Field number for the "destroyed" field.</summary>
    public const int DestroyedFieldNumber = 16;
    private readonly static bool DestroyedDefaultValue = false;

    private bool destroyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Destroyed {
      get { if ((_hasBits0 & 1) != 0) { return destroyed_; } else { return DestroyedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        destroyed_ = value;
      }
    }
    /// <summary>Gets whether the "destroyed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "destroyed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "destroy_time" field.</summary>
    public const int DestroyTimeFieldNumber = 17;
    private readonly static ulong DestroyTimeDefaultValue = 0UL;

    private ulong destroyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DestroyTime {
      get { if ((_hasBits0 & 2) != 0) { return destroyTime_; } else { return DestroyTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        destroyTime_ = value;
      }
    }
    /// <summary>Gets whether the "destroy_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "destroy_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Author, other.Author)) return false;
      if(!contentChain_.Equals(other.contentChain_)) return false;
      if (!object.Equals(Destroyer, other.Destroyer)) return false;
      if (Destroyed != other.Destroyed) return false;
      if (DestroyTime != other.DestroyTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasAuthor) hash ^= Author.GetHashCode();
      hash ^= contentChain_.GetHashCode();
      if (HasDestroyer) hash ^= Destroyer.GetHashCode();
      if (HasDestroyed) hash ^= Destroyed.GetHashCode();
      if (HasDestroyTime) hash ^= DestroyTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(26);
        output.WriteMessage(Id);
      }
      if (HasAuthor) {
        output.WriteRawTag(34);
        output.WriteMessage(Author);
      }
      contentChain_.WriteTo(output, _repeated_contentChain_codec);
      if (HasDestroyer) {
        output.WriteRawTag(122);
        output.WriteMessage(Destroyer);
      }
      if (HasDestroyed) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Destroyed);
      }
      if (HasDestroyTime) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(DestroyTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (HasAuthor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Author);
      }
      size += contentChain_.CalculateSize(_repeated_contentChain_codec);
      if (HasDestroyer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destroyer);
      }
      if (HasDestroyed) {
        size += 2 + 1;
      }
      if (HasDestroyTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DestroyTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        if (!HasId) {
          Id = new global::Bgs.Protocol.MessageId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.HasAuthor) {
        if (!HasAuthor) {
          Author = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Author.MergeFrom(other.Author);
      }
      contentChain_.Add(other.contentChain_);
      if (other.HasDestroyer) {
        if (!HasDestroyer) {
          Destroyer = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Destroyer.MergeFrom(other.Destroyer);
      }
      if (other.HasDestroyed) {
        Destroyed = other.Destroyed;
      }
      if (other.HasDestroyTime) {
        DestroyTime = other.DestroyTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (!HasId) {
              Id = new global::Bgs.Protocol.MessageId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 34: {
            if (!HasAuthor) {
              Author = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Author);
            break;
          }
          case 50: {
            contentChain_.AddEntriesFrom(input, _repeated_contentChain_codec);
            break;
          }
          case 122: {
            if (!HasDestroyer) {
              Destroyer = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Destroyer);
            break;
          }
          case 128: {
            Destroyed = input.ReadBool();
            break;
          }
          case 136: {
            DestroyTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamMention : pb::IMessage<StreamMention> {
    private static readonly pb::MessageParser<StreamMention> _parser = new pb::MessageParser<StreamMention>(() => new StreamMention());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamMention> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMention() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMention(StreamMention other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      streamId_ = other.streamId_;
      messageId_ = other.HasMessageId ? other.messageId_.Clone() : null;
      author_ = other.HasAuthor ? other.author_.Clone() : null;
      destroyed_ = other.destroyed_;
      mentionId_ = other.HasMentionId ? other.mentionId_.Clone() : null;
      memberId_ = other.HasMemberId ? other.memberId_.Clone() : null;
      message_ = other.HasMessage ? other.message_.Clone() : null;
      clubType_ = other.HasClubType ? other.clubType_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMention Clone() {
      return new StreamMention(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 2;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 2) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private global::Bgs.Protocol.MessageId messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.MessageId MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return messageId_ != null; }
    }
    /// <summary>Clears the value of the message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      messageId_ = null;
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription author_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }
    /// <summary>Gets whether the author field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthor {
      get { return author_ != null; }
    }
    /// <summary>Clears the value of the author field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthor() {
      author_ = null;
    }

    /// <summary>Field number for the "destroyed" field.</summary>
    public const int DestroyedFieldNumber = 5;
    private readonly static bool DestroyedDefaultValue = false;

    private bool destroyed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Destroyed {
      get { if ((_hasBits0 & 4) != 0) { return destroyed_; } else { return DestroyedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        destroyed_ = value;
      }
    }
    /// <summary>Gets whether the "destroyed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestroyed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "destroyed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestroyed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "mention_id" field.</summary>
    public const int MentionIdFieldNumber = 6;
    private global::Bgs.Protocol.TimeSeriesId mentionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.TimeSeriesId MentionId {
      get { return mentionId_; }
      set {
        mentionId_ = value;
      }
    }
    /// <summary>Gets whether the mention_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMentionId {
      get { return mentionId_ != null; }
    }
    /// <summary>Clears the value of the mention_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMentionId() {
      mentionId_ = null;
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.MemberId memberId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.MemberId MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }
    /// <summary>Gets whether the member_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemberId {
      get { return memberId_ != null; }
    }
    /// <summary>Clears the value of the member_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemberId() {
      memberId_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 8;
    private global::Bgs.Protocol.Club.V1.Client.StreamMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }
    /// <summary>Gets whether the message field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the message field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "club_type" field.</summary>
    public const int ClubTypeFieldNumber = 9;
    private global::Bgs.Protocol.Club.V1.UniqueClubType clubType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType ClubType {
      get { return clubType_; }
      set {
        clubType_ = value;
      }
    }
    /// <summary>Gets whether the club_type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubType {
      get { return clubType_ != null; }
    }
    /// <summary>Clears the value of the club_type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubType() {
      clubType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamMention);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamMention other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (StreamId != other.StreamId) return false;
      if (!object.Equals(MessageId, other.MessageId)) return false;
      if (!object.Equals(Author, other.Author)) return false;
      if (Destroyed != other.Destroyed) return false;
      if (!object.Equals(MentionId, other.MentionId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      if (!object.Equals(ClubType, other.ClubType)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (HasAuthor) hash ^= Author.GetHashCode();
      if (HasDestroyed) hash ^= Destroyed.GetHashCode();
      if (HasMentionId) hash ^= MentionId.GetHashCode();
      if (HasMemberId) hash ^= MemberId.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasClubType) hash ^= ClubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasStreamId) {
        output.WriteRawTag(16);
        output.WriteUInt64(StreamId);
      }
      if (HasMessageId) {
        output.WriteRawTag(26);
        output.WriteMessage(MessageId);
      }
      if (HasAuthor) {
        output.WriteRawTag(34);
        output.WriteMessage(Author);
      }
      if (HasDestroyed) {
        output.WriteRawTag(40);
        output.WriteBool(Destroyed);
      }
      if (HasMentionId) {
        output.WriteRawTag(50);
        output.WriteMessage(MentionId);
      }
      if (HasMemberId) {
        output.WriteRawTag(58);
        output.WriteMessage(MemberId);
      }
      if (HasMessage) {
        output.WriteRawTag(66);
        output.WriteMessage(Message);
      }
      if (HasClubType) {
        output.WriteRawTag(74);
        output.WriteMessage(ClubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      if (HasAuthor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Author);
      }
      if (HasDestroyed) {
        size += 1 + 1;
      }
      if (HasMentionId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MentionId);
      }
      if (HasMemberId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (HasClubType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamMention other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasMessageId) {
        if (!HasMessageId) {
          MessageId = new global::Bgs.Protocol.MessageId();
        }
        MessageId.MergeFrom(other.MessageId);
      }
      if (other.HasAuthor) {
        if (!HasAuthor) {
          Author = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Author.MergeFrom(other.Author);
      }
      if (other.HasDestroyed) {
        Destroyed = other.Destroyed;
      }
      if (other.HasMentionId) {
        if (!HasMentionId) {
          MentionId = new global::Bgs.Protocol.TimeSeriesId();
        }
        MentionId.MergeFrom(other.MentionId);
      }
      if (other.HasMemberId) {
        if (!HasMemberId) {
          MemberId = new global::Bgs.Protocol.Club.V1.MemberId();
        }
        MemberId.MergeFrom(other.MemberId);
      }
      if (other.HasMessage) {
        if (!HasMessage) {
          Message = new global::Bgs.Protocol.Club.V1.Client.StreamMessage();
        }
        Message.MergeFrom(other.Message);
      }
      if (other.HasClubType) {
        if (!HasClubType) {
          ClubType = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        ClubType.MergeFrom(other.ClubType);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 16: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasMessageId) {
              MessageId = new global::Bgs.Protocol.MessageId();
            }
            input.ReadMessage(MessageId);
            break;
          }
          case 34: {
            if (!HasAuthor) {
              Author = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Author);
            break;
          }
          case 40: {
            Destroyed = input.ReadBool();
            break;
          }
          case 50: {
            if (!HasMentionId) {
              MentionId = new global::Bgs.Protocol.TimeSeriesId();
            }
            input.ReadMessage(MentionId);
            break;
          }
          case 58: {
            if (!HasMemberId) {
              MemberId = new global::Bgs.Protocol.Club.V1.MemberId();
            }
            input.ReadMessage(MemberId);
            break;
          }
          case 66: {
            if (!HasMessage) {
              Message = new global::Bgs.Protocol.Club.V1.Client.StreamMessage();
            }
            input.ReadMessage(Message);
            break;
          }
          case 74: {
            if (!HasClubType) {
              ClubType = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(ClubType);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamView : pb::IMessage<StreamView> {
    private static readonly pb::MessageParser<StreamView> _parser = new pb::MessageParser<StreamView>(() => new StreamView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamView(StreamView other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      streamId_ = other.streamId_;
      marker_ = other.HasMarker ? other.marker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamView Clone() {
      return new StreamView(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 2;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 2) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 3;
    private global::Bgs.Protocol.ViewMarker marker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ViewMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }
    /// <summary>Gets whether the marker field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarker {
      get { return marker_ != null; }
    }
    /// <summary>Clears the value of the marker field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarker() {
      marker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (StreamId != other.StreamId) return false;
      if (!object.Equals(Marker, other.Marker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasMarker) hash ^= Marker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasStreamId) {
        output.WriteRawTag(16);
        output.WriteUInt64(StreamId);
      }
      if (HasMarker) {
        output.WriteRawTag(26);
        output.WriteMessage(Marker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasMarker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Marker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamView other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasMarker) {
        if (!HasMarker) {
          Marker = new global::Bgs.Protocol.ViewMarker();
        }
        Marker.MergeFrom(other.Marker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 16: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasMarker) {
              Marker = new global::Bgs.Protocol.ViewMarker();
            }
            input.ReadMessage(Marker);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamAdvanceViewTime : pb::IMessage<StreamAdvanceViewTime> {
    private static readonly pb::MessageParser<StreamAdvanceViewTime> _parser = new pb::MessageParser<StreamAdvanceViewTime>(() => new StreamAdvanceViewTime());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamAdvanceViewTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAdvanceViewTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAdvanceViewTime(StreamAdvanceViewTime other) : this() {
      _hasBits0 = other._hasBits0;
      streamId_ = other.streamId_;
      viewTime_ = other.viewTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamAdvanceViewTime Clone() {
      return new StreamAdvanceViewTime(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 1) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "view_time" field.</summary>
    public const int ViewTimeFieldNumber = 2;
    private readonly static ulong ViewTimeDefaultValue = 0UL;

    private ulong viewTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ViewTime {
      get { if ((_hasBits0 & 2) != 0) { return viewTime_; } else { return ViewTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        viewTime_ = value;
      }
    }
    /// <summary>Gets whether the "view_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "view_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamAdvanceViewTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamAdvanceViewTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (ViewTime != other.ViewTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasViewTime) hash ^= ViewTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStreamId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StreamId);
      }
      if (HasViewTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(ViewTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasViewTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ViewTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamAdvanceViewTime other) {
      if (other == null) {
        return;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasViewTime) {
        ViewTime = other.ViewTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 16: {
            ViewTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamEventTime : pb::IMessage<StreamEventTime> {
    private static readonly pb::MessageParser<StreamEventTime> _parser = new pb::MessageParser<StreamEventTime>(() => new StreamEventTime());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamEventTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventTime(StreamEventTime other) : this() {
      _hasBits0 = other._hasBits0;
      streamId_ = other.streamId_;
      eventTime_ = other.eventTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventTime Clone() {
      return new StreamEventTime(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 1) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 2;
    private readonly static ulong EventTimeDefaultValue = 0UL;

    private ulong eventTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { if ((_hasBits0 & 2) != 0) { return eventTime_; } else { return EventTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        eventTime_ = value;
      }
    }
    /// <summary>Gets whether the "event_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "event_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamEventTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamEventTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (EventTime != other.EventTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasEventTime) hash ^= EventTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStreamId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StreamId);
      }
      if (HasEventTime) {
        output.WriteRawTag(16);
        output.WriteUInt64(EventTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasEventTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamEventTime other) {
      if (other == null) {
        return;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasEventTime) {
        EventTime = other.EventTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 16: {
            EventTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamMentionView : pb::IMessage<StreamMentionView> {
    private static readonly pb::MessageParser<StreamMentionView> _parser = new pb::MessageParser<StreamMentionView>(() => new StreamMentionView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamMentionView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMentionView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMentionView(StreamMentionView other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      streamId_ = other.streamId_;
      marker_ = other.HasMarker ? other.marker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMentionView Clone() {
      return new StreamMentionView(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 2;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 2) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 3;
    private global::Bgs.Protocol.ViewMarker marker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ViewMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }
    /// <summary>Gets whether the marker field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarker {
      get { return marker_ != null; }
    }
    /// <summary>Clears the value of the marker field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarker() {
      marker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamMentionView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamMentionView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (StreamId != other.StreamId) return false;
      if (!object.Equals(Marker, other.Marker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasMarker) hash ^= Marker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasStreamId) {
        output.WriteRawTag(16);
        output.WriteUInt64(StreamId);
      }
      if (HasMarker) {
        output.WriteRawTag(26);
        output.WriteMessage(Marker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasMarker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Marker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamMentionView other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasMarker) {
        if (!HasMarker) {
          Marker = new global::Bgs.Protocol.ViewMarker();
        }
        Marker.MergeFrom(other.Marker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 16: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasMarker) {
              Marker = new global::Bgs.Protocol.ViewMarker();
            }
            input.ReadMessage(Marker);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamStateOptions : pb::IMessage<StreamStateOptions> {
    private static readonly pb::MessageParser<StreamStateOptions> _parser = new pb::MessageParser<StreamStateOptions>(() => new StreamStateOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamStateOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateOptions(StreamStateOptions other) : this() {
      _hasBits0 = other._hasBits0;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      subject_ = other.subject_;
      access_ = other.HasAccess ? other.access_.Clone() : null;
      voiceLevel_ = other.voiceLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateOptions Clone() {
      return new StreamStateOptions(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 3;
    private readonly static string SubjectDefaultValue = "";

    private string subject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_ ?? SubjectDefaultValue; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subject" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubject {
      get { return subject_ != null; }
    }
    /// <summary>Clears the value of the "subject" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubject() {
      subject_ = null;
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.StreamAccess access_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamAccess Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }
    /// <summary>Gets whether the access field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccess {
      get { return access_ != null; }
    }
    /// <summary>Clears the value of the access field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccess() {
      access_ = null;
    }

    /// <summary>Field number for the "voice_level" field.</summary>
    public const int VoiceLevelFieldNumber = 5;
    private readonly static global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevelDefaultValue = global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel.VoiceLevelDisabled;

    private global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel voiceLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevel {
      get { if ((_hasBits0 & 1) != 0) { return voiceLevel_; } else { return VoiceLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        voiceLevel_ = value;
      }
    }
    /// <summary>Gets whether the "voice_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "voice_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceLevel() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamStateOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamStateOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Subject != other.Subject) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (VoiceLevel != other.VoiceLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSubject) hash ^= Subject.GetHashCode();
      if (HasAccess) hash ^= Access.GetHashCode();
      if (HasVoiceLevel) hash ^= VoiceLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasSubject) {
        output.WriteRawTag(26);
        output.WriteString(Subject);
      }
      if (HasAccess) {
        output.WriteRawTag(34);
        output.WriteMessage(Access);
      }
      if (HasVoiceLevel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSubject) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (HasAccess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (HasVoiceLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamStateOptions other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSubject) {
        Subject = other.Subject;
      }
      if (other.HasAccess) {
        if (!HasAccess) {
          Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
        }
        Access.MergeFrom(other.Access);
      }
      if (other.HasVoiceLevel) {
        VoiceLevel = other.VoiceLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Subject = input.ReadString();
            break;
          }
          case 34: {
            if (!HasAccess) {
              Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
            }
            input.ReadMessage(Access);
            break;
          }
          case 40: {
            VoiceLevel = (global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamStateAssignment : pb::IMessage<StreamStateAssignment> {
    private static readonly pb::MessageParser<StreamStateAssignment> _parser = new pb::MessageParser<StreamStateAssignment>(() => new StreamStateAssignment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamStateAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateAssignment(StreamStateAssignment other) : this() {
      _hasBits0 = other._hasBits0;
      streamId_ = other.streamId_;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      subject_ = other.subject_;
      access_ = other.HasAccess ? other.access_.Clone() : null;
      streamSubscriptionRemoved_ = other.streamSubscriptionRemoved_;
      voiceLevel_ = other.voiceLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamStateAssignment Clone() {
      return new StreamStateAssignment(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 1) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 4;
    private readonly static string SubjectDefaultValue = "";

    private string subject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_ ?? SubjectDefaultValue; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subject" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubject {
      get { return subject_ != null; }
    }
    /// <summary>Clears the value of the "subject" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubject() {
      subject_ = null;
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.Client.StreamAccess access_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamAccess Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }
    /// <summary>Gets whether the access field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccess {
      get { return access_ != null; }
    }
    /// <summary>Clears the value of the access field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccess() {
      access_ = null;
    }

    /// <summary>Field number for the "stream_subscription_removed" field.</summary>
    public const int StreamSubscriptionRemovedFieldNumber = 6;
    private readonly static bool StreamSubscriptionRemovedDefaultValue = false;

    private bool streamSubscriptionRemoved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StreamSubscriptionRemoved {
      get { if ((_hasBits0 & 2) != 0) { return streamSubscriptionRemoved_; } else { return StreamSubscriptionRemovedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        streamSubscriptionRemoved_ = value;
      }
    }
    /// <summary>Gets whether the "stream_subscription_removed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamSubscriptionRemoved {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stream_subscription_removed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamSubscriptionRemoved() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "voice_level" field.</summary>
    public const int VoiceLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevelDefaultValue = global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel.VoiceLevelDisabled;

    private global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel voiceLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel VoiceLevel {
      get { if ((_hasBits0 & 4) != 0) { return voiceLevel_; } else { return VoiceLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        voiceLevel_ = value;
      }
    }
    /// <summary>Gets whether the "voice_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoiceLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "voice_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoiceLevel() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamStateAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamStateAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Subject != other.Subject) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (StreamSubscriptionRemoved != other.StreamSubscriptionRemoved) return false;
      if (VoiceLevel != other.VoiceLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSubject) hash ^= Subject.GetHashCode();
      if (HasAccess) hash ^= Access.GetHashCode();
      if (HasStreamSubscriptionRemoved) hash ^= StreamSubscriptionRemoved.GetHashCode();
      if (HasVoiceLevel) hash ^= VoiceLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStreamId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StreamId);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasSubject) {
        output.WriteRawTag(34);
        output.WriteString(Subject);
      }
      if (HasAccess) {
        output.WriteRawTag(42);
        output.WriteMessage(Access);
      }
      if (HasStreamSubscriptionRemoved) {
        output.WriteRawTag(48);
        output.WriteBool(StreamSubscriptionRemoved);
      }
      if (HasVoiceLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSubject) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (HasAccess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (HasStreamSubscriptionRemoved) {
        size += 1 + 1;
      }
      if (HasVoiceLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VoiceLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamStateAssignment other) {
      if (other == null) {
        return;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSubject) {
        Subject = other.Subject;
      }
      if (other.HasAccess) {
        if (!HasAccess) {
          Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
        }
        Access.MergeFrom(other.Access);
      }
      if (other.HasStreamSubscriptionRemoved) {
        StreamSubscriptionRemoved = other.StreamSubscriptionRemoved;
      }
      if (other.HasVoiceLevel) {
        VoiceLevel = other.VoiceLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Subject = input.ReadString();
            break;
          }
          case 42: {
            if (!HasAccess) {
              Access = new global::Bgs.Protocol.Club.V1.Client.StreamAccess();
            }
            input.ReadMessage(Access);
            break;
          }
          case 48: {
            StreamSubscriptionRemoved = input.ReadBool();
            break;
          }
          case 56: {
            VoiceLevel = (global::Bgs.Protocol.Club.V1.Client.StreamVoiceLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamTypingIndicator : pb::IMessage<StreamTypingIndicator> {
    private static readonly pb::MessageParser<StreamTypingIndicator> _parser = new pb::MessageParser<StreamTypingIndicator>(() => new StreamTypingIndicator());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamTypingIndicator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamTypingIndicator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamTypingIndicator(StreamTypingIndicator other) : this() {
      _hasBits0 = other._hasBits0;
      authorId_ = other.HasAuthorId ? other.authorId_.Clone() : null;
      indicator_ = other.indicator_;
      epoch_ = other.epoch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamTypingIndicator Clone() {
      return new StreamTypingIndicator(this);
    }

    /// <summary>Field number for the "author_id" field.</summary>
    public const int AuthorIdFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.MemberId authorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.MemberId AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }
    /// <summary>Gets whether the author_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthorId {
      get { return authorId_ != null; }
    }
    /// <summary>Clears the value of the author_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthorId() {
      authorId_ = null;
    }

    /// <summary>Field number for the "indicator" field.</summary>
    public const int IndicatorFieldNumber = 2;
    private readonly static global::Bgs.Protocol.TypingIndicator IndicatorDefaultValue = global::Bgs.Protocol.TypingIndicator.TypingStart;

    private global::Bgs.Protocol.TypingIndicator indicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.TypingIndicator Indicator {
      get { if ((_hasBits0 & 1) != 0) { return indicator_; } else { return IndicatorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        indicator_ = value;
      }
    }
    /// <summary>Gets whether the "indicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndicator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "indicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndicator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 3;
    private readonly static ulong EpochDefaultValue = 0UL;

    private ulong epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { if ((_hasBits0 & 2) != 0) { return epoch_; } else { return EpochDefaultValue; } }
      set {
        _hasBits0 |= 2;
        epoch_ = value;
      }
    }
    /// <summary>Gets whether the "epoch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpoch {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "epoch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpoch() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamTypingIndicator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamTypingIndicator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthorId, other.AuthorId)) return false;
      if (Indicator != other.Indicator) return false;
      if (Epoch != other.Epoch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuthorId) hash ^= AuthorId.GetHashCode();
      if (HasIndicator) hash ^= Indicator.GetHashCode();
      if (HasEpoch) hash ^= Epoch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAuthorId) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthorId);
      }
      if (HasIndicator) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Indicator);
      }
      if (HasEpoch) {
        output.WriteRawTag(24);
        output.WriteUInt64(Epoch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuthorId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthorId);
      }
      if (HasIndicator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Indicator);
      }
      if (HasEpoch) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamTypingIndicator other) {
      if (other == null) {
        return;
      }
      if (other.HasAuthorId) {
        if (!HasAuthorId) {
          AuthorId = new global::Bgs.Protocol.Club.V1.MemberId();
        }
        AuthorId.MergeFrom(other.AuthorId);
      }
      if (other.HasIndicator) {
        Indicator = other.Indicator;
      }
      if (other.HasEpoch) {
        Epoch = other.Epoch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasAuthorId) {
              AuthorId = new global::Bgs.Protocol.Club.V1.MemberId();
            }
            input.ReadMessage(AuthorId);
            break;
          }
          case 16: {
            Indicator = (global::Bgs.Protocol.TypingIndicator) input.ReadEnum();
            break;
          }
          case 24: {
            Epoch = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
