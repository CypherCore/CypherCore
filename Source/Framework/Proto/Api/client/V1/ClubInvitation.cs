// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/club_invitation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/club_invitation.proto</summary>
  public static partial class ClubInvitationReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/club_invitation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubInvitationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjViZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfaW52aXRh",
            "dGlvbi5wcm90bxIbYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50GjdiZ3Mv",
            "bG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9maWVsZF9vcHRpb25z",
            "LnByb3RvGjFiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJf",
            "bWVtYmVyLnByb3RvGi9iZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3Yx",
            "L2NsdWJfY29yZS5wcm90bxo1YmdzL2xvdy9wYi9jbGllbnQvYXBpL2NvbW1v",
            "bi92Mi9hdHRyaWJ1dGVfdHlwZXMucHJvdG8iMwoIQ2x1YlNsb3QSDAoEcm9s",
            "ZRgBIAEoDRIZChFkZWZhdWx0X3N0cmVhbV9pZBgCIAEoBCKuAQoVU2VuZElu",
            "dml0YXRpb25PcHRpb25zEjEKCXRhcmdldF9pZBgBIAEoCzIeLmJncy5wcm90",
            "b2NvbC5jbHViLnYxLk1lbWJlcklkEjMKBHNsb3QYAiABKAsyJS5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5jbGllbnQuQ2x1YlNsb3QSLQoJYXR0cmlidXRlGAMg",
            "AygLMhouYmdzLnByb3RvY29sLnYyLkF0dHJpYnV0ZSKqAwoOQ2x1Ykludml0",
            "YXRpb24SCgoCaWQYASABKAYSPwoHaW52aXRlchgCIAEoCzIuLmJncy5wcm90",
            "b2NvbC5jbHViLnYxLmNsaWVudC5NZW1iZXJEZXNjcmlwdGlvbhI/CgdpbnZp",
            "dGVlGAMgASgLMi4uYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50Lk1lbWJl",
            "ckRlc2NyaXB0aW9uEjMKBGNsdWIYBCABKAsyJS5iZ3MucHJvdG9jb2wuY2x1",
            "Yi52MS5DbHViRGVzY3JpcHRpb24SMwoEc2xvdBgFIAEoCzIlLmJncy5wcm90",
            "b2NvbC5jbHViLnYxLmNsaWVudC5DbHViU2xvdBItCglhdHRyaWJ1dGUYBiAD",
            "KAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEhUKDWNyZWF0aW9uX3Rp",
            "bWUYByABKAQSFwoPZXhwaXJhdGlvbl90aW1lGAggASgEEkEKCXN1Z2dlc3Rl",
            "chgJIAEoCzIuLmJncy5wcm90b2NvbC5jbHViLnYxLmNsaWVudC5NZW1iZXJE",
            "ZXNjcmlwdGlvbiLeAQoVU2VuZFN1Z2dlc3Rpb25PcHRpb25zEjEKCXRhcmdl",
            "dF9pZBgBIAEoCzIeLmJncy5wcm90b2NvbC5jbHViLnYxLk1lbWJlcklkEjMK",
            "BHNsb3QYAiABKAsyJS5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQuQ2x1",
            "YlNsb3QSLQoJYXR0cmlidXRlGAMgAygLMhouYmdzLnByb3RvY29sLnYyLkF0",
            "dHJpYnV0ZRIuChBqb2luX2NsdWJfc291cmNlGAQgASgNQhSC+SsQKg5Kb2lu",
            "Q2x1YlNvdXJjZSLHAgoOQ2x1YlN1Z2dlc3Rpb24SCgoCaWQYASABKAYSDwoH",
            "Y2x1Yl9pZBgCIAEoBBJBCglzdWdnZXN0ZXIYAyABKAsyLi5iZ3MucHJvdG9j",
            "b2wuY2x1Yi52MS5jbGllbnQuTWVtYmVyRGVzY3JpcHRpb24SQQoJc3VnZ2Vz",
            "dGVlGAQgASgLMi4uYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50Lk1lbWJl",
            "ckRlc2NyaXB0aW9uEjMKBHNsb3QYBSABKAsyJS5iZ3MucHJvdG9jb2wuY2x1",
            "Yi52MS5jbGllbnQuQ2x1YlNsb3QSLQoJYXR0cmlidXRlGAYgAygLMhouYmdz",
            "LnByb3RvY29sLnYyLkF0dHJpYnV0ZRIVCg1jcmVhdGlvbl90aW1lGAcgASgE",
            "EhcKD2V4cGlyYXRpb25fdGltZRgIIAEoBCLgAQoTQ3JlYXRlVGlja2V0T3B0",
            "aW9ucxIzCgRzbG90GAEgASgLMiUuYmdzLnByb3RvY29sLmNsdWIudjEuY2xp",
            "ZW50LkNsdWJTbG90Ei0KCWF0dHJpYnV0ZRgCIAMoCzIaLmJncy5wcm90b2Nv",
            "bC52Mi5BdHRyaWJ1dGUSHAoUYWxsb3dlZF9yZWRlZW1fY291bnQYAyABKA0S",
            "FwoPZXhwaXJhdGlvbl90aW1lGAQgASgEEi4KEGpvaW5fY2x1Yl9zb3VyY2UY",
            "BSABKA1CFIL5KxAqDkpvaW5DbHViU291cmNlIt4CCgpDbHViVGlja2V0EgoK",
            "AmlkGAEgASgJEj8KB2NyZWF0b3IYAiABKAsyLi5iZ3MucHJvdG9jb2wuY2x1",
            "Yi52MS5jbGllbnQuTWVtYmVyRGVzY3JpcHRpb24SMwoEY2x1YhgDIAEoCzIl",
            "LmJncy5wcm90b2NvbC5jbHViLnYxLkNsdWJEZXNjcmlwdGlvbhIzCgRzbG90",
            "GAQgASgLMiUuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LkNsdWJTbG90",
            "Ei0KCWF0dHJpYnV0ZRgFIAMoCzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1",
            "dGUSHAoUY3VycmVudF9yZWRlZW1fY291bnQYBiABKA0SHAoUYWxsb3dlZF9y",
            "ZWRlZW1fY291bnQYByABKA0SFQoNY3JlYXRpb25fdGltZRgIIAEoBBIXCg9l",
            "eHBpcmF0aW9uX3RpbWUYCSABKARQAA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubMemberReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor, global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSlot), global::Bgs.Protocol.Club.V1.Client.ClubSlot.Parser, new[]{ "Role", "DefaultStreamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.SendInvitationOptions), global::Bgs.Protocol.Club.V1.Client.SendInvitationOptions.Parser, new[]{ "TargetId", "Slot", "Attribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubInvitation), global::Bgs.Protocol.Club.V1.Client.ClubInvitation.Parser, new[]{ "Id", "Inviter", "Invitee", "Club", "Slot", "Attribute", "CreationTime", "ExpirationTime", "Suggester" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.SendSuggestionOptions), global::Bgs.Protocol.Club.V1.Client.SendSuggestionOptions.Parser, new[]{ "TargetId", "Slot", "Attribute", "JoinClubSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSuggestion), global::Bgs.Protocol.Club.V1.Client.ClubSuggestion.Parser, new[]{ "Id", "ClubId", "Suggester", "Suggestee", "Slot", "Attribute", "CreationTime", "ExpirationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.CreateTicketOptions), global::Bgs.Protocol.Club.V1.Client.CreateTicketOptions.Parser, new[]{ "Slot", "Attribute", "AllowedRedeemCount", "ExpirationTime", "JoinClubSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubTicket), global::Bgs.Protocol.Club.V1.Client.ClubTicket.Parser, new[]{ "Id", "Creator", "Club", "Slot", "Attribute", "CurrentRedeemCount", "AllowedRedeemCount", "CreationTime", "ExpirationTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClubSlot : pb::IMessage<ClubSlot> {
    private static readonly pb::MessageParser<ClubSlot> _parser = new pb::MessageParser<ClubSlot>(() => new ClubSlot());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSlot(ClubSlot other) : this() {
      _hasBits0 = other._hasBits0;
      role_ = other.role_;
      defaultStreamId_ = other.defaultStreamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSlot Clone() {
      return new ClubSlot(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private readonly static uint RoleDefaultValue = 0;

    private uint role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Role {
      get { if ((_hasBits0 & 1) != 0) { return role_; } else { return RoleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        role_ = value;
      }
    }
    /// <summary>Gets whether the "role" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRole {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "role" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRole() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "default_stream_id" field.</summary>
    public const int DefaultStreamIdFieldNumber = 2;
    private readonly static ulong DefaultStreamIdDefaultValue = 0UL;

    private ulong defaultStreamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DefaultStreamId {
      get { if ((_hasBits0 & 2) != 0) { return defaultStreamId_; } else { return DefaultStreamIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        defaultStreamId_ = value;
      }
    }
    /// <summary>Gets whether the "default_stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultStreamId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "default_stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefaultStreamId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (DefaultStreamId != other.DefaultStreamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRole) hash ^= Role.GetHashCode();
      if (HasDefaultStreamId) hash ^= DefaultStreamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRole) {
        output.WriteRawTag(8);
        output.WriteUInt32(Role);
      }
      if (HasDefaultStreamId) {
        output.WriteRawTag(16);
        output.WriteUInt64(DefaultStreamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRole) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Role);
      }
      if (HasDefaultStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DefaultStreamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSlot other) {
      if (other == null) {
        return;
      }
      if (other.HasRole) {
        Role = other.Role;
      }
      if (other.HasDefaultStreamId) {
        DefaultStreamId = other.DefaultStreamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Role = input.ReadUInt32();
            break;
          }
          case 16: {
            DefaultStreamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendInvitationOptions : pb::IMessage<SendInvitationOptions> {
    private static readonly pb::MessageParser<SendInvitationOptions> _parser = new pb::MessageParser<SendInvitationOptions>(() => new SendInvitationOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendInvitationOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInvitationOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInvitationOptions(SendInvitationOptions other) : this() {
      targetId_ = other.HasTargetId ? other.targetId_.Clone() : null;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendInvitationOptions Clone() {
      return new SendInvitationOptions(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.MemberId targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.MemberId TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the target_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return targetId_ != null; }
    }
    /// <summary>Clears the value of the target_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      targetId_ = null;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendInvitationOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendInvitationOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetId) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetId);
      }
      if (HasSlot) {
        output.WriteRawTag(18);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendInvitationOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetId) {
        if (!HasTargetId) {
          TargetId = new global::Bgs.Protocol.Club.V1.MemberId();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTargetId) {
              TargetId = new global::Bgs.Protocol.Club.V1.MemberId();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 18: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubInvitation : pb::IMessage<ClubInvitation> {
    private static readonly pb::MessageParser<ClubInvitation> _parser = new pb::MessageParser<ClubInvitation>(() => new ClubInvitation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubInvitation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitation(ClubInvitation other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      inviter_ = other.HasInviter ? other.inviter_.Clone() : null;
      invitee_ = other.HasInvitee ? other.invitee_.Clone() : null;
      club_ = other.HasClub ? other.club_.Clone() : null;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      creationTime_ = other.creationTime_;
      expirationTime_ = other.expirationTime_;
      suggester_ = other.HasSuggester ? other.suggester_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitation Clone() {
      return new ClubInvitation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "inviter" field.</summary>
    public const int InviterFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription inviter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Inviter {
      get { return inviter_; }
      set {
        inviter_ = value;
      }
    }
    /// <summary>Gets whether the inviter field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInviter {
      get { return inviter_ != null; }
    }
    /// <summary>Clears the value of the inviter field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInviter() {
      inviter_ = null;
    }

    /// <summary>Field number for the "invitee" field.</summary>
    public const int InviteeFieldNumber = 3;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription invitee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Invitee {
      get { return invitee_; }
      set {
        invitee_ = value;
      }
    }
    /// <summary>Gets whether the invitee field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvitee {
      get { return invitee_ != null; }
    }
    /// <summary>Clears the value of the invitee field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvitee() {
      invitee_ = null;
    }

    /// <summary>Field number for the "club" field.</summary>
    public const int ClubFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.ClubDescription club_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.ClubDescription Club {
      get { return club_; }
      set {
        club_ = value;
      }
    }
    /// <summary>Gets whether the club field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClub {
      get { return club_ != null; }
    }
    /// <summary>Clears the value of the club field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClub() {
      club_ = null;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(50, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 7;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 2) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 8;
    private readonly static ulong ExpirationTimeDefaultValue = 0UL;

    private ulong expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationTime {
      get { if ((_hasBits0 & 4) != 0) { return expirationTime_; } else { return ExpirationTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        expirationTime_ = value;
      }
    }
    /// <summary>Gets whether the "expiration_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpirationTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "expiration_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpirationTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "suggester" field.</summary>
    public const int SuggesterFieldNumber = 9;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription suggester_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Suggester {
      get { return suggester_; }
      set {
        suggester_ = value;
      }
    }
    /// <summary>Gets whether the suggester field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggester {
      get { return suggester_ != null; }
    }
    /// <summary>Clears the value of the suggester field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggester() {
      suggester_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubInvitation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubInvitation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Inviter, other.Inviter)) return false;
      if (!object.Equals(Invitee, other.Invitee)) return false;
      if (!object.Equals(Club, other.Club)) return false;
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (CreationTime != other.CreationTime) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (!object.Equals(Suggester, other.Suggester)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasInviter) hash ^= Inviter.GetHashCode();
      if (HasInvitee) hash ^= Invitee.GetHashCode();
      if (HasClub) hash ^= Club.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasExpirationTime) hash ^= ExpirationTime.GetHashCode();
      if (HasSuggester) hash ^= Suggester.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (HasInviter) {
        output.WriteRawTag(18);
        output.WriteMessage(Inviter);
      }
      if (HasInvitee) {
        output.WriteRawTag(26);
        output.WriteMessage(Invitee);
      }
      if (HasClub) {
        output.WriteRawTag(34);
        output.WriteMessage(Club);
      }
      if (HasSlot) {
        output.WriteRawTag(42);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasCreationTime) {
        output.WriteRawTag(56);
        output.WriteUInt64(CreationTime);
      }
      if (HasExpirationTime) {
        output.WriteRawTag(64);
        output.WriteUInt64(ExpirationTime);
      }
      if (HasSuggester) {
        output.WriteRawTag(74);
        output.WriteMessage(Suggester);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + 8;
      }
      if (HasInviter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inviter);
      }
      if (HasInvitee) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invitee);
      }
      if (HasClub) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Club);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasExpirationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTime);
      }
      if (HasSuggester) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Suggester);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubInvitation other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasInviter) {
        if (!HasInviter) {
          Inviter = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Inviter.MergeFrom(other.Inviter);
      }
      if (other.HasInvitee) {
        if (!HasInvitee) {
          Invitee = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Invitee.MergeFrom(other.Invitee);
      }
      if (other.HasClub) {
        if (!HasClub) {
          Club = new global::Bgs.Protocol.Club.V1.ClubDescription();
        }
        Club.MergeFrom(other.Club);
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasExpirationTime) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.HasSuggester) {
        if (!HasSuggester) {
          Suggester = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Suggester.MergeFrom(other.Suggester);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 18: {
            if (!HasInviter) {
              Inviter = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Inviter);
            break;
          }
          case 26: {
            if (!HasInvitee) {
              Invitee = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Invitee);
            break;
          }
          case 34: {
            if (!HasClub) {
              Club = new global::Bgs.Protocol.Club.V1.ClubDescription();
            }
            input.ReadMessage(Club);
            break;
          }
          case 42: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 50: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 56: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 64: {
            ExpirationTime = input.ReadUInt64();
            break;
          }
          case 74: {
            if (!HasSuggester) {
              Suggester = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Suggester);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendSuggestionOptions : pb::IMessage<SendSuggestionOptions> {
    private static readonly pb::MessageParser<SendSuggestionOptions> _parser = new pb::MessageParser<SendSuggestionOptions>(() => new SendSuggestionOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendSuggestionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSuggestionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSuggestionOptions(SendSuggestionOptions other) : this() {
      _hasBits0 = other._hasBits0;
      targetId_ = other.HasTargetId ? other.targetId_.Clone() : null;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      joinClubSource_ = other.joinClubSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendSuggestionOptions Clone() {
      return new SendSuggestionOptions(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.MemberId targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.MemberId TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }
    /// <summary>Gets whether the target_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetId {
      get { return targetId_ != null; }
    }
    /// <summary>Clears the value of the target_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetId() {
      targetId_ = null;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "join_club_source" field.</summary>
    public const int JoinClubSourceFieldNumber = 4;
    private readonly static uint JoinClubSourceDefaultValue = 0;

    private uint joinClubSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinClubSource {
      get { if ((_hasBits0 & 1) != 0) { return joinClubSource_; } else { return JoinClubSourceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        joinClubSource_ = value;
      }
    }
    /// <summary>Gets whether the "join_club_source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoinClubSource {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "join_club_source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoinClubSource() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendSuggestionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendSuggestionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (JoinClubSource != other.JoinClubSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetId) hash ^= TargetId.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasJoinClubSource) hash ^= JoinClubSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTargetId) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetId);
      }
      if (HasSlot) {
        output.WriteRawTag(18);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasJoinClubSource) {
        output.WriteRawTag(32);
        output.WriteUInt32(JoinClubSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasJoinClubSource) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinClubSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendSuggestionOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetId) {
        if (!HasTargetId) {
          TargetId = new global::Bgs.Protocol.Club.V1.MemberId();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      if (other.HasJoinClubSource) {
        JoinClubSource = other.JoinClubSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTargetId) {
              TargetId = new global::Bgs.Protocol.Club.V1.MemberId();
            }
            input.ReadMessage(TargetId);
            break;
          }
          case 18: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 32: {
            JoinClubSource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSuggestion : pb::IMessage<ClubSuggestion> {
    private static readonly pb::MessageParser<ClubSuggestion> _parser = new pb::MessageParser<ClubSuggestion>(() => new ClubSuggestion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSuggestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestion(ClubSuggestion other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      clubId_ = other.clubId_;
      suggester_ = other.HasSuggester ? other.suggester_.Clone() : null;
      suggestee_ = other.HasSuggestee ? other.suggestee_.Clone() : null;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      creationTime_ = other.creationTime_;
      expirationTime_ = other.expirationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestion Clone() {
      return new ClubSuggestion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 2;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 2) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "suggester" field.</summary>
    public const int SuggesterFieldNumber = 3;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription suggester_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Suggester {
      get { return suggester_; }
      set {
        suggester_ = value;
      }
    }
    /// <summary>Gets whether the suggester field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggester {
      get { return suggester_ != null; }
    }
    /// <summary>Clears the value of the suggester field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggester() {
      suggester_ = null;
    }

    /// <summary>Field number for the "suggestee" field.</summary>
    public const int SuggesteeFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription suggestee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Suggestee {
      get { return suggestee_; }
      set {
        suggestee_ = value;
      }
    }
    /// <summary>Gets whether the suggestee field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggestee {
      get { return suggestee_ != null; }
    }
    /// <summary>Clears the value of the suggestee field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggestee() {
      suggestee_ = null;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(50, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 7;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 4) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 8;
    private readonly static ulong ExpirationTimeDefaultValue = 0UL;

    private ulong expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationTime {
      get { if ((_hasBits0 & 8) != 0) { return expirationTime_; } else { return ExpirationTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        expirationTime_ = value;
      }
    }
    /// <summary>Gets whether the "expiration_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpirationTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "expiration_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpirationTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSuggestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSuggestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClubId != other.ClubId) return false;
      if (!object.Equals(Suggester, other.Suggester)) return false;
      if (!object.Equals(Suggestee, other.Suggestee)) return false;
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (CreationTime != other.CreationTime) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasSuggester) hash ^= Suggester.GetHashCode();
      if (HasSuggestee) hash ^= Suggestee.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasExpirationTime) hash ^= ExpirationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (HasClubId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClubId);
      }
      if (HasSuggester) {
        output.WriteRawTag(26);
        output.WriteMessage(Suggester);
      }
      if (HasSuggestee) {
        output.WriteRawTag(34);
        output.WriteMessage(Suggestee);
      }
      if (HasSlot) {
        output.WriteRawTag(42);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasCreationTime) {
        output.WriteRawTag(56);
        output.WriteUInt64(CreationTime);
      }
      if (HasExpirationTime) {
        output.WriteRawTag(64);
        output.WriteUInt64(ExpirationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + 8;
      }
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasSuggester) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Suggester);
      }
      if (HasSuggestee) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Suggestee);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasExpirationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSuggestion other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasSuggester) {
        if (!HasSuggester) {
          Suggester = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Suggester.MergeFrom(other.Suggester);
      }
      if (other.HasSuggestee) {
        if (!HasSuggestee) {
          Suggestee = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Suggestee.MergeFrom(other.Suggestee);
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasExpirationTime) {
        ExpirationTime = other.ExpirationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasSuggester) {
              Suggester = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Suggester);
            break;
          }
          case 34: {
            if (!HasSuggestee) {
              Suggestee = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Suggestee);
            break;
          }
          case 42: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 50: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 56: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 64: {
            ExpirationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateTicketOptions : pb::IMessage<CreateTicketOptions> {
    private static readonly pb::MessageParser<CreateTicketOptions> _parser = new pb::MessageParser<CreateTicketOptions>(() => new CreateTicketOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTicketOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTicketOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTicketOptions(CreateTicketOptions other) : this() {
      _hasBits0 = other._hasBits0;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      allowedRedeemCount_ = other.allowedRedeemCount_;
      expirationTime_ = other.expirationTime_;
      joinClubSource_ = other.joinClubSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTicketOptions Clone() {
      return new CreateTicketOptions(this);
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "allowed_redeem_count" field.</summary>
    public const int AllowedRedeemCountFieldNumber = 3;
    private readonly static uint AllowedRedeemCountDefaultValue = 0;

    private uint allowedRedeemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllowedRedeemCount {
      get { if ((_hasBits0 & 1) != 0) { return allowedRedeemCount_; } else { return AllowedRedeemCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        allowedRedeemCount_ = value;
      }
    }
    /// <summary>Gets whether the "allowed_redeem_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowedRedeemCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "allowed_redeem_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowedRedeemCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 4;
    private readonly static ulong ExpirationTimeDefaultValue = 0UL;

    private ulong expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationTime {
      get { if ((_hasBits0 & 2) != 0) { return expirationTime_; } else { return ExpirationTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expirationTime_ = value;
      }
    }
    /// <summary>Gets whether the "expiration_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpirationTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expiration_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpirationTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "join_club_source" field.</summary>
    public const int JoinClubSourceFieldNumber = 5;
    private readonly static uint JoinClubSourceDefaultValue = 0;

    private uint joinClubSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinClubSource {
      get { if ((_hasBits0 & 4) != 0) { return joinClubSource_; } else { return JoinClubSourceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        joinClubSource_ = value;
      }
    }
    /// <summary>Gets whether the "join_club_source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJoinClubSource {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "join_club_source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJoinClubSource() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTicketOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTicketOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (AllowedRedeemCount != other.AllowedRedeemCount) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (JoinClubSource != other.JoinClubSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasAllowedRedeemCount) hash ^= AllowedRedeemCount.GetHashCode();
      if (HasExpirationTime) hash ^= ExpirationTime.GetHashCode();
      if (HasJoinClubSource) hash ^= JoinClubSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSlot) {
        output.WriteRawTag(10);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasAllowedRedeemCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(AllowedRedeemCount);
      }
      if (HasExpirationTime) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExpirationTime);
      }
      if (HasJoinClubSource) {
        output.WriteRawTag(40);
        output.WriteUInt32(JoinClubSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasAllowedRedeemCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllowedRedeemCount);
      }
      if (HasExpirationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTime);
      }
      if (HasJoinClubSource) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinClubSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTicketOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      if (other.HasAllowedRedeemCount) {
        AllowedRedeemCount = other.AllowedRedeemCount;
      }
      if (other.HasExpirationTime) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.HasJoinClubSource) {
        JoinClubSource = other.JoinClubSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 24: {
            AllowedRedeemCount = input.ReadUInt32();
            break;
          }
          case 32: {
            ExpirationTime = input.ReadUInt64();
            break;
          }
          case 40: {
            JoinClubSource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubTicket : pb::IMessage<ClubTicket> {
    private static readonly pb::MessageParser<ClubTicket> _parser = new pb::MessageParser<ClubTicket>(() => new ClubTicket());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubInvitationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicket(ClubTicket other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      creator_ = other.HasCreator ? other.creator_.Clone() : null;
      club_ = other.HasClub ? other.club_.Clone() : null;
      slot_ = other.HasSlot ? other.slot_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      currentRedeemCount_ = other.currentRedeemCount_;
      allowedRedeemCount_ = other.allowedRedeemCount_;
      creationTime_ = other.creationTime_;
      expirationTime_ = other.expirationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicket Clone() {
      return new ClubTicket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription creator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }
    /// <summary>Gets whether the creator field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreator {
      get { return creator_ != null; }
    }
    /// <summary>Clears the value of the creator field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreator() {
      creator_ = null;
    }

    /// <summary>Field number for the "club" field.</summary>
    public const int ClubFieldNumber = 3;
    private global::Bgs.Protocol.Club.V1.ClubDescription club_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.ClubDescription Club {
      get { return club_; }
      set {
        club_ = value;
      }
    }
    /// <summary>Gets whether the club field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClub {
      get { return club_ != null; }
    }
    /// <summary>Clears the value of the club field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClub() {
      club_ = null;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.ClubSlot slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSlot Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }
    /// <summary>Gets whether the slot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSlot {
      get { return slot_ != null; }
    }
    /// <summary>Clears the value of the slot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSlot() {
      slot_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(42, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "current_redeem_count" field.</summary>
    public const int CurrentRedeemCountFieldNumber = 6;
    private readonly static uint CurrentRedeemCountDefaultValue = 0;

    private uint currentRedeemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentRedeemCount {
      get { if ((_hasBits0 & 1) != 0) { return currentRedeemCount_; } else { return CurrentRedeemCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currentRedeemCount_ = value;
      }
    }
    /// <summary>Gets whether the "current_redeem_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentRedeemCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "current_redeem_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentRedeemCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "allowed_redeem_count" field.</summary>
    public const int AllowedRedeemCountFieldNumber = 7;
    private readonly static uint AllowedRedeemCountDefaultValue = 0;

    private uint allowedRedeemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllowedRedeemCount {
      get { if ((_hasBits0 & 2) != 0) { return allowedRedeemCount_; } else { return AllowedRedeemCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        allowedRedeemCount_ = value;
      }
    }
    /// <summary>Gets whether the "allowed_redeem_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllowedRedeemCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "allowed_redeem_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllowedRedeemCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 8;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 4) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 9;
    private readonly static ulong ExpirationTimeDefaultValue = 0UL;

    private ulong expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpirationTime {
      get { if ((_hasBits0 & 8) != 0) { return expirationTime_; } else { return ExpirationTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        expirationTime_ = value;
      }
    }
    /// <summary>Gets whether the "expiration_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpirationTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "expiration_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpirationTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Creator, other.Creator)) return false;
      if (!object.Equals(Club, other.Club)) return false;
      if (!object.Equals(Slot, other.Slot)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (CurrentRedeemCount != other.CurrentRedeemCount) return false;
      if (AllowedRedeemCount != other.AllowedRedeemCount) return false;
      if (CreationTime != other.CreationTime) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCreator) hash ^= Creator.GetHashCode();
      if (HasClub) hash ^= Club.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasCurrentRedeemCount) hash ^= CurrentRedeemCount.GetHashCode();
      if (HasAllowedRedeemCount) hash ^= AllowedRedeemCount.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasExpirationTime) hash ^= ExpirationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasCreator) {
        output.WriteRawTag(18);
        output.WriteMessage(Creator);
      }
      if (HasClub) {
        output.WriteRawTag(26);
        output.WriteMessage(Club);
      }
      if (HasSlot) {
        output.WriteRawTag(34);
        output.WriteMessage(Slot);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasCurrentRedeemCount) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurrentRedeemCount);
      }
      if (HasAllowedRedeemCount) {
        output.WriteRawTag(56);
        output.WriteUInt32(AllowedRedeemCount);
      }
      if (HasCreationTime) {
        output.WriteRawTag(64);
        output.WriteUInt64(CreationTime);
      }
      if (HasExpirationTime) {
        output.WriteRawTag(72);
        output.WriteUInt64(ExpirationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasCreator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (HasClub) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Club);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slot);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasCurrentRedeemCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentRedeemCount);
      }
      if (HasAllowedRedeemCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllowedRedeemCount);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasExpirationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubTicket other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCreator) {
        if (!HasCreator) {
          Creator = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Creator.MergeFrom(other.Creator);
      }
      if (other.HasClub) {
        if (!HasClub) {
          Club = new global::Bgs.Protocol.Club.V1.ClubDescription();
        }
        Club.MergeFrom(other.Club);
      }
      if (other.HasSlot) {
        if (!HasSlot) {
          Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
        }
        Slot.MergeFrom(other.Slot);
      }
      attribute_.Add(other.attribute_);
      if (other.HasCurrentRedeemCount) {
        CurrentRedeemCount = other.CurrentRedeemCount;
      }
      if (other.HasAllowedRedeemCount) {
        AllowedRedeemCount = other.AllowedRedeemCount;
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasExpirationTime) {
        ExpirationTime = other.ExpirationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (!HasCreator) {
              Creator = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Creator);
            break;
          }
          case 26: {
            if (!HasClub) {
              Club = new global::Bgs.Protocol.Club.V1.ClubDescription();
            }
            input.ReadMessage(Club);
            break;
          }
          case 34: {
            if (!HasSlot) {
              Slot = new global::Bgs.Protocol.Club.V1.Client.ClubSlot();
            }
            input.ReadMessage(Slot);
            break;
          }
          case 42: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 48: {
            CurrentRedeemCount = input.ReadUInt32();
            break;
          }
          case 56: {
            AllowedRedeemCount = input.ReadUInt32();
            break;
          }
          case 64: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 72: {
            ExpirationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
