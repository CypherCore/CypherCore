// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/channel_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Channel.V1 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/channel_types.proto</summary>
  public static partial class ChannelTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/channel_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChannelTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NoYW5uZWxfdHlw",
            "ZXMucHJvdG8SF2Jncy5wcm90b2NvbC5jaGFubmVsLnYxGjBiZ3MvbG93L3Bi",
            "L2NsaWVudC9hcGkvY2xpZW50L3YxL2NoYW5uZWxfaWQucHJvdG8aJ2Jncy9s",
            "b3cvcGIvY2xpZW50L2F0dHJpYnV0ZV90eXBlcy5wcm90bxokYmdzL2xvdy9w",
            "Yi9jbGllbnQvZW50aXR5X3R5cGVzLnByb3RvGiViZ3MvbG93L3BiL2NsaWVu",
            "dC9hY2NvdW50X3R5cGVzLnByb3RvGjZiZ3MvbG93L3BiL2NsaWVudC9hcGkv",
            "Y29tbW9uL3YxL2ludml0YXRpb25fdHlwZXMucHJvdG8aIWJncy9sb3cvcGIv",
            "Y2xpZW50L3JwY190eXBlcy5wcm90bxo3YmdzL2xvdy9wYi9jbGllbnQvZ2xv",
            "YmFsX2V4dGVuc2lvbnMvZmllbGRfb3B0aW9ucy5wcm90bxo5YmdzL2xvdy9w",
            "Yi9jbGllbnQvZ2xvYmFsX2V4dGVuc2lvbnMvbWVzc2FnZV9vcHRpb25zLnBy",
            "b3RvGjhiZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9tZXRo",
            "b2Rfb3B0aW9ucy5wcm90bxo5YmdzL2xvdy9wYi9jbGllbnQvZ2xvYmFsX2V4",
            "dGVuc2lvbnMvc2VydmljZV9vcHRpb25zLnByb3RvIjwKB01lc3NhZ2USKgoJ",
            "YXR0cmlidXRlGAEgAygLMhcuYmdzLnByb3RvY29sLkF0dHJpYnV0ZSoFCGQQ",
            "kU4i2wEKE0xpc3RDaGFubmVsc09wdGlvbnMSFgoLc3RhcnRfaW5kZXgYASAB",
            "KA06ATASFwoLbWF4X3Jlc3VsdHMYAiABKA06AjE2EgwKBG5hbWUYAyABKAkS",
            "DwoHcHJvZ3JhbRgEIAEoBxIOCgZsb2NhbGUYBSABKAcSFQoNY2FwYWNpdHlf",
            "ZnVsbBgGIAEoDRI3ChBhdHRyaWJ1dGVfZmlsdGVyGAcgAigLMh0uYmdzLnBy",
            "b3RvY29sLkF0dHJpYnV0ZUZpbHRlchIUCgxjaGFubmVsX3R5cGUYCCABKAki",
            "jwEKEkNoYW5uZWxEZXNjcmlwdGlvbhIqCgpjaGFubmVsX2lkGAEgAigLMhYu",
            "YmdzLnByb3RvY29sLkVudGl0eUlkEhcKD2N1cnJlbnRfbWVtYmVycxgCIAEo",
            "DRI0CgVzdGF0ZRgDIAEoCzIlLmJncy5wcm90b2NvbC5jaGFubmVsLnYxLkNo",
            "YW5uZWxTdGF0ZSKAAQoLQ2hhbm5lbEluZm8SQAoLZGVzY3JpcHRpb24YASAC",
            "KAsyKy5iZ3MucHJvdG9jb2wuY2hhbm5lbC52MS5DaGFubmVsRGVzY3JpcHRp",
            "b24SLwoGbWVtYmVyGAIgAygLMh8uYmdzLnByb3RvY29sLmNoYW5uZWwudjEu",
            "TWVtYmVyIv8DCgxDaGFubmVsU3RhdGUSEwoLbWF4X21lbWJlcnMYASABKA0S",
            "EwoLbWluX21lbWJlcnMYAiABKA0SKgoJYXR0cmlidXRlGAMgAygLMhcuYmdz",
            "LnByb3RvY29sLkF0dHJpYnV0ZRIsCgppbnZpdGF0aW9uGAQgAygLMhguYmdz",
            "LnByb3RvY29sLkludml0YXRpb24SDgoGcmVhc29uGAYgASgNEl0KDXByaXZh",
            "Y3lfbGV2ZWwYByABKA4yMi5iZ3MucHJvdG9jb2wuY2hhbm5lbC52MS5DaGFu",
            "bmVsU3RhdGUuUHJpdmFjeUxldmVsOhJQUklWQUNZX0xFVkVMX09QRU4SDAoE",
            "bmFtZRgIIAEoCRIdCgxjaGFubmVsX3R5cGUYCiABKAk6B2RlZmF1bHQSDwoH",
            "cHJvZ3JhbRgLIAEoBxIjChVzdWJzY3JpYmVfdG9fcHJlc2VuY2UYDSABKAg6",
            "BHRydWUikQEKDFByaXZhY3lMZXZlbBIWChJQUklWQUNZX0xFVkVMX09QRU4Q",
            "ARIsCihQUklWQUNZX0xFVkVMX09QRU5fSU5WSVRBVElPTl9BTkRfRlJJRU5E",
            "EAISIQodUFJJVkFDWV9MRVZFTF9PUEVOX0lOVklUQVRJT04QAxIYChRQUklW",
            "QUNZX0xFVkVMX0NMT1NFRBAEKgUIZBCRTiIvChFNZW1iZXJBY2NvdW50SW5m",
            "bxIaCgpiYXR0bGVfdGFnGAMgASgJQgaC+SsCCAEinAEKC01lbWJlclN0YXRl",
            "EioKCWF0dHJpYnV0ZRgBIAMoCzIXLmJncy5wcm90b2NvbC5BdHRyaWJ1dGUS",
            "EAoEcm9sZRgCIAMoDUICEAESFQoKcHJpdmlsZWdlcxgDIAEoBDoBMBI4CgRp",
            "bmZvGAQgASgLMiouYmdzLnByb3RvY29sLmNoYW5uZWwudjEuTWVtYmVyQWNj",
            "b3VudEluZm8iZwoGTWVtYmVyEigKCGlkZW50aXR5GAEgAigLMhYuYmdzLnBy",
            "b3RvY29sLklkZW50aXR5EjMKBXN0YXRlGAIgAigLMiQuYmdzLnByb3RvY29s",
            "LmNoYW5uZWwudjEuTWVtYmVyU3RhdGUiuwEKDFN1YnNjcmliZXJJZBI3Cgdh",
            "Y2NvdW50GAEgASgLMiIuYmdzLnByb3RvY29sLmFjY291bnQudjEuQWNjb3Vu",
            "dElkQgIYARJACgxnYW1lX2FjY291bnQYAiABKAsyKi5iZ3MucHJvdG9jb2wu",
            "YWNjb3VudC52MS5HYW1lQWNjb3VudEhhbmRsZRIoCgdwcm9jZXNzGAMgASgL",
            "MhcuYmdzLnByb3RvY29sLlByb2Nlc3NJZDoGgvkrAhABUAA="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Channel.V1.ChannelIdReflection.Descriptor, global::Bgs.Protocol.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.EntityTypesReflection.Descriptor, global::Bgs.Protocol.Account.V1.AccountTypesReflection.Descriptor, global::Bgs.Protocol.InvitationTypesReflection.Descriptor, global::Bgs.Protocol.RpcTypesReflection.Descriptor, global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.Message), global::Bgs.Protocol.Channel.V1.Message.Parser, new[]{ "Attribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.ListChannelsOptions), global::Bgs.Protocol.Channel.V1.ListChannelsOptions.Parser, new[]{ "StartIndex", "MaxResults", "Name", "Program", "Locale", "CapacityFull", "AttributeFilter", "ChannelType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.ChannelDescription), global::Bgs.Protocol.Channel.V1.ChannelDescription.Parser, new[]{ "ChannelId", "CurrentMembers", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.ChannelInfo), global::Bgs.Protocol.Channel.V1.ChannelInfo.Parser, new[]{ "Description", "Member" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.ChannelState), global::Bgs.Protocol.Channel.V1.ChannelState.Parser, new[]{ "MaxMembers", "MinMembers", "Attribute", "Invitation", "Reason", "PrivacyLevel", "Name", "ChannelType", "Program", "SubscribeToPresence" }, null, new[]{ typeof(global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.MemberAccountInfo), global::Bgs.Protocol.Channel.V1.MemberAccountInfo.Parser, new[]{ "BattleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.MemberState), global::Bgs.Protocol.Channel.V1.MemberState.Parser, new[]{ "Attribute", "Role", "Privileges", "Info" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.Member), global::Bgs.Protocol.Channel.V1.Member.Parser, new[]{ "Identity", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Channel.V1.SubscriberId), global::Bgs.Protocol.Channel.V1.SubscriberId.Parser, new[]{ "Account", "GameAccount", "Process" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Message : pb::IExtendableMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<Message> _extensions;
    private pb::ExtensionSet<Message> _Extensions => _extensions;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

    public TValue GetExtension<TValue>(pb::Extension<Message, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<Message, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<Message, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<Message, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<Message, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<Message, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<Message, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  public sealed partial class ListChannelsOptions : pb::IMessage<ListChannelsOptions> {
    private static readonly pb::MessageParser<ListChannelsOptions> _parser = new pb::MessageParser<ListChannelsOptions>(() => new ListChannelsOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsOptions(ListChannelsOptions other) : this() {
      _hasBits0 = other._hasBits0;
      startIndex_ = other.startIndex_;
      maxResults_ = other.maxResults_;
      name_ = other.name_;
      program_ = other.program_;
      locale_ = other.locale_;
      capacityFull_ = other.capacityFull_;
      attributeFilter_ = other.HasAttributeFilter ? other.attributeFilter_.Clone() : null;
      channelType_ = other.channelType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsOptions Clone() {
      return new ListChannelsOptions(this);
    }

    /// <summary>Field number for the "start_index" field.</summary>
    public const int StartIndexFieldNumber = 1;
    private readonly static uint StartIndexDefaultValue = 0;

    private uint startIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartIndex {
      get { if ((_hasBits0 & 1) != 0) { return startIndex_; } else { return StartIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startIndex_ = value;
      }
    }
    /// <summary>Gets whether the "start_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_results" field.</summary>
    public const int MaxResultsFieldNumber = 2;
    private readonly static uint MaxResultsDefaultValue = 16;

    private uint maxResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxResults {
      get { if ((_hasBits0 & 2) != 0) { return maxResults_; } else { return MaxResultsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxResults_ = value;
      }
    }
    /// <summary>Gets whether the "max_results" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxResults {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_results" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxResults() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 4;
    private readonly static uint ProgramDefaultValue = 0;

    private uint program_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Program {
      get { if ((_hasBits0 & 4) != 0) { return program_; } else { return ProgramDefaultValue; } }
      set {
        _hasBits0 |= 4;
        program_ = value;
      }
    }
    /// <summary>Gets whether the "program" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgram {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "program" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgram() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 5;
    private readonly static uint LocaleDefaultValue = 0;

    private uint locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Locale {
      get { if ((_hasBits0 & 8) != 0) { return locale_; } else { return LocaleDefaultValue; } }
      set {
        _hasBits0 |= 8;
        locale_ = value;
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "capacity_full" field.</summary>
    public const int CapacityFullFieldNumber = 6;
    private readonly static uint CapacityFullDefaultValue = 0;

    private uint capacityFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CapacityFull {
      get { if ((_hasBits0 & 16) != 0) { return capacityFull_; } else { return CapacityFullDefaultValue; } }
      set {
        _hasBits0 |= 16;
        capacityFull_ = value;
      }
    }
    /// <summary>Gets whether the "capacity_full" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCapacityFull {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "capacity_full" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCapacityFull() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "attribute_filter" field.</summary>
    public const int AttributeFilterFieldNumber = 7;
    private global::Bgs.Protocol.AttributeFilter attributeFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.AttributeFilter AttributeFilter {
      get { return attributeFilter_; }
      set {
        attributeFilter_ = value;
      }
    }
    /// <summary>Gets whether the attribute_filter field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttributeFilter {
      get { return attributeFilter_ != null; }
    }
    /// <summary>Clears the value of the attribute_filter field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttributeFilter() {
      attributeFilter_ = null;
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 8;
    private readonly static string ChannelTypeDefaultValue = "";

    private string channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelType {
      get { return channelType_ ?? ChannelTypeDefaultValue; }
      set {
        channelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "channel_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return channelType_ != null; }
    }
    /// <summary>Clears the value of the "channel_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      channelType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartIndex != other.StartIndex) return false;
      if (MaxResults != other.MaxResults) return false;
      if (Name != other.Name) return false;
      if (Program != other.Program) return false;
      if (Locale != other.Locale) return false;
      if (CapacityFull != other.CapacityFull) return false;
      if (!object.Equals(AttributeFilter, other.AttributeFilter)) return false;
      if (ChannelType != other.ChannelType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartIndex) hash ^= StartIndex.GetHashCode();
      if (HasMaxResults) hash ^= MaxResults.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasProgram) hash ^= Program.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (HasCapacityFull) hash ^= CapacityFull.GetHashCode();
      if (HasAttributeFilter) hash ^= AttributeFilter.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStartIndex) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartIndex);
      }
      if (HasMaxResults) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxResults);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasProgram) {
        output.WriteRawTag(37);
        output.WriteFixed32(Program);
      }
      if (HasLocale) {
        output.WriteRawTag(45);
        output.WriteFixed32(Locale);
      }
      if (HasCapacityFull) {
        output.WriteRawTag(48);
        output.WriteUInt32(CapacityFull);
      }
      if (HasAttributeFilter) {
        output.WriteRawTag(58);
        output.WriteMessage(AttributeFilter);
      }
      if (HasChannelType) {
        output.WriteRawTag(66);
        output.WriteString(ChannelType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartIndex);
      }
      if (HasMaxResults) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxResults);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasProgram) {
        size += 1 + 4;
      }
      if (HasLocale) {
        size += 1 + 4;
      }
      if (HasCapacityFull) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CapacityFull);
      }
      if (HasAttributeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttributeFilter);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasStartIndex) {
        StartIndex = other.StartIndex;
      }
      if (other.HasMaxResults) {
        MaxResults = other.MaxResults;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasProgram) {
        Program = other.Program;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.HasCapacityFull) {
        CapacityFull = other.CapacityFull;
      }
      if (other.HasAttributeFilter) {
        if (!HasAttributeFilter) {
          AttributeFilter = new global::Bgs.Protocol.AttributeFilter();
        }
        AttributeFilter.MergeFrom(other.AttributeFilter);
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxResults = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 37: {
            Program = input.ReadFixed32();
            break;
          }
          case 45: {
            Locale = input.ReadFixed32();
            break;
          }
          case 48: {
            CapacityFull = input.ReadUInt32();
            break;
          }
          case 58: {
            if (!HasAttributeFilter) {
              AttributeFilter = new global::Bgs.Protocol.AttributeFilter();
            }
            input.ReadMessage(AttributeFilter);
            break;
          }
          case 66: {
            ChannelType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelDescription : pb::IMessage<ChannelDescription> {
    private static readonly pb::MessageParser<ChannelDescription> _parser = new pb::MessageParser<ChannelDescription>(() => new ChannelDescription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelDescription(ChannelDescription other) : this() {
      _hasBits0 = other._hasBits0;
      channelId_ = other.HasChannelId ? other.channelId_.Clone() : null;
      currentMembers_ = other.currentMembers_;
      state_ = other.HasState ? other.state_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelDescription Clone() {
      return new ChannelDescription(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private global::Bgs.Protocol.EntityId channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.EntityId ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }
    /// <summary>Gets whether the channel_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelId {
      get { return channelId_ != null; }
    }
    /// <summary>Clears the value of the channel_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelId() {
      channelId_ = null;
    }

    /// <summary>Field number for the "current_members" field.</summary>
    public const int CurrentMembersFieldNumber = 2;
    private readonly static uint CurrentMembersDefaultValue = 0;

    private uint currentMembers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentMembers {
      get { if ((_hasBits0 & 1) != 0) { return currentMembers_; } else { return CurrentMembersDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currentMembers_ = value;
      }
    }
    /// <summary>Gets whether the "current_members" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrentMembers {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "current_members" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrentMembers() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Bgs.Protocol.Channel.V1.ChannelState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Channel.V1.ChannelState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }
    /// <summary>Gets whether the state field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return state_ != null; }
    }
    /// <summary>Clears the value of the state field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelId, other.ChannelId)) return false;
      if (CurrentMembers != other.CurrentMembers) return false;
      if (!object.Equals(State, other.State)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelId) hash ^= ChannelId.GetHashCode();
      if (HasCurrentMembers) hash ^= CurrentMembers.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasChannelId) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelId);
      }
      if (HasCurrentMembers) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrentMembers);
      }
      if (HasState) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelId);
      }
      if (HasCurrentMembers) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentMembers);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelDescription other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelId) {
        if (!HasChannelId) {
          ChannelId = new global::Bgs.Protocol.EntityId();
        }
        ChannelId.MergeFrom(other.ChannelId);
      }
      if (other.HasCurrentMembers) {
        CurrentMembers = other.CurrentMembers;
      }
      if (other.HasState) {
        if (!HasState) {
          State = new global::Bgs.Protocol.Channel.V1.ChannelState();
        }
        State.MergeFrom(other.State);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasChannelId) {
              ChannelId = new global::Bgs.Protocol.EntityId();
            }
            input.ReadMessage(ChannelId);
            break;
          }
          case 16: {
            CurrentMembers = input.ReadUInt32();
            break;
          }
          case 26: {
            if (!HasState) {
              State = new global::Bgs.Protocol.Channel.V1.ChannelState();
            }
            input.ReadMessage(State);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelInfo : pb::IMessage<ChannelInfo> {
    private static readonly pb::MessageParser<ChannelInfo> _parser = new pb::MessageParser<ChannelInfo>(() => new ChannelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelInfo(ChannelInfo other) : this() {
      description_ = other.HasDescription ? other.description_.Clone() : null;
      member_ = other.member_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelInfo Clone() {
      return new ChannelInfo(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private global::Bgs.Protocol.Channel.V1.ChannelDescription description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Channel.V1.ChannelDescription Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }
    /// <summary>Gets whether the description field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the description field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Channel.V1.Member> _repeated_member_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.Channel.V1.Member.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Channel.V1.Member> member_ = new pbc::RepeatedField<global::Bgs.Protocol.Channel.V1.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Channel.V1.Member> Member {
      get { return member_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Description, other.Description)) return false;
      if(!member_.Equals(other.member_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescription) hash ^= Description.GetHashCode();
      hash ^= member_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDescription) {
        output.WriteRawTag(10);
        output.WriteMessage(Description);
      }
      member_.WriteTo(output, _repeated_member_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      size += member_.CalculateSize(_repeated_member_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasDescription) {
        if (!HasDescription) {
          Description = new global::Bgs.Protocol.Channel.V1.ChannelDescription();
        }
        Description.MergeFrom(other.Description);
      }
      member_.Add(other.member_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasDescription) {
              Description = new global::Bgs.Protocol.Channel.V1.ChannelDescription();
            }
            input.ReadMessage(Description);
            break;
          }
          case 18: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelState : pb::IExtendableMessage<ChannelState> {
    private static readonly pb::MessageParser<ChannelState> _parser = new pb::MessageParser<ChannelState>(() => new ChannelState());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<ChannelState> _extensions;
    private pb::ExtensionSet<ChannelState> _Extensions => _extensions;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelState(ChannelState other) : this() {
      _hasBits0 = other._hasBits0;
      maxMembers_ = other.maxMembers_;
      minMembers_ = other.minMembers_;
      attribute_ = other.attribute_.Clone();
      invitation_ = other.invitation_.Clone();
      reason_ = other.reason_;
      privacyLevel_ = other.privacyLevel_;
      name_ = other.name_;
      channelType_ = other.channelType_;
      program_ = other.program_;
      subscribeToPresence_ = other.subscribeToPresence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelState Clone() {
      return new ChannelState(this);
    }

    /// <summary>Field number for the "max_members" field.</summary>
    public const int MaxMembersFieldNumber = 1;
    private readonly static uint MaxMembersDefaultValue = 0;

    private uint maxMembers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMembers {
      get { if ((_hasBits0 & 1) != 0) { return maxMembers_; } else { return MaxMembersDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maxMembers_ = value;
      }
    }
    /// <summary>Gets whether the "max_members" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxMembers {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "max_members" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxMembers() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "min_members" field.</summary>
    public const int MinMembersFieldNumber = 2;
    private readonly static uint MinMembersDefaultValue = 0;

    private uint minMembers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinMembers {
      get { if ((_hasBits0 & 2) != 0) { return minMembers_; } else { return MinMembersDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minMembers_ = value;
      }
    }
    /// <summary>Gets whether the "min_members" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinMembers {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_members" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMinMembers() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "invitation" field.</summary>
    public const int InvitationFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Invitation> _repeated_invitation_codec
        = pb::FieldCodec.ForMessage(34, global::Bgs.Protocol.Invitation.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Invitation> invitation_ = new pbc::RepeatedField<global::Bgs.Protocol.Invitation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Invitation> Invitation {
      get { return invitation_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private readonly static uint ReasonDefaultValue = 0;

    private uint reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { if ((_hasBits0 & 4) != 0) { return reason_; } else { return ReasonDefaultValue; } }
      set {
        _hasBits0 |= 4;
        reason_ = value;
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel.Open;

    private global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 8) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 8;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 10;
    private readonly static string ChannelTypeDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("ZGVmYXVsdA=="));

    private string channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelType {
      get { return channelType_ ?? ChannelTypeDefaultValue; }
      set {
        channelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "channel_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelType {
      get { return channelType_ != null; }
    }
    /// <summary>Clears the value of the "channel_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelType() {
      channelType_ = null;
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 11;
    private readonly static uint ProgramDefaultValue = 0;

    private uint program_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Program {
      get { if ((_hasBits0 & 16) != 0) { return program_; } else { return ProgramDefaultValue; } }
      set {
        _hasBits0 |= 16;
        program_ = value;
      }
    }
    /// <summary>Gets whether the "program" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgram {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "program" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgram() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "subscribe_to_presence" field.</summary>
    public const int SubscribeToPresenceFieldNumber = 13;
    private readonly static bool SubscribeToPresenceDefaultValue = true;

    private bool subscribeToPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SubscribeToPresence {
      get { if ((_hasBits0 & 32) != 0) { return subscribeToPresence_; } else { return SubscribeToPresenceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        subscribeToPresence_ = value;
      }
    }
    /// <summary>Gets whether the "subscribe_to_presence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscribeToPresence {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "subscribe_to_presence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscribeToPresence() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxMembers != other.MaxMembers) return false;
      if (MinMembers != other.MinMembers) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if(!invitation_.Equals(other.invitation_)) return false;
      if (Reason != other.Reason) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (Name != other.Name) return false;
      if (ChannelType != other.ChannelType) return false;
      if (Program != other.Program) return false;
      if (SubscribeToPresence != other.SubscribeToPresence) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaxMembers) hash ^= MaxMembers.GetHashCode();
      if (HasMinMembers) hash ^= MinMembers.GetHashCode();
      hash ^= attribute_.GetHashCode();
      hash ^= invitation_.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasChannelType) hash ^= ChannelType.GetHashCode();
      if (HasProgram) hash ^= Program.GetHashCode();
      if (HasSubscribeToPresence) hash ^= SubscribeToPresence.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMaxMembers) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxMembers);
      }
      if (HasMinMembers) {
        output.WriteRawTag(16);
        output.WriteUInt32(MinMembers);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      invitation_.WriteTo(output, _repeated_invitation_codec);
      if (HasReason) {
        output.WriteRawTag(48);
        output.WriteUInt32(Reason);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasName) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (HasChannelType) {
        output.WriteRawTag(82);
        output.WriteString(ChannelType);
      }
      if (HasProgram) {
        output.WriteRawTag(93);
        output.WriteFixed32(Program);
      }
      if (HasSubscribeToPresence) {
        output.WriteRawTag(104);
        output.WriteBool(SubscribeToPresence);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMaxMembers) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMembers);
      }
      if (HasMinMembers) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinMembers);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      size += invitation_.CalculateSize(_repeated_invitation_codec);
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasChannelType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelType);
      }
      if (HasProgram) {
        size += 1 + 4;
      }
      if (HasSubscribeToPresence) {
        size += 1 + 1;
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelState other) {
      if (other == null) {
        return;
      }
      if (other.HasMaxMembers) {
        MaxMembers = other.MaxMembers;
      }
      if (other.HasMinMembers) {
        MinMembers = other.MinMembers;
      }
      attribute_.Add(other.attribute_);
      invitation_.Add(other.invitation_);
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasChannelType) {
        ChannelType = other.ChannelType;
      }
      if (other.HasProgram) {
        Program = other.Program;
      }
      if (other.HasSubscribeToPresence) {
        SubscribeToPresence = other.SubscribeToPresence;
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            MaxMembers = input.ReadUInt32();
            break;
          }
          case 16: {
            MinMembers = input.ReadUInt32();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 34: {
            invitation_.AddEntriesFrom(input, _repeated_invitation_codec);
            break;
          }
          case 48: {
            Reason = input.ReadUInt32();
            break;
          }
          case 56: {
            PrivacyLevel = (global::Bgs.Protocol.Channel.V1.ChannelState.Types.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            ChannelType = input.ReadString();
            break;
          }
          case 93: {
            Program = input.ReadFixed32();
            break;
          }
          case 104: {
            SubscribeToPresence = input.ReadBool();
            break;
          }
        }
      }
    }

    public TValue GetExtension<TValue>(pb::Extension<ChannelState, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<ChannelState, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<ChannelState, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<ChannelState, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<ChannelState, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<ChannelState, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<ChannelState, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PrivacyLevel {
        [pbr::OriginalName("PRIVACY_LEVEL_OPEN")] Open = 1,
        [pbr::OriginalName("PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND")] OpenInvitationAndFriend = 2,
        [pbr::OriginalName("PRIVACY_LEVEL_OPEN_INVITATION")] OpenInvitation = 3,
        [pbr::OriginalName("PRIVACY_LEVEL_CLOSED")] Closed = 4,
      }

    }
    #endregion

  }

  public sealed partial class MemberAccountInfo : pb::IMessage<MemberAccountInfo> {
    private static readonly pb::MessageParser<MemberAccountInfo> _parser = new pb::MessageParser<MemberAccountInfo>(() => new MemberAccountInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberAccountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAccountInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAccountInfo(MemberAccountInfo other) : this() {
      battleTag_ = other.battleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAccountInfo Clone() {
      return new MemberAccountInfo(this);
    }

    /// <summary>Field number for the "battle_tag" field.</summary>
    public const int BattleTagFieldNumber = 3;
    private readonly static string BattleTagDefaultValue = "";

    private string battleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleTag {
      get { return battleTag_ ?? BattleTagDefaultValue; }
      set {
        battleTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "battle_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleTag {
      get { return battleTag_ != null; }
    }
    /// <summary>Clears the value of the "battle_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleTag() {
      battleTag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberAccountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberAccountInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleTag != other.BattleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBattleTag) hash ^= BattleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBattleTag) {
        output.WriteRawTag(26);
        output.WriteString(BattleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBattleTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberAccountInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasBattleTag) {
        BattleTag = other.BattleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            BattleTag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberState : pb::IMessage<MemberState> {
    private static readonly pb::MessageParser<MemberState> _parser = new pb::MessageParser<MemberState>(() => new MemberState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberState(MemberState other) : this() {
      _hasBits0 = other._hasBits0;
      attribute_ = other.attribute_.Clone();
      role_ = other.role_.Clone();
      privileges_ = other.privileges_;
      info_ = other.HasInfo ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberState Clone() {
      return new MemberState(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_role_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> role_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Role {
      get { return role_; }
    }

    /// <summary>Field number for the "privileges" field.</summary>
    public const int PrivilegesFieldNumber = 3;
    private readonly static ulong PrivilegesDefaultValue = 0UL;

    private ulong privileges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Privileges {
      get { if ((_hasBits0 & 1) != 0) { return privileges_; } else { return PrivilegesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        privileges_ = value;
      }
    }
    /// <summary>Gets whether the "privileges" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivileges {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "privileges" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivileges() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private global::Bgs.Protocol.Channel.V1.MemberAccountInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Channel.V1.MemberAccountInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }
    /// <summary>Gets whether the info field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInfo {
      get { return info_ != null; }
    }
    /// <summary>Clears the value of the info field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInfo() {
      info_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if(!role_.Equals(other.role_)) return false;
      if (Privileges != other.Privileges) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      hash ^= role_.GetHashCode();
      if (HasPrivileges) hash ^= Privileges.GetHashCode();
      if (HasInfo) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      role_.WriteTo(output, _repeated_role_codec);
      if (HasPrivileges) {
        output.WriteRawTag(24);
        output.WriteUInt64(Privileges);
      }
      if (HasInfo) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      size += role_.CalculateSize(_repeated_role_codec);
      if (HasPrivileges) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Privileges);
      }
      if (HasInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberState other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      role_.Add(other.role_);
      if (other.HasPrivileges) {
        Privileges = other.Privileges;
      }
      if (other.HasInfo) {
        if (!HasInfo) {
          Info = new global::Bgs.Protocol.Channel.V1.MemberAccountInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 18:
          case 16: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
          case 24: {
            Privileges = input.ReadUInt64();
            break;
          }
          case 34: {
            if (!HasInfo) {
              Info = new global::Bgs.Protocol.Channel.V1.MemberAccountInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      identity_ = other.HasIdentity ? other.identity_.Clone() : null;
      state_ = other.HasState ? other.state_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::Bgs.Protocol.Identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }
    /// <summary>Gets whether the identity field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentity {
      get { return identity_ != null; }
    }
    /// <summary>Clears the value of the identity field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentity() {
      identity_ = null;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Bgs.Protocol.Channel.V1.MemberState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Channel.V1.MemberState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }
    /// <summary>Gets whether the state field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return state_ != null; }
    }
    /// <summary>Clears the value of the state field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (!object.Equals(State, other.State)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIdentity) hash ^= Identity.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIdentity) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (HasState) {
        output.WriteRawTag(18);
        output.WriteMessage(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.HasIdentity) {
        if (!HasIdentity) {
          Identity = new global::Bgs.Protocol.Identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.HasState) {
        if (!HasState) {
          State = new global::Bgs.Protocol.Channel.V1.MemberState();
        }
        State.MergeFrom(other.State);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasIdentity) {
              Identity = new global::Bgs.Protocol.Identity();
            }
            input.ReadMessage(Identity);
            break;
          }
          case 18: {
            if (!HasState) {
              State = new global::Bgs.Protocol.Channel.V1.MemberState();
            }
            input.ReadMessage(State);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriberId : pb::IMessage<SubscriberId> {
    private static readonly pb::MessageParser<SubscriberId> _parser = new pb::MessageParser<SubscriberId>(() => new SubscriberId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriberId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Channel.V1.ChannelTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriberId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriberId(SubscriberId other) : this() {
      account_ = other.HasAccount ? other.account_.Clone() : null;
      gameAccount_ = other.HasGameAccount ? other.gameAccount_.Clone() : null;
      process_ = other.HasProcess ? other.process_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriberId Clone() {
      return new SubscriberId(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.AccountId account_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.AccountId Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }
    /// <summary>Gets whether the account field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccount {
      get { return account_ != null; }
    }
    /// <summary>Clears the value of the account field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccount() {
      account_ = null;
    }

    /// <summary>Field number for the "game_account" field.</summary>
    public const int GameAccountFieldNumber = 2;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle gameAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle GameAccount {
      get { return gameAccount_; }
      set {
        gameAccount_ = value;
      }
    }
    /// <summary>Gets whether the game_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameAccount {
      get { return gameAccount_ != null; }
    }
    /// <summary>Clears the value of the game_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameAccount() {
      gameAccount_ = null;
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 3;
    private global::Bgs.Protocol.ProcessId process_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ProcessId Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }
    /// <summary>Gets whether the process field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProcess {
      get { return process_ != null; }
    }
    /// <summary>Clears the value of the process field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProcess() {
      process_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriberId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriberId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(GameAccount, other.GameAccount)) return false;
      if (!object.Equals(Process, other.Process)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccount) hash ^= Account.GetHashCode();
      if (HasGameAccount) hash ^= GameAccount.GetHashCode();
      if (HasProcess) hash ^= Process.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccount) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (HasGameAccount) {
        output.WriteRawTag(18);
        output.WriteMessage(GameAccount);
      }
      if (HasProcess) {
        output.WriteRawTag(26);
        output.WriteMessage(Process);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (HasGameAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameAccount);
      }
      if (HasProcess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Process);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriberId other) {
      if (other == null) {
        return;
      }
      if (other.HasAccount) {
        if (!HasAccount) {
          Account = new global::Bgs.Protocol.Account.V1.AccountId();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.HasGameAccount) {
        if (!HasGameAccount) {
          GameAccount = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        GameAccount.MergeFrom(other.GameAccount);
      }
      if (other.HasProcess) {
        if (!HasProcess) {
          Process = new global::Bgs.Protocol.ProcessId();
        }
        Process.MergeFrom(other.Process);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasAccount) {
              Account = new global::Bgs.Protocol.Account.V1.AccountId();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            if (!HasGameAccount) {
              GameAccount = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(GameAccount);
            break;
          }
          case 26: {
            if (!HasProcess) {
              Process = new global::Bgs.Protocol.ProcessId();
            }
            input.ReadMessage(Process);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
