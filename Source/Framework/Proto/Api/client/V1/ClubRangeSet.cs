// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/club_range_set.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/club_range_set.proto</summary>
  public static partial class ClubRangeSetReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/club_range_set.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubRangeSetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfcmFuZ2Vf",
            "c2V0LnByb3RvEhtiZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQaL2Jncy9s",
            "b3cvcGIvY2xpZW50L2dsb2JhbF9leHRlbnNpb25zL3JhbmdlLnByb3RvIoQF",
            "ChBDbHViVHlwZVJhbmdlU2V0EjIKCm5hbWVfcmFuZ2UYAiABKAsyHi5iZ3Mu",
            "cHJvdG9jb2wuVW5zaWduZWRJbnRSYW5nZRI5ChFkZXNjcmlwdGlvbl9yYW5n",
            "ZRgDIAEoCzIeLmJncy5wcm90b2NvbC5VbnNpZ25lZEludFJhbmdlEjcKD2Jy",
            "b2FkY2FzdF9yYW5nZRgEIAEoCzIeLmJncy5wcm90b2NvbC5VbnNpZ25lZElu",
            "dFJhbmdlEjgKEHNob3J0X25hbWVfcmFuZ2UYByABKAsyHi5iZ3MucHJvdG9j",
            "b2wuVW5zaWduZWRJbnRSYW5nZRI/CgZtZW1iZXIYGSABKAsyLy5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5jbGllbnQuQ2x1Yk1lbWJlclJhbmdlU2V0Ej8KBnN0",
            "cmVhbRgaIAEoCzIvLmJncy5wcm90b2NvbC5jbHViLnYxLmNsaWVudC5DbHVi",
            "U3RyZWFtUmFuZ2VTZXQSRwoKaW52aXRhdGlvbhgbIAEoCzIzLmJncy5wcm90",
            "b2NvbC5jbHViLnYxLmNsaWVudC5DbHViSW52aXRhdGlvblJhbmdlU2V0EkcK",
            "CnN1Z2dlc3Rpb24YHCABKAsyMy5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGll",
            "bnQuQ2x1YlN1Z2dlc3Rpb25SYW5nZVNldBI/CgZ0aWNrZXQYHSABKAsyLy5i",
            "Z3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQuQ2x1YlRpY2tldFJhbmdlU2V0",
            "EjkKA2JhbhgeIAEoCzIsLmJncy5wcm90b2NvbC5jbHViLnYxLmNsaWVudC5D",
            "bHViQmFuUmFuZ2VTZXQi5AEKEkNsdWJNZW1iZXJSYW5nZVNldBItCgVjb3Vu",
            "dBgBIAEoCzIeLmJncy5wcm90b2NvbC5VbnNpZ25lZEludFJhbmdlEi0KBXZv",
            "aWNlGAMgASgLMh4uYmdzLnByb3RvY29sLlVuc2lnbmVkSW50UmFuZ2USPAoU",
            "c3RyZWFtX3N1YnNjcmlwdGlvbnMYBSABKAsyHi5iZ3MucHJvdG9jb2wuVW5z",
            "aWduZWRJbnRSYW5nZRIyCgpub3RlX3JhbmdlGAcgASgLMh4uYmdzLnByb3Rv",
            "Y29sLlVuc2lnbmVkSW50UmFuZ2Ui5QEKEkNsdWJTdHJlYW1SYW5nZVNldBIt",
            "CgVjb3VudBgBIAEoCzIeLmJncy5wcm90b2NvbC5VbnNpZ25lZEludFJhbmdl",
            "EjIKCm5hbWVfcmFuZ2UYAyABKAsyHi5iZ3MucHJvdG9jb2wuVW5zaWduZWRJ",
            "bnRSYW5nZRI1Cg1zdWJqZWN0X3JhbmdlGAQgASgLMh4uYmdzLnByb3RvY29s",
            "LlVuc2lnbmVkSW50UmFuZ2USNQoNbWVzc2FnZV9yYW5nZRgFIAEoCzIeLmJn",
            "cy5wcm90b2NvbC5VbnNpZ25lZEludFJhbmdlIkcKFkNsdWJJbnZpdGF0aW9u",
            "UmFuZ2VTZXQSLQoFY291bnQYASABKAsyHi5iZ3MucHJvdG9jb2wuVW5zaWdu",
            "ZWRJbnRSYW5nZSJHChZDbHViU3VnZ2VzdGlvblJhbmdlU2V0Ei0KBWNvdW50",
            "GAEgASgLMh4uYmdzLnByb3RvY29sLlVuc2lnbmVkSW50UmFuZ2UiQwoSQ2x1",
            "YlRpY2tldFJhbmdlU2V0Ei0KBWNvdW50GAEgASgLMh4uYmdzLnByb3RvY29s",
            "LlVuc2lnbmVkSW50UmFuZ2UidgoPQ2x1YkJhblJhbmdlU2V0Ei0KBWNvdW50",
            "GAEgASgLMh4uYmdzLnByb3RvY29sLlVuc2lnbmVkSW50UmFuZ2USNAoMcmVh",
            "c29uX3JhbmdlGAMgASgLMh4uYmdzLnByb3RvY29sLlVuc2lnbmVkSW50UmFu",
            "Z2U="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.RangeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubTypeRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubTypeRangeSet.Parser, new[]{ "NameRange", "DescriptionRange", "BroadcastRange", "ShortNameRange", "Member", "Stream", "Invitation", "Suggestion", "Ticket", "Ban" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet.Parser, new[]{ "Count", "Voice", "StreamSubscriptions", "NoteRange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet.Parser, new[]{ "Count", "NameRange", "SubjectRange", "MessageRange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet.Parser, new[]{ "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet), global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet.Parser, new[]{ "Count", "ReasonRange" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClubTypeRangeSet : pb::IMessage<ClubTypeRangeSet> {
    private static readonly pb::MessageParser<ClubTypeRangeSet> _parser = new pb::MessageParser<ClubTypeRangeSet>(() => new ClubTypeRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubTypeRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTypeRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTypeRangeSet(ClubTypeRangeSet other) : this() {
      nameRange_ = other.HasNameRange ? other.nameRange_.Clone() : null;
      descriptionRange_ = other.HasDescriptionRange ? other.descriptionRange_.Clone() : null;
      broadcastRange_ = other.HasBroadcastRange ? other.broadcastRange_.Clone() : null;
      shortNameRange_ = other.HasShortNameRange ? other.shortNameRange_.Clone() : null;
      member_ = other.HasMember ? other.member_.Clone() : null;
      stream_ = other.HasStream ? other.stream_.Clone() : null;
      invitation_ = other.HasInvitation ? other.invitation_.Clone() : null;
      suggestion_ = other.HasSuggestion ? other.suggestion_.Clone() : null;
      ticket_ = other.HasTicket ? other.ticket_.Clone() : null;
      ban_ = other.HasBan ? other.ban_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTypeRangeSet Clone() {
      return new ClubTypeRangeSet(this);
    }

    /// <summary>Field number for the "name_range" field.</summary>
    public const int NameRangeFieldNumber = 2;
    private global::Bgs.Protocol.UnsignedIntRange nameRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange NameRange {
      get { return nameRange_; }
      set {
        nameRange_ = value;
      }
    }
    /// <summary>Gets whether the name_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNameRange {
      get { return nameRange_ != null; }
    }
    /// <summary>Clears the value of the name_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNameRange() {
      nameRange_ = null;
    }

    /// <summary>Field number for the "description_range" field.</summary>
    public const int DescriptionRangeFieldNumber = 3;
    private global::Bgs.Protocol.UnsignedIntRange descriptionRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange DescriptionRange {
      get { return descriptionRange_; }
      set {
        descriptionRange_ = value;
      }
    }
    /// <summary>Gets whether the description_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescriptionRange {
      get { return descriptionRange_ != null; }
    }
    /// <summary>Clears the value of the description_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescriptionRange() {
      descriptionRange_ = null;
    }

    /// <summary>Field number for the "broadcast_range" field.</summary>
    public const int BroadcastRangeFieldNumber = 4;
    private global::Bgs.Protocol.UnsignedIntRange broadcastRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange BroadcastRange {
      get { return broadcastRange_; }
      set {
        broadcastRange_ = value;
      }
    }
    /// <summary>Gets whether the broadcast_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcastRange {
      get { return broadcastRange_ != null; }
    }
    /// <summary>Clears the value of the broadcast_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcastRange() {
      broadcastRange_ = null;
    }

    /// <summary>Field number for the "short_name_range" field.</summary>
    public const int ShortNameRangeFieldNumber = 7;
    private global::Bgs.Protocol.UnsignedIntRange shortNameRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange ShortNameRange {
      get { return shortNameRange_; }
      set {
        shortNameRange_ = value;
      }
    }
    /// <summary>Gets whether the short_name_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortNameRange {
      get { return shortNameRange_ != null; }
    }
    /// <summary>Clears the value of the short_name_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortNameRange() {
      shortNameRange_ = null;
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 25;
    private global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet member_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }
    /// <summary>Gets whether the member field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMember {
      get { return member_ != null; }
    }
    /// <summary>Clears the value of the member field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMember() {
      member_ = null;
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 26;
    private global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }
    /// <summary>Gets whether the stream field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStream {
      get { return stream_ != null; }
    }
    /// <summary>Clears the value of the stream field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStream() {
      stream_ = null;
    }

    /// <summary>Field number for the "invitation" field.</summary>
    public const int InvitationFieldNumber = 27;
    private global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet invitation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet Invitation {
      get { return invitation_; }
      set {
        invitation_ = value;
      }
    }
    /// <summary>Gets whether the invitation field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvitation {
      get { return invitation_ != null; }
    }
    /// <summary>Clears the value of the invitation field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvitation() {
      invitation_ = null;
    }

    /// <summary>Field number for the "suggestion" field.</summary>
    public const int SuggestionFieldNumber = 28;
    private global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet suggestion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet Suggestion {
      get { return suggestion_; }
      set {
        suggestion_ = value;
      }
    }
    /// <summary>Gets whether the suggestion field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuggestion {
      get { return suggestion_ != null; }
    }
    /// <summary>Clears the value of the suggestion field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuggestion() {
      suggestion_ = null;
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 29;
    private global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }
    /// <summary>Gets whether the ticket field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTicket {
      get { return ticket_ != null; }
    }
    /// <summary>Clears the value of the ticket field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTicket() {
      ticket_ = null;
    }

    /// <summary>Field number for the "ban" field.</summary>
    public const int BanFieldNumber = 30;
    private global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet ban_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet Ban {
      get { return ban_; }
      set {
        ban_ = value;
      }
    }
    /// <summary>Gets whether the ban field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBan {
      get { return ban_ != null; }
    }
    /// <summary>Clears the value of the ban field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBan() {
      ban_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubTypeRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubTypeRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NameRange, other.NameRange)) return false;
      if (!object.Equals(DescriptionRange, other.DescriptionRange)) return false;
      if (!object.Equals(BroadcastRange, other.BroadcastRange)) return false;
      if (!object.Equals(ShortNameRange, other.ShortNameRange)) return false;
      if (!object.Equals(Member, other.Member)) return false;
      if (!object.Equals(Stream, other.Stream)) return false;
      if (!object.Equals(Invitation, other.Invitation)) return false;
      if (!object.Equals(Suggestion, other.Suggestion)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(Ban, other.Ban)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNameRange) hash ^= NameRange.GetHashCode();
      if (HasDescriptionRange) hash ^= DescriptionRange.GetHashCode();
      if (HasBroadcastRange) hash ^= BroadcastRange.GetHashCode();
      if (HasShortNameRange) hash ^= ShortNameRange.GetHashCode();
      if (HasMember) hash ^= Member.GetHashCode();
      if (HasStream) hash ^= Stream.GetHashCode();
      if (HasInvitation) hash ^= Invitation.GetHashCode();
      if (HasSuggestion) hash ^= Suggestion.GetHashCode();
      if (HasTicket) hash ^= Ticket.GetHashCode();
      if (HasBan) hash ^= Ban.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNameRange) {
        output.WriteRawTag(18);
        output.WriteMessage(NameRange);
      }
      if (HasDescriptionRange) {
        output.WriteRawTag(26);
        output.WriteMessage(DescriptionRange);
      }
      if (HasBroadcastRange) {
        output.WriteRawTag(34);
        output.WriteMessage(BroadcastRange);
      }
      if (HasShortNameRange) {
        output.WriteRawTag(58);
        output.WriteMessage(ShortNameRange);
      }
      if (HasMember) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Member);
      }
      if (HasStream) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Stream);
      }
      if (HasInvitation) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Invitation);
      }
      if (HasSuggestion) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Suggestion);
      }
      if (HasTicket) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Ticket);
      }
      if (HasBan) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Ban);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNameRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameRange);
      }
      if (HasDescriptionRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DescriptionRange);
      }
      if (HasBroadcastRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BroadcastRange);
      }
      if (HasShortNameRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShortNameRange);
      }
      if (HasMember) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (HasStream) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      if (HasInvitation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Invitation);
      }
      if (HasSuggestion) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Suggestion);
      }
      if (HasTicket) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (HasBan) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ban);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubTypeRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasNameRange) {
        if (!HasNameRange) {
          NameRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        NameRange.MergeFrom(other.NameRange);
      }
      if (other.HasDescriptionRange) {
        if (!HasDescriptionRange) {
          DescriptionRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        DescriptionRange.MergeFrom(other.DescriptionRange);
      }
      if (other.HasBroadcastRange) {
        if (!HasBroadcastRange) {
          BroadcastRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        BroadcastRange.MergeFrom(other.BroadcastRange);
      }
      if (other.HasShortNameRange) {
        if (!HasShortNameRange) {
          ShortNameRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        ShortNameRange.MergeFrom(other.ShortNameRange);
      }
      if (other.HasMember) {
        if (!HasMember) {
          Member = new global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet();
        }
        Member.MergeFrom(other.Member);
      }
      if (other.HasStream) {
        if (!HasStream) {
          Stream = new global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet();
        }
        Stream.MergeFrom(other.Stream);
      }
      if (other.HasInvitation) {
        if (!HasInvitation) {
          Invitation = new global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet();
        }
        Invitation.MergeFrom(other.Invitation);
      }
      if (other.HasSuggestion) {
        if (!HasSuggestion) {
          Suggestion = new global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet();
        }
        Suggestion.MergeFrom(other.Suggestion);
      }
      if (other.HasTicket) {
        if (!HasTicket) {
          Ticket = new global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.HasBan) {
        if (!HasBan) {
          Ban = new global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet();
        }
        Ban.MergeFrom(other.Ban);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (!HasNameRange) {
              NameRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(NameRange);
            break;
          }
          case 26: {
            if (!HasDescriptionRange) {
              DescriptionRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(DescriptionRange);
            break;
          }
          case 34: {
            if (!HasBroadcastRange) {
              BroadcastRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(BroadcastRange);
            break;
          }
          case 58: {
            if (!HasShortNameRange) {
              ShortNameRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(ShortNameRange);
            break;
          }
          case 202: {
            if (!HasMember) {
              Member = new global::Bgs.Protocol.Club.V1.Client.ClubMemberRangeSet();
            }
            input.ReadMessage(Member);
            break;
          }
          case 210: {
            if (!HasStream) {
              Stream = new global::Bgs.Protocol.Club.V1.Client.ClubStreamRangeSet();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 218: {
            if (!HasInvitation) {
              Invitation = new global::Bgs.Protocol.Club.V1.Client.ClubInvitationRangeSet();
            }
            input.ReadMessage(Invitation);
            break;
          }
          case 226: {
            if (!HasSuggestion) {
              Suggestion = new global::Bgs.Protocol.Club.V1.Client.ClubSuggestionRangeSet();
            }
            input.ReadMessage(Suggestion);
            break;
          }
          case 234: {
            if (!HasTicket) {
              Ticket = new global::Bgs.Protocol.Club.V1.Client.ClubTicketRangeSet();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 242: {
            if (!HasBan) {
              Ban = new global::Bgs.Protocol.Club.V1.Client.ClubBanRangeSet();
            }
            input.ReadMessage(Ban);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubMemberRangeSet : pb::IMessage<ClubMemberRangeSet> {
    private static readonly pb::MessageParser<ClubMemberRangeSet> _parser = new pb::MessageParser<ClubMemberRangeSet>(() => new ClubMemberRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubMemberRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubMemberRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubMemberRangeSet(ClubMemberRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      voice_ = other.HasVoice ? other.voice_.Clone() : null;
      streamSubscriptions_ = other.HasStreamSubscriptions ? other.streamSubscriptions_.Clone() : null;
      noteRange_ = other.HasNoteRange ? other.noteRange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubMemberRangeSet Clone() {
      return new ClubMemberRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    /// <summary>Field number for the "voice" field.</summary>
    public const int VoiceFieldNumber = 3;
    private global::Bgs.Protocol.UnsignedIntRange voice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Voice {
      get { return voice_; }
      set {
        voice_ = value;
      }
    }
    /// <summary>Gets whether the voice field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVoice {
      get { return voice_ != null; }
    }
    /// <summary>Clears the value of the voice field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVoice() {
      voice_ = null;
    }

    /// <summary>Field number for the "stream_subscriptions" field.</summary>
    public const int StreamSubscriptionsFieldNumber = 5;
    private global::Bgs.Protocol.UnsignedIntRange streamSubscriptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange StreamSubscriptions {
      get { return streamSubscriptions_; }
      set {
        streamSubscriptions_ = value;
      }
    }
    /// <summary>Gets whether the stream_subscriptions field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamSubscriptions {
      get { return streamSubscriptions_ != null; }
    }
    /// <summary>Clears the value of the stream_subscriptions field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamSubscriptions() {
      streamSubscriptions_ = null;
    }

    /// <summary>Field number for the "note_range" field.</summary>
    public const int NoteRangeFieldNumber = 7;
    private global::Bgs.Protocol.UnsignedIntRange noteRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange NoteRange {
      get { return noteRange_; }
      set {
        noteRange_ = value;
      }
    }
    /// <summary>Gets whether the note_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNoteRange {
      get { return noteRange_ != null; }
    }
    /// <summary>Clears the value of the note_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNoteRange() {
      noteRange_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubMemberRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubMemberRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      if (!object.Equals(Voice, other.Voice)) return false;
      if (!object.Equals(StreamSubscriptions, other.StreamSubscriptions)) return false;
      if (!object.Equals(NoteRange, other.NoteRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasVoice) hash ^= Voice.GetHashCode();
      if (HasStreamSubscriptions) hash ^= StreamSubscriptions.GetHashCode();
      if (HasNoteRange) hash ^= NoteRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (HasVoice) {
        output.WriteRawTag(26);
        output.WriteMessage(Voice);
      }
      if (HasStreamSubscriptions) {
        output.WriteRawTag(42);
        output.WriteMessage(StreamSubscriptions);
      }
      if (HasNoteRange) {
        output.WriteRawTag(58);
        output.WriteMessage(NoteRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (HasVoice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Voice);
      }
      if (HasStreamSubscriptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamSubscriptions);
      }
      if (HasNoteRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoteRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubMemberRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      if (other.HasVoice) {
        if (!HasVoice) {
          Voice = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Voice.MergeFrom(other.Voice);
      }
      if (other.HasStreamSubscriptions) {
        if (!HasStreamSubscriptions) {
          StreamSubscriptions = new global::Bgs.Protocol.UnsignedIntRange();
        }
        StreamSubscriptions.MergeFrom(other.StreamSubscriptions);
      }
      if (other.HasNoteRange) {
        if (!HasNoteRange) {
          NoteRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        NoteRange.MergeFrom(other.NoteRange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
          case 26: {
            if (!HasVoice) {
              Voice = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Voice);
            break;
          }
          case 42: {
            if (!HasStreamSubscriptions) {
              StreamSubscriptions = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(StreamSubscriptions);
            break;
          }
          case 58: {
            if (!HasNoteRange) {
              NoteRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(NoteRange);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStreamRangeSet : pb::IMessage<ClubStreamRangeSet> {
    private static readonly pb::MessageParser<ClubStreamRangeSet> _parser = new pb::MessageParser<ClubStreamRangeSet>(() => new ClubStreamRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStreamRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamRangeSet(ClubStreamRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      nameRange_ = other.HasNameRange ? other.nameRange_.Clone() : null;
      subjectRange_ = other.HasSubjectRange ? other.subjectRange_.Clone() : null;
      messageRange_ = other.HasMessageRange ? other.messageRange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStreamRangeSet Clone() {
      return new ClubStreamRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    /// <summary>Field number for the "name_range" field.</summary>
    public const int NameRangeFieldNumber = 3;
    private global::Bgs.Protocol.UnsignedIntRange nameRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange NameRange {
      get { return nameRange_; }
      set {
        nameRange_ = value;
      }
    }
    /// <summary>Gets whether the name_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNameRange {
      get { return nameRange_ != null; }
    }
    /// <summary>Clears the value of the name_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNameRange() {
      nameRange_ = null;
    }

    /// <summary>Field number for the "subject_range" field.</summary>
    public const int SubjectRangeFieldNumber = 4;
    private global::Bgs.Protocol.UnsignedIntRange subjectRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange SubjectRange {
      get { return subjectRange_; }
      set {
        subjectRange_ = value;
      }
    }
    /// <summary>Gets whether the subject_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubjectRange {
      get { return subjectRange_ != null; }
    }
    /// <summary>Clears the value of the subject_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubjectRange() {
      subjectRange_ = null;
    }

    /// <summary>Field number for the "message_range" field.</summary>
    public const int MessageRangeFieldNumber = 5;
    private global::Bgs.Protocol.UnsignedIntRange messageRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange MessageRange {
      get { return messageRange_; }
      set {
        messageRange_ = value;
      }
    }
    /// <summary>Gets whether the message_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageRange {
      get { return messageRange_ != null; }
    }
    /// <summary>Clears the value of the message_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageRange() {
      messageRange_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStreamRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStreamRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      if (!object.Equals(NameRange, other.NameRange)) return false;
      if (!object.Equals(SubjectRange, other.SubjectRange)) return false;
      if (!object.Equals(MessageRange, other.MessageRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasNameRange) hash ^= NameRange.GetHashCode();
      if (HasSubjectRange) hash ^= SubjectRange.GetHashCode();
      if (HasMessageRange) hash ^= MessageRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (HasNameRange) {
        output.WriteRawTag(26);
        output.WriteMessage(NameRange);
      }
      if (HasSubjectRange) {
        output.WriteRawTag(34);
        output.WriteMessage(SubjectRange);
      }
      if (HasMessageRange) {
        output.WriteRawTag(42);
        output.WriteMessage(MessageRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (HasNameRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameRange);
      }
      if (HasSubjectRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubjectRange);
      }
      if (HasMessageRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStreamRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      if (other.HasNameRange) {
        if (!HasNameRange) {
          NameRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        NameRange.MergeFrom(other.NameRange);
      }
      if (other.HasSubjectRange) {
        if (!HasSubjectRange) {
          SubjectRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        SubjectRange.MergeFrom(other.SubjectRange);
      }
      if (other.HasMessageRange) {
        if (!HasMessageRange) {
          MessageRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        MessageRange.MergeFrom(other.MessageRange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
          case 26: {
            if (!HasNameRange) {
              NameRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(NameRange);
            break;
          }
          case 34: {
            if (!HasSubjectRange) {
              SubjectRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(SubjectRange);
            break;
          }
          case 42: {
            if (!HasMessageRange) {
              MessageRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(MessageRange);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubInvitationRangeSet : pb::IMessage<ClubInvitationRangeSet> {
    private static readonly pb::MessageParser<ClubInvitationRangeSet> _parser = new pb::MessageParser<ClubInvitationRangeSet>(() => new ClubInvitationRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubInvitationRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitationRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitationRangeSet(ClubInvitationRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubInvitationRangeSet Clone() {
      return new ClubInvitationRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubInvitationRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubInvitationRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubInvitationRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSuggestionRangeSet : pb::IMessage<ClubSuggestionRangeSet> {
    private static readonly pb::MessageParser<ClubSuggestionRangeSet> _parser = new pb::MessageParser<ClubSuggestionRangeSet>(() => new ClubSuggestionRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSuggestionRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestionRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestionRangeSet(ClubSuggestionRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSuggestionRangeSet Clone() {
      return new ClubSuggestionRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSuggestionRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSuggestionRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSuggestionRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubTicketRangeSet : pb::IMessage<ClubTicketRangeSet> {
    private static readonly pb::MessageParser<ClubTicketRangeSet> _parser = new pb::MessageParser<ClubTicketRangeSet>(() => new ClubTicketRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubTicketRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicketRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicketRangeSet(ClubTicketRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubTicketRangeSet Clone() {
      return new ClubTicketRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubTicketRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubTicketRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubTicketRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubBanRangeSet : pb::IMessage<ClubBanRangeSet> {
    private static readonly pb::MessageParser<ClubBanRangeSet> _parser = new pb::MessageParser<ClubBanRangeSet>(() => new ClubBanRangeSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubBanRangeSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubRangeSetReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubBanRangeSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubBanRangeSet(ClubBanRangeSet other) : this() {
      count_ = other.HasCount ? other.count_.Clone() : null;
      reasonRange_ = other.HasReasonRange ? other.reasonRange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubBanRangeSet Clone() {
      return new ClubBanRangeSet(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private global::Bgs.Protocol.UnsignedIntRange count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }
    /// <summary>Gets whether the count field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return count_ != null; }
    }
    /// <summary>Clears the value of the count field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      count_ = null;
    }

    /// <summary>Field number for the "reason_range" field.</summary>
    public const int ReasonRangeFieldNumber = 3;
    private global::Bgs.Protocol.UnsignedIntRange reasonRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.UnsignedIntRange ReasonRange {
      get { return reasonRange_; }
      set {
        reasonRange_ = value;
      }
    }
    /// <summary>Gets whether the reason_range field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReasonRange {
      get { return reasonRange_ != null; }
    }
    /// <summary>Clears the value of the reason_range field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReasonRange() {
      reasonRange_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubBanRangeSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubBanRangeSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Count, other.Count)) return false;
      if (!object.Equals(ReasonRange, other.ReasonRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasReasonRange) hash ^= ReasonRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCount) {
        output.WriteRawTag(10);
        output.WriteMessage(Count);
      }
      if (HasReasonRange) {
        output.WriteRawTag(26);
        output.WriteMessage(ReasonRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      if (HasReasonRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReasonRange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubBanRangeSet other) {
      if (other == null) {
        return;
      }
      if (other.HasCount) {
        if (!HasCount) {
          Count = new global::Bgs.Protocol.UnsignedIntRange();
        }
        Count.MergeFrom(other.Count);
      }
      if (other.HasReasonRange) {
        if (!HasReasonRange) {
          ReasonRange = new global::Bgs.Protocol.UnsignedIntRange();
        }
        ReasonRange.MergeFrom(other.ReasonRange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasCount) {
              Count = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(Count);
            break;
          }
          case 26: {
            if (!HasReasonRange) {
              ReasonRange = new global::Bgs.Protocol.UnsignedIntRange();
            }
            input.ReadMessage(ReasonRange);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
