// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/club_core.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/club_core.proto</summary>
  public static partial class ClubCoreReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/club_core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubCoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9iZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfY29yZS5w",
            "cm90bxIbYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50Gi9iZ3MvbG93L3Bi",
            "L2NsaWVudC9hcGkvY2xpZW50L3YxL2NsdWJfZW51bS5wcm90bxovYmdzL2xv",
            "dy9wYi9jbGllbnQvYXBpL2NsaWVudC92MS9jbHViX3JvbGUucHJvdG8aMWJn",
            "cy9sb3cvcGIvY2xpZW50L2FwaS9jbGllbnQvdjEvY2x1Yl9tZW1iZXIucHJv",
            "dG8aMWJncy9sb3cvcGIvY2xpZW50L2FwaS9jbGllbnQvdjEvY2x1Yl9zdHJl",
            "YW0ucHJvdG8aL2Jncy9sb3cvcGIvY2xpZW50L2FwaS9jb21tb24vdjEvY2x1",
            "Yl9jb3JlLnByb3RvGi9iZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3Yx",
            "L2NsdWJfZW51bS5wcm90bxouYmdzL2xvdy9wYi9jbGllbnQvYXBpL2NvbW1v",
            "bi92MS9jbHViX3RhZy5wcm90bxovYmdzL2xvdy9wYi9jbGllbnQvYXBpL2Nv",
            "bW1vbi92MS9jbHViX3R5cGUucHJvdG8aNWJncy9sb3cvcGIvY2xpZW50L2Fw",
            "aS9jb21tb24vdjIvYXR0cmlidXRlX3R5cGVzLnByb3RvGihiZ3MvbG93L3Bi",
            "L2NsaWVudC9ldmVudF92aWV3X3R5cGVzLnByb3RvIiYKE1NldEJyb2FkY2Fz",
            "dE9wdGlvbnMSDwoHY29udGVudBgBIAEoCSJ0CglCcm9hZGNhc3QSDwoHY29u",
            "dGVudBgBIAEoCRI/CgdjcmVhdG9yGAIgASgLMi4uYmdzLnByb3RvY29sLmNs",
            "dWIudjEuY2xpZW50Lk1lbWJlckRlc2NyaXB0aW9uEhUKDWNyZWF0aW9uX3Rp",
            "bWUYAyABKAQilAUKEUNsdWJDcmVhdGVPcHRpb25zEjIKBHR5cGUYASABKAsy",
            "JC5iZ3MucHJvdG9jb2wuY2x1Yi52MS5VbmlxdWVDbHViVHlwZRItCglhdHRy",
            "aWJ1dGUYAiADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5h",
            "bWUYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSLgoGYXZhdGFyGAUgASgL",
            "Mh4uYmdzLnByb3RvY29sLmNsdWIudjEuQXZhdGFySWQSTwoNcHJpdmFjeV9s",
            "ZXZlbBgGIAEoDjIiLmJncy5wcm90b2NvbC5jbHViLnYxLlByaXZhY3lMZXZl",
            "bDoUUFJJVkFDWV9MRVZFTF9DTE9TRUQSEgoKc2hvcnRfbmFtZRgHIAEoCRJZ",
            "ChB2aXNpYmlsaXR5X2xldmVsGAggASgOMiUuYmdzLnByb3RvY29sLmNsdWIu",
            "djEuVmlzaWJpbGl0eUxldmVsOhhWSVNJQklMSVRZX0xFVkVMX1BSSVZBVEUS",
            "QAoGbWVtYmVyGAogASgLMjAuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50",
            "LkNyZWF0ZU1lbWJlck9wdGlvbnMSQAoGc3RyZWFtGAsgASgLMjAuYmdzLnBy",
            "b3RvY29sLmNsdWIudjEuY2xpZW50LkNyZWF0ZVN0cmVhbU9wdGlvbnMSLQoD",
            "dGFnGAwgASgLMiAuYmdzLnByb3RvY29sLmNsdWIudjEuVGFnT3B0aW9ucxI0",
            "ChBzZWFyY2hfYXR0cmlidXRlGA0gAygLMhouYmdzLnByb3RvY29sLnYyLkF0",
            "dHJpYnV0ZRIOCgZsb2NhbGUYDiABKAkSEAoIdGltZXpvbmUYDyABKAkivAYK",
            "BENsdWISCgoCaWQYASABKAQSMgoEdHlwZRgCIAEoCzIkLmJncy5wcm90b2Nv",
            "bC5jbHViLnYxLlVuaXF1ZUNsdWJUeXBlEi0KCWF0dHJpYnV0ZRgDIAMoCzIa",
            "LmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUSDAoEbmFtZRgEIAEoCRITCgtk",
            "ZXNjcmlwdGlvbhgFIAEoCRI5Cglicm9hZGNhc3QYBiABKAsyJi5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5jbGllbnQuQnJvYWRjYXN0Ei4KBmF2YXRhchgHIAEo",
            "CzIeLmJncy5wcm90b2NvbC5jbHViLnYxLkF2YXRhcklkEk8KDXByaXZhY3lf",
            "bGV2ZWwYCCABKA4yIi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5Qcml2YWN5TGV2",
            "ZWw6FFBSSVZBQ1lfTEVWRUxfQ0xPU0VEElkKEHZpc2liaWxpdHlfbGV2ZWwY",
            "CSABKA4yJS5iZ3MucHJvdG9jb2wuY2x1Yi52MS5WaXNpYmlsaXR5TGV2ZWw6",
            "GFZJU0lCSUxJVFlfTEVWRUxfUFJJVkFURRIUCgxtZW1iZXJfY291bnQYCiAB",
            "KA0SFQoNY3JlYXRpb25fdGltZRgLIAEoBBJECg9zdHJlYW1fcG9zaXRpb24Y",
            "DCABKAsyKy5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQuU3RyZWFtUG9z",
            "aXRpb24SOgoIcm9sZV9zZXQYDSABKAsyKC5iZ3MucHJvdG9jb2wuY2x1Yi52",
            "MS5jbGllbnQuQ2x1YlJvbGVTZXQSPgoGbGVhZGVyGA4gAygLMi4uYmdzLnBy",
            "b3RvY29sLmNsdWIudjEuY2xpZW50Lk1lbWJlckRlc2NyaXB0aW9uEhIKCnNo",
            "b3J0X25hbWUYDyABKAkSNAoQc2VhcmNoX2F0dHJpYnV0ZRgQIAMoCzIaLmJn",
            "cy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUSMAoDdGFnGBEgAygLMiMuYmdzLnBy",
            "b3RvY29sLmNsdWIudjEuVGFnSWRlbnRpZmllchIOCgZsb2NhbGUYEiABKAkS",
            "EAoIdGltZXpvbmUYEyABKAkiRQoIQ2x1YlZpZXcSDwoHY2x1Yl9pZBgBIAEo",
            "BBIoCgZtYXJrZXIYAiABKAsyGC5iZ3MucHJvdG9jb2wuVmlld01hcmtlciLu",
            "BAoQQ2x1YlN0YXRlT3B0aW9ucxItCglhdHRyaWJ1dGUYASADKAsyGi5iZ3Mu",
            "cHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5hbWUYAiABKAkSEwoLZGVzY3Jp",
            "cHRpb24YAyABKAkSQwoJYnJvYWRjYXN0GAQgASgLMjAuYmdzLnByb3RvY29s",
            "LmNsdWIudjEuY2xpZW50LlNldEJyb2FkY2FzdE9wdGlvbnMSLgoGYXZhdGFy",
            "GAUgASgLMh4uYmdzLnByb3RvY29sLmNsdWIudjEuQXZhdGFySWQSTwoNcHJp",
            "dmFjeV9sZXZlbBgGIAEoDjIiLmJncy5wcm90b2NvbC5jbHViLnYxLlByaXZh",
            "Y3lMZXZlbDoUUFJJVkFDWV9MRVZFTF9DTE9TRUQSRAoPc3RyZWFtX3Bvc2l0",
            "aW9uGAcgASgLMisuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVh",
            "bVBvc2l0aW9uEhIKCnNob3J0X25hbWUYCCABKAkSWQoQdmlzaWJpbGl0eV9s",
            "ZXZlbBgJIAEoDjIlLmJncy5wcm90b2NvbC5jbHViLnYxLlZpc2liaWxpdHlM",
            "ZXZlbDoYVklTSUJJTElUWV9MRVZFTF9QUklWQVRFEg4KBmxvY2FsZRgKIAEo",
            "CRIQCgh0aW1lem9uZRgLIAEoCRI1Cgt0YWdfb3B0aW9ucxgMIAEoCzIgLmJn",
            "cy5wcm90b2NvbC5jbHViLnYxLlRhZ09wdGlvbnMSNAoQc2VhcmNoX2F0dHJp",
            "YnV0ZRgNIAMoCzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUiiAUKE0Ns",
            "dWJTdGF0ZUFzc2lnbm1lbnQSDwoHY2x1Yl9pZBgBIAEoBBItCglhdHRyaWJ1",
            "dGUYAiADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5hbWUY",
            "AyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSOQoJYnJvYWRjYXN0GAUgASgL",
            "MiYuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LkJyb2FkY2FzdBIuCgZh",
            "dmF0YXIYBiABKAsyHi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5BdmF0YXJJZBJP",
            "Cg1wcml2YWN5X2xldmVsGAcgASgOMiIuYmdzLnByb3RvY29sLmNsdWIudjEu",
            "UHJpdmFjeUxldmVsOhRQUklWQUNZX0xFVkVMX0NMT1NFRBJECg9zdHJlYW1f",
            "cG9zaXRpb24YCCABKAsyKy5iZ3MucHJvdG9jb2wuY2x1Yi52MS5jbGllbnQu",
            "U3RyZWFtUG9zaXRpb24SEgoKc2hvcnRfbmFtZRgJIAEoCRJZChB2aXNpYmls",
            "aXR5X2xldmVsGAogASgOMiUuYmdzLnByb3RvY29sLmNsdWIudjEuVmlzaWJp",
            "bGl0eUxldmVsOhhWSVNJQklMSVRZX0xFVkVMX1BSSVZBVEUSDgoGbG9jYWxl",
            "GAsgASgJEhAKCHRpbWV6b25lGAwgASgJEjAKA3RhZxgNIAMoCzIjLmJncy5w",
            "cm90b2NvbC5jbHViLnYxLlRhZ0lkZW50aWZpZXISNAoQc2VhcmNoX2F0dHJp",
            "YnV0ZRgOIAMoCzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUSEwoLdGFn",
            "X2NsZWFyZWQYDyABKAgiiwEKDlN0cmVhbVNldHRpbmdzEhEKCXN0cmVhbV9p",
            "ZBgBIAEoBBJmCgZmaWx0ZXIYAiABKA4yNS5iZ3MucHJvdG9jb2wuY2x1Yi52",
            "MS5jbGllbnQuU3RyZWFtTm90aWZpY2F0aW9uRmlsdGVyOh9TVFJFQU1fTk9U",
            "SUZJQ0FUSU9OX0ZJTFRFUl9OT05FIsgBCgxDbHViU2V0dGluZ3MSOwoGc3Ry",
            "ZWFtGAEgAygLMisuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVh",
            "bVNldHRpbmdzEiYKHnN0cmVhbV9ub3RpZmljYXRpb25fZmlsdGVyX2FsbBgC",
            "IAEoCBItCglhdHRyaWJ1dGUYAyADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0",
            "cmlidXRlEiQKHHB1c2hfbm90aWZpY2F0aW9uX2ZpbHRlcl9hbGwYBCABKAgi",
            "pAEKE0NsdWJTZXR0aW5nc09wdGlvbnMSPwoGc3RyZWFtGAEgAygLMisuYmdz",
            "LnByb3RvY29sLmNsdWIudjEuY2xpZW50LlN0cmVhbVNldHRpbmdzQgIYARI7",
            "CghzZXR0aW5ncxgCIAEoCzIpLmJncy5wcm90b2NvbC5jbHViLnYxLmNsaWVu",
            "dC5DbHViU2V0dGluZ3MSDwoHdmVyc2lvbhgDIAEoDSKWAQoWQ2x1YlNldHRp",
            "bmdzQXNzaWdubWVudBI/CgZzdHJlYW0YASADKAsyKy5iZ3MucHJvdG9jb2wu",
            "Y2x1Yi52MS5jbGllbnQuU3RyZWFtU2V0dGluZ3NCAhgBEjsKCHNldHRpbmdz",
            "GAIgASgLMikuYmdzLnByb3RvY29sLmNsdWIudjEuY2xpZW50LkNsdWJTZXR0",
            "aW5ncw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Club.V1.Client.ClubEnumReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubRoleReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubMemberReflection.Descriptor, global::Bgs.Protocol.Club.V1.Client.ClubStreamReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubEnumReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubTagReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubTypeReflection.Descriptor, global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.EventViewTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions), global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions.Parser, new[]{ "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.Broadcast), global::Bgs.Protocol.Club.V1.Client.Broadcast.Parser, new[]{ "Content", "Creator", "CreationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubCreateOptions), global::Bgs.Protocol.Club.V1.Client.ClubCreateOptions.Parser, new[]{ "Type", "Attribute", "Name", "Description", "Avatar", "PrivacyLevel", "ShortName", "VisibilityLevel", "Member", "Stream", "Tag", "SearchAttribute", "Locale", "Timezone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.Club), global::Bgs.Protocol.Club.V1.Client.Club.Parser, new[]{ "Id", "Type", "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "VisibilityLevel", "MemberCount", "CreationTime", "StreamPosition", "RoleSet", "Leader", "ShortName", "SearchAttribute", "Tag", "Locale", "Timezone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubView), global::Bgs.Protocol.Club.V1.Client.ClubView.Parser, new[]{ "ClubId", "Marker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubStateOptions), global::Bgs.Protocol.Club.V1.Client.ClubStateOptions.Parser, new[]{ "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "StreamPosition", "ShortName", "VisibilityLevel", "Locale", "Timezone", "TagOptions", "SearchAttribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubStateAssignment), global::Bgs.Protocol.Club.V1.Client.ClubStateAssignment.Parser, new[]{ "ClubId", "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "StreamPosition", "ShortName", "VisibilityLevel", "Locale", "Timezone", "Tag", "SearchAttribute", "TagCleared" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.StreamSettings), global::Bgs.Protocol.Club.V1.Client.StreamSettings.Parser, new[]{ "StreamId", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSettings), global::Bgs.Protocol.Club.V1.Client.ClubSettings.Parser, new[]{ "Stream", "StreamNotificationFilterAll", "Attribute", "PushNotificationFilterAll" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSettingsOptions), global::Bgs.Protocol.Club.V1.Client.ClubSettingsOptions.Parser, new[]{ "Stream", "Settings", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Client.ClubSettingsAssignment), global::Bgs.Protocol.Club.V1.Client.ClubSettingsAssignment.Parser, new[]{ "Stream", "Settings" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SetBroadcastOptions : pb::IMessage<SetBroadcastOptions> {
    private static readonly pb::MessageParser<SetBroadcastOptions> _parser = new pb::MessageParser<SetBroadcastOptions>(() => new SetBroadcastOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBroadcastOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions(SetBroadcastOptions other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions Clone() {
      return new SetBroadcastOptions(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBroadcastOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBroadcastOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBroadcastOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Broadcast : pb::IMessage<Broadcast> {
    private static readonly pb::MessageParser<Broadcast> _parser = new pb::MessageParser<Broadcast>(() => new Broadcast());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Broadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast(Broadcast other) : this() {
      _hasBits0 = other._hasBits0;
      content_ = other.content_;
      creator_ = other.HasCreator ? other.creator_.Clone() : null;
      creationTime_ = other.creationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast Clone() {
      return new Broadcast(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.MemberDescription creator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.MemberDescription Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }
    /// <summary>Gets whether the creator field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreator {
      get { return creator_ != null; }
    }
    /// <summary>Clears the value of the creator field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreator() {
      creator_ = null;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 3;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 1) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Broadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Broadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (!object.Equals(Creator, other.Creator)) return false;
      if (CreationTime != other.CreationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (HasCreator) hash ^= Creator.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (HasCreator) {
        output.WriteRawTag(18);
        output.WriteMessage(Creator);
      }
      if (HasCreationTime) {
        output.WriteRawTag(24);
        output.WriteUInt64(CreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (HasCreator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Broadcast other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasCreator) {
        if (!HasCreator) {
          Creator = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
        }
        Creator.MergeFrom(other.Creator);
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            if (!HasCreator) {
              Creator = new global::Bgs.Protocol.Club.V1.Client.MemberDescription();
            }
            input.ReadMessage(Creator);
            break;
          }
          case 24: {
            CreationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubCreateOptions : pb::IMessage<ClubCreateOptions> {
    private static readonly pb::MessageParser<ClubCreateOptions> _parser = new pb::MessageParser<ClubCreateOptions>(() => new ClubCreateOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubCreateOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions(ClubCreateOptions other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.HasType ? other.type_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      shortName_ = other.shortName_;
      visibilityLevel_ = other.visibilityLevel_;
      member_ = other.HasMember ? other.member_.Clone() : null;
      stream_ = other.HasStream ? other.stream_.Clone() : null;
      tag_ = other.HasTag ? other.tag_.Clone() : null;
      searchAttribute_ = other.searchAttribute_.Clone();
      locale_ = other.locale_;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions Clone() {
      return new ClubCreateOptions(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 1) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 7;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 8;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 2) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 10;
    private global::Bgs.Protocol.Club.V1.Client.CreateMemberOptions member_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.CreateMemberOptions Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }
    /// <summary>Gets whether the member field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMember {
      get { return member_ != null; }
    }
    /// <summary>Clears the value of the member field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMember() {
      member_ = null;
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 11;
    private global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }
    /// <summary>Gets whether the stream field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStream {
      get { return stream_ != null; }
    }
    /// <summary>Clears the value of the stream field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStream() {
      stream_ = null;
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 12;
    private global::Bgs.Protocol.Club.V1.TagOptions tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.TagOptions Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }
    /// <summary>Gets whether the tag field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTag {
      get { return tag_ != null; }
    }
    /// <summary>Clears the value of the tag field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTag() {
      tag_ = null;
    }

    /// <summary>Field number for the "search_attribute" field.</summary>
    public const int SearchAttributeFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_searchAttribute_codec
        = pb::FieldCodec.ForMessage(106, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> searchAttribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> SearchAttribute {
      get { return searchAttribute_; }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 14;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 15;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubCreateOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubCreateOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (ShortName != other.ShortName) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (!object.Equals(Member, other.Member)) return false;
      if (!object.Equals(Stream, other.Stream)) return false;
      if (!object.Equals(Tag, other.Tag)) return false;
      if(!searchAttribute_.Equals(other.searchAttribute_)) return false;
      if (Locale != other.Locale) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasMember) hash ^= Member.GetHashCode();
      if (HasStream) hash ^= Stream.GetHashCode();
      if (HasTag) hash ^= Tag.GetHashCode();
      hash ^= searchAttribute_.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasShortName) {
        output.WriteRawTag(58);
        output.WriteString(ShortName);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(64);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasMember) {
        output.WriteRawTag(82);
        output.WriteMessage(Member);
      }
      if (HasStream) {
        output.WriteRawTag(90);
        output.WriteMessage(Stream);
      }
      if (HasTag) {
        output.WriteRawTag(98);
        output.WriteMessage(Tag);
      }
      searchAttribute_.WriteTo(output, _repeated_searchAttribute_codec);
      if (HasLocale) {
        output.WriteRawTag(114);
        output.WriteString(Locale);
      }
      if (HasTimezone) {
        output.WriteRawTag(122);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasMember) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (HasStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      if (HasTag) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tag);
      }
      size += searchAttribute_.CalculateSize(_repeated_searchAttribute_codec);
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubCreateOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasMember) {
        if (!HasMember) {
          Member = new global::Bgs.Protocol.Club.V1.Client.CreateMemberOptions();
        }
        Member.MergeFrom(other.Member);
      }
      if (other.HasStream) {
        if (!HasStream) {
          Stream = new global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions();
        }
        Stream.MergeFrom(other.Stream);
      }
      if (other.HasTag) {
        if (!HasTag) {
          Tag = new global::Bgs.Protocol.Club.V1.TagOptions();
        }
        Tag.MergeFrom(other.Tag);
      }
      searchAttribute_.Add(other.searchAttribute_);
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 58: {
            ShortName = input.ReadString();
            break;
          }
          case 64: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 82: {
            if (!HasMember) {
              Member = new global::Bgs.Protocol.Club.V1.Client.CreateMemberOptions();
            }
            input.ReadMessage(Member);
            break;
          }
          case 90: {
            if (!HasStream) {
              Stream = new global::Bgs.Protocol.Club.V1.Client.CreateStreamOptions();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 98: {
            if (!HasTag) {
              Tag = new global::Bgs.Protocol.Club.V1.TagOptions();
            }
            input.ReadMessage(Tag);
            break;
          }
          case 106: {
            searchAttribute_.AddEntriesFrom(input, _repeated_searchAttribute_codec);
            break;
          }
          case 114: {
            Locale = input.ReadString();
            break;
          }
          case 122: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Club : pb::IMessage<Club> {
    private static readonly pb::MessageParser<Club> _parser = new pb::MessageParser<Club>(() => new Club());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Club> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club(Club other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.HasType ? other.type_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      visibilityLevel_ = other.visibilityLevel_;
      memberCount_ = other.memberCount_;
      creationTime_ = other.creationTime_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      roleSet_ = other.HasRoleSet ? other.roleSet_.Clone() : null;
      leader_ = other.leader_.Clone();
      shortName_ = other.shortName_;
      searchAttribute_ = other.searchAttribute_.Clone();
      tag_ = other.tag_.Clone();
      locale_ = other.locale_;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club Clone() {
      return new Club(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 6;
    private global::Bgs.Protocol.Club.V1.Client.Broadcast broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.Broadcast Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 8;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 9;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 10;
    private readonly static uint MemberCountDefaultValue = 0;

    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { if ((_hasBits0 & 8) != 0) { return memberCount_; } else { return MemberCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        memberCount_ = value;
      }
    }
    /// <summary>Gets whether the "member_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemberCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "member_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemberCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 11;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 16) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 12;
    private global::Bgs.Protocol.Club.V1.Client.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "role_set" field.</summary>
    public const int RoleSetFieldNumber = 13;
    private global::Bgs.Protocol.Club.V1.Client.ClubRoleSet roleSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubRoleSet RoleSet {
      get { return roleSet_; }
      set {
        roleSet_ = value;
      }
    }
    /// <summary>Gets whether the role_set field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoleSet {
      get { return roleSet_ != null; }
    }
    /// <summary>Clears the value of the role_set field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoleSet() {
      roleSet_ = null;
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.MemberDescription> _repeated_leader_codec
        = pb::FieldCodec.ForMessage(114, global::Bgs.Protocol.Club.V1.Client.MemberDescription.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription> leader_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.MemberDescription> Leader {
      get { return leader_; }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 15;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    /// <summary>Field number for the "search_attribute" field.</summary>
    public const int SearchAttributeFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_searchAttribute_codec
        = pb::FieldCodec.ForMessage(130, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> searchAttribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> SearchAttribute {
      get { return searchAttribute_; }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.TagIdentifier> _repeated_tag_codec
        = pb::FieldCodec.ForMessage(138, global::Bgs.Protocol.Club.V1.TagIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> tag_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 18;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 19;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Club);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Club other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (MemberCount != other.MemberCount) return false;
      if (CreationTime != other.CreationTime) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (!object.Equals(RoleSet, other.RoleSet)) return false;
      if(!leader_.Equals(other.leader_)) return false;
      if (ShortName != other.ShortName) return false;
      if(!searchAttribute_.Equals(other.searchAttribute_)) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if (Locale != other.Locale) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasMemberCount) hash ^= MemberCount.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasRoleSet) hash ^= RoleSet.GetHashCode();
      hash ^= leader_.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      hash ^= searchAttribute_.GetHashCode();
      hash ^= tag_.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(50);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(58);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(72);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        output.WriteRawTag(80);
        output.WriteUInt32(MemberCount);
      }
      if (HasCreationTime) {
        output.WriteRawTag(88);
        output.WriteUInt64(CreationTime);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(98);
        output.WriteMessage(StreamPosition);
      }
      if (HasRoleSet) {
        output.WriteRawTag(106);
        output.WriteMessage(RoleSet);
      }
      leader_.WriteTo(output, _repeated_leader_codec);
      if (HasShortName) {
        output.WriteRawTag(122);
        output.WriteString(ShortName);
      }
      searchAttribute_.WriteTo(output, _repeated_searchAttribute_codec);
      tag_.WriteTo(output, _repeated_tag_codec);
      if (HasLocale) {
        output.WriteRawTag(146, 1);
        output.WriteString(Locale);
      }
      if (HasTimezone) {
        output.WriteRawTag(154, 1);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasRoleSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleSet);
      }
      size += leader_.CalculateSize(_repeated_leader_codec);
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      size += searchAttribute_.CalculateSize(_repeated_searchAttribute_codec);
      size += tag_.CalculateSize(_repeated_tag_codec);
      if (HasLocale) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (HasTimezone) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Club other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.Client.Broadcast();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasMemberCount) {
        MemberCount = other.MemberCount;
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasRoleSet) {
        if (!HasRoleSet) {
          RoleSet = new global::Bgs.Protocol.Club.V1.Client.ClubRoleSet();
        }
        RoleSet.MergeFrom(other.RoleSet);
      }
      leader_.Add(other.leader_);
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      searchAttribute_.Add(other.searchAttribute_);
      tag_.Add(other.tag_);
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.Client.Broadcast();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 58: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 64: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 72: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 80: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 88: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 98: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 106: {
            if (!HasRoleSet) {
              RoleSet = new global::Bgs.Protocol.Club.V1.Client.ClubRoleSet();
            }
            input.ReadMessage(RoleSet);
            break;
          }
          case 114: {
            leader_.AddEntriesFrom(input, _repeated_leader_codec);
            break;
          }
          case 122: {
            ShortName = input.ReadString();
            break;
          }
          case 130: {
            searchAttribute_.AddEntriesFrom(input, _repeated_searchAttribute_codec);
            break;
          }
          case 138: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 146: {
            Locale = input.ReadString();
            break;
          }
          case 154: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubView : pb::IMessage<ClubView> {
    private static readonly pb::MessageParser<ClubView> _parser = new pb::MessageParser<ClubView>(() => new ClubView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView(ClubView other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      marker_ = other.HasMarker ? other.marker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView Clone() {
      return new ClubView(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 2;
    private global::Bgs.Protocol.ViewMarker marker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ViewMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }
    /// <summary>Gets whether the marker field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarker {
      get { return marker_ != null; }
    }
    /// <summary>Clears the value of the marker field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarker() {
      marker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (!object.Equals(Marker, other.Marker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasMarker) hash ^= Marker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasMarker) {
        output.WriteRawTag(18);
        output.WriteMessage(Marker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasMarker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Marker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubView other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasMarker) {
        if (!HasMarker) {
          Marker = new global::Bgs.Protocol.ViewMarker();
        }
        Marker.MergeFrom(other.Marker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasMarker) {
              Marker = new global::Bgs.Protocol.ViewMarker();
            }
            input.ReadMessage(Marker);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStateOptions : pb::IMessage<ClubStateOptions> {
    private static readonly pb::MessageParser<ClubStateOptions> _parser = new pb::MessageParser<ClubStateOptions>(() => new ClubStateOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStateOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions(ClubStateOptions other) : this() {
      _hasBits0 = other._hasBits0;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      shortName_ = other.shortName_;
      visibilityLevel_ = other.visibilityLevel_;
      locale_ = other.locale_;
      timezone_ = other.timezone_;
      tagOptions_ = other.HasTagOptions ? other.tagOptions_.Clone() : null;
      searchAttribute_ = other.searchAttribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions Clone() {
      return new ClubStateOptions(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 1) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.Client.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 8;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 9;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 2) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 10;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 11;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    /// <summary>Field number for the "tag_options" field.</summary>
    public const int TagOptionsFieldNumber = 12;
    private global::Bgs.Protocol.Club.V1.TagOptions tagOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.TagOptions TagOptions {
      get { return tagOptions_; }
      set {
        tagOptions_ = value;
      }
    }
    /// <summary>Gets whether the tag_options field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTagOptions {
      get { return tagOptions_ != null; }
    }
    /// <summary>Clears the value of the tag_options field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTagOptions() {
      tagOptions_ = null;
    }

    /// <summary>Field number for the "search_attribute" field.</summary>
    public const int SearchAttributeFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_searchAttribute_codec
        = pb::FieldCodec.ForMessage(106, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> searchAttribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> SearchAttribute {
      get { return searchAttribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStateOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStateOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (ShortName != other.ShortName) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (Locale != other.Locale) return false;
      if (Timezone != other.Timezone) return false;
      if (!object.Equals(TagOptions, other.TagOptions)) return false;
      if(!searchAttribute_.Equals(other.searchAttribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      if (HasTagOptions) hash ^= TagOptions.GetHashCode();
      hash ^= searchAttribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(34);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(58);
        output.WriteMessage(StreamPosition);
      }
      if (HasShortName) {
        output.WriteRawTag(66);
        output.WriteString(ShortName);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(72);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasLocale) {
        output.WriteRawTag(82);
        output.WriteString(Locale);
      }
      if (HasTimezone) {
        output.WriteRawTag(90);
        output.WriteString(Timezone);
      }
      if (HasTagOptions) {
        output.WriteRawTag(98);
        output.WriteMessage(TagOptions);
      }
      searchAttribute_.WriteTo(output, _repeated_searchAttribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (HasTagOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TagOptions);
      }
      size += searchAttribute_.CalculateSize(_repeated_searchAttribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStateOptions other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      if (other.HasTagOptions) {
        if (!HasTagOptions) {
          TagOptions = new global::Bgs.Protocol.Club.V1.TagOptions();
        }
        TagOptions.MergeFrom(other.TagOptions);
      }
      searchAttribute_.Add(other.searchAttribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.Client.SetBroadcastOptions();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 58: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 66: {
            ShortName = input.ReadString();
            break;
          }
          case 72: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 82: {
            Locale = input.ReadString();
            break;
          }
          case 90: {
            Timezone = input.ReadString();
            break;
          }
          case 98: {
            if (!HasTagOptions) {
              TagOptions = new global::Bgs.Protocol.Club.V1.TagOptions();
            }
            input.ReadMessage(TagOptions);
            break;
          }
          case 106: {
            searchAttribute_.AddEntriesFrom(input, _repeated_searchAttribute_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStateAssignment : pb::IMessage<ClubStateAssignment> {
    private static readonly pb::MessageParser<ClubStateAssignment> _parser = new pb::MessageParser<ClubStateAssignment>(() => new ClubStateAssignment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStateAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment(ClubStateAssignment other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      shortName_ = other.shortName_;
      visibilityLevel_ = other.visibilityLevel_;
      locale_ = other.locale_;
      timezone_ = other.timezone_;
      tag_ = other.tag_.Clone();
      searchAttribute_ = other.searchAttribute_.Clone();
      tagCleared_ = other.tagCleared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment Clone() {
      return new ClubStateAssignment(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.Client.Broadcast broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.Broadcast Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 6;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 8;
    private global::Bgs.Protocol.Club.V1.Client.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 9;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 10;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 11;
    private readonly static string LocaleDefaultValue = "";

    private string locale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_ ?? LocaleDefaultValue; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocale {
      get { return locale_ != null; }
    }
    /// <summary>Clears the value of the "locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocale() {
      locale_ = null;
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 12;
    private readonly static string TimezoneDefaultValue = "";

    private string timezone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_ ?? TimezoneDefaultValue; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "timezone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimezone {
      get { return timezone_ != null; }
    }
    /// <summary>Clears the value of the "timezone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimezone() {
      timezone_ = null;
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.TagIdentifier> _repeated_tag_codec
        = pb::FieldCodec.ForMessage(106, global::Bgs.Protocol.Club.V1.TagIdentifier.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> tag_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.TagIdentifier> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "search_attribute" field.</summary>
    public const int SearchAttributeFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_searchAttribute_codec
        = pb::FieldCodec.ForMessage(114, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> searchAttribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> SearchAttribute {
      get { return searchAttribute_; }
    }

    /// <summary>Field number for the "tag_cleared" field.</summary>
    public const int TagClearedFieldNumber = 15;
    private readonly static bool TagClearedDefaultValue = false;

    private bool tagCleared_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TagCleared {
      get { if ((_hasBits0 & 8) != 0) { return tagCleared_; } else { return TagClearedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tagCleared_ = value;
      }
    }
    /// <summary>Gets whether the "tag_cleared" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTagCleared {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "tag_cleared" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTagCleared() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStateAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStateAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (ShortName != other.ShortName) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (Locale != other.Locale) return false;
      if (Timezone != other.Timezone) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if(!searchAttribute_.Equals(other.searchAttribute_)) return false;
      if (TagCleared != other.TagCleared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasLocale) hash ^= Locale.GetHashCode();
      if (HasTimezone) hash ^= Timezone.GetHashCode();
      hash ^= tag_.GetHashCode();
      hash ^= searchAttribute_.GetHashCode();
      if (HasTagCleared) hash ^= TagCleared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(42);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(50);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(66);
        output.WriteMessage(StreamPosition);
      }
      if (HasShortName) {
        output.WriteRawTag(74);
        output.WriteString(ShortName);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(80);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasLocale) {
        output.WriteRawTag(90);
        output.WriteString(Locale);
      }
      if (HasTimezone) {
        output.WriteRawTag(98);
        output.WriteString(Timezone);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      searchAttribute_.WriteTo(output, _repeated_searchAttribute_codec);
      if (HasTagCleared) {
        output.WriteRawTag(120);
        output.WriteBool(TagCleared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (HasTimezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      size += searchAttribute_.CalculateSize(_repeated_searchAttribute_codec);
      if (HasTagCleared) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStateAssignment other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.Client.Broadcast();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasLocale) {
        Locale = other.Locale;
      }
      if (other.HasTimezone) {
        Timezone = other.Timezone;
      }
      tag_.Add(other.tag_);
      searchAttribute_.Add(other.searchAttribute_);
      if (other.HasTagCleared) {
        TagCleared = other.TagCleared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.Client.Broadcast();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 50: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 56: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 66: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.Client.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 74: {
            ShortName = input.ReadString();
            break;
          }
          case 80: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 90: {
            Locale = input.ReadString();
            break;
          }
          case 98: {
            Timezone = input.ReadString();
            break;
          }
          case 106: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 114: {
            searchAttribute_.AddEntriesFrom(input, _repeated_searchAttribute_codec);
            break;
          }
          case 120: {
            TagCleared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamSettings : pb::IMessage<StreamSettings> {
    private static readonly pb::MessageParser<StreamSettings> _parser = new pb::MessageParser<StreamSettings>(() => new StreamSettings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings(StreamSettings other) : this() {
      _hasBits0 = other._hasBits0;
      streamId_ = other.streamId_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings Clone() {
      return new StreamSettings(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 1) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private readonly static global::Bgs.Protocol.Club.V1.Client.StreamNotificationFilter FilterDefaultValue = global::Bgs.Protocol.Club.V1.Client.StreamNotificationFilter.None;

    private global::Bgs.Protocol.Club.V1.Client.StreamNotificationFilter filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.StreamNotificationFilter Filter {
      get { if ((_hasBits0 & 2) != 0) { return filter_; } else { return FilterDefaultValue; } }
      set {
        _hasBits0 |= 2;
        filter_ = value;
      }
    }
    /// <summary>Gets whether the "filter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFilter {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "filter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasFilter) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStreamId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StreamId);
      }
      if (HasFilter) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasFilter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamSettings other) {
      if (other == null) {
        return;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasFilter) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 16: {
            Filter = (global::Bgs.Protocol.Club.V1.Client.StreamNotificationFilter) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettings : pb::IMessage<ClubSettings> {
    private static readonly pb::MessageParser<ClubSettings> _parser = new pb::MessageParser<ClubSettings>(() => new ClubSettings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings(ClubSettings other) : this() {
      _hasBits0 = other._hasBits0;
      stream_ = other.stream_.Clone();
      streamNotificationFilterAll_ = other.streamNotificationFilterAll_;
      attribute_ = other.attribute_.Clone();
      pushNotificationFilterAll_ = other.pushNotificationFilterAll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings Clone() {
      return new ClubSettings(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.Client.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "stream_notification_filter_all" field.</summary>
    public const int StreamNotificationFilterAllFieldNumber = 2;
    private readonly static bool StreamNotificationFilterAllDefaultValue = false;

    private bool streamNotificationFilterAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StreamNotificationFilterAll {
      get { if ((_hasBits0 & 1) != 0) { return streamNotificationFilterAll_; } else { return StreamNotificationFilterAllDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamNotificationFilterAll_ = value;
      }
    }
    /// <summary>Gets whether the "stream_notification_filter_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamNotificationFilterAll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_notification_filter_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamNotificationFilterAll() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "push_notification_filter_all" field.</summary>
    public const int PushNotificationFilterAllFieldNumber = 4;
    private readonly static bool PushNotificationFilterAllDefaultValue = false;

    private bool pushNotificationFilterAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PushNotificationFilterAll {
      get { if ((_hasBits0 & 2) != 0) { return pushNotificationFilterAll_; } else { return PushNotificationFilterAllDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pushNotificationFilterAll_ = value;
      }
    }
    /// <summary>Gets whether the "push_notification_filter_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPushNotificationFilterAll {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "push_notification_filter_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPushNotificationFilterAll() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (StreamNotificationFilterAll != other.StreamNotificationFilterAll) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (PushNotificationFilterAll != other.PushNotificationFilterAll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasStreamNotificationFilterAll) hash ^= StreamNotificationFilterAll.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasPushNotificationFilterAll) hash ^= PushNotificationFilterAll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasStreamNotificationFilterAll) {
        output.WriteRawTag(16);
        output.WriteBool(StreamNotificationFilterAll);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasPushNotificationFilterAll) {
        output.WriteRawTag(32);
        output.WriteBool(PushNotificationFilterAll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasStreamNotificationFilterAll) {
        size += 1 + 1;
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasPushNotificationFilterAll) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettings other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasStreamNotificationFilterAll) {
        StreamNotificationFilterAll = other.StreamNotificationFilterAll;
      }
      attribute_.Add(other.attribute_);
      if (other.HasPushNotificationFilterAll) {
        PushNotificationFilterAll = other.PushNotificationFilterAll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 16: {
            StreamNotificationFilterAll = input.ReadBool();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 32: {
            PushNotificationFilterAll = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettingsOptions : pb::IMessage<ClubSettingsOptions> {
    private static readonly pb::MessageParser<ClubSettingsOptions> _parser = new pb::MessageParser<ClubSettingsOptions>(() => new ClubSettingsOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettingsOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions(ClubSettingsOptions other) : this() {
      _hasBits0 = other._hasBits0;
      stream_ = other.stream_.Clone();
      settings_ = other.HasSettings ? other.settings_.Clone() : null;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions Clone() {
      return new ClubSettingsOptions(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.Client.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.ClubSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }
    /// <summary>Gets whether the settings field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettings {
      get { return settings_ != null; }
    }
    /// <summary>Clears the value of the settings field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettings() {
      settings_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettingsOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettingsOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasSettings) hash ^= Settings.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasSettings) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (HasVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasSettings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettingsOptions other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasSettings) {
        if (!HasSettings) {
          Settings = new global::Bgs.Protocol.Club.V1.Client.ClubSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 18: {
            if (!HasSettings) {
              Settings = new global::Bgs.Protocol.Club.V1.Client.ClubSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettingsAssignment : pb::IMessage<ClubSettingsAssignment> {
    private static readonly pb::MessageParser<ClubSettingsAssignment> _parser = new pb::MessageParser<ClubSettingsAssignment>(() => new ClubSettingsAssignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettingsAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.Client.ClubCoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment(ClubSettingsAssignment other) : this() {
      stream_ = other.stream_.Clone();
      settings_ = other.HasSettings ? other.settings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment Clone() {
      return new ClubSettingsAssignment(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.Client.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.Client.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.Client.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.Client.ClubSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Client.ClubSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }
    /// <summary>Gets whether the settings field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettings {
      get { return settings_ != null; }
    }
    /// <summary>Clears the value of the settings field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettings() {
      settings_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettingsAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettingsAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasSettings) hash ^= Settings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasSettings) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasSettings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettingsAssignment other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasSettings) {
        if (!HasSettings) {
          Settings = new global::Bgs.Protocol.Club.V1.Client.ClubSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 18: {
            if (!HasSettings) {
              Settings = new global::Bgs.Protocol.Club.V1.Client.ClubSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
