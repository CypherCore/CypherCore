// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v1/block_list_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.BlockList.V1.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v1/block_list_types.proto</summary>
  public static partial class BlockListTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v1/block_list_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlockListTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YxL2Jsb2NrX2xpc3Rf",
            "dHlwZXMucHJvdG8SIWJncy5wcm90b2NvbC5ibG9ja19saXN0LnYxLmNsaWVu",
            "dBohYmdzL2xvdy9wYi9jbGllbnQvcnBjX3R5cGVzLnByb3RvGjdiZ3MvbG93",
            "L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9maWVsZF9vcHRpb25zLnBy",
            "b3RvGjliZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9tZXNz",
            "YWdlX29wdGlvbnMucHJvdG8aOGJncy9sb3cvcGIvY2xpZW50L2dsb2JhbF9l",
            "eHRlbnNpb25zL21ldGhvZF9vcHRpb25zLnByb3RvGjliZ3MvbG93L3BiL2Ns",
            "aWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9zZXJ2aWNlX29wdGlvbnMucHJvdG8i",
            "awoNQmxvY2tlZFBsYXllchIKCgJpZBgBIAEoBBIaCgpiYXR0bGVfdGFnGAIg",
            "ASgJQgaC+SsCCAESGAoQY3JlYXRpb25fdGltZV91cxgEIAEoBBIYChBtb2Rp",
            "ZmllZF90aW1lX3VzGAUgASgEIjIKEkJsb2NrUGxheWVyT3B0aW9ucxIcCgph",
            "Y2NvdW50X2lkGAEgASgEQgiK+SsEEgIQACI0ChRVbmJsb2NrUGxheWVyT3B0",
            "aW9ucxIcCgphY2NvdW50X2lkGAEgASgEQgiK+SsEEgIQACIlChdVbmJsb2Nr",
            "UGxheWVyQXNzaWdubWVudBIKCgJpZBgBIAEoBCJSCg5CbG9ja0xpc3RTdGF0",
            "ZRJACgZwbGF5ZXIYASADKAsyMC5iZ3MucHJvdG9jb2wuYmxvY2tfbGlzdC52",
            "MS5jbGllbnQuQmxvY2tlZFBsYXllcg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.RpcTypesReflection.Descriptor, global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer), global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer.Parser, new[]{ "Id", "BattleTag", "CreationTimeUs", "ModifiedTimeUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.BlockList.V1.Client.BlockPlayerOptions), global::Bgs.Protocol.BlockList.V1.Client.BlockPlayerOptions.Parser, new[]{ "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.BlockList.V1.Client.UnblockPlayerOptions), global::Bgs.Protocol.BlockList.V1.Client.UnblockPlayerOptions.Parser, new[]{ "AccountId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.BlockList.V1.Client.UnblockPlayerAssignment), global::Bgs.Protocol.BlockList.V1.Client.UnblockPlayerAssignment.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.BlockList.V1.Client.BlockListState), global::Bgs.Protocol.BlockList.V1.Client.BlockListState.Parser, new[]{ "Player" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BlockedPlayer : pb::IMessage<BlockedPlayer> {
    private static readonly pb::MessageParser<BlockedPlayer> _parser = new pb::MessageParser<BlockedPlayer>(() => new BlockedPlayer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockedPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.BlockList.V1.Client.BlockListTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockedPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockedPlayer(BlockedPlayer other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      battleTag_ = other.battleTag_;
      creationTimeUs_ = other.creationTimeUs_;
      modifiedTimeUs_ = other.modifiedTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockedPlayer Clone() {
      return new BlockedPlayer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "battle_tag" field.</summary>
    public const int BattleTagFieldNumber = 2;
    private readonly static string BattleTagDefaultValue = "";

    private string battleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleTag {
      get { return battleTag_ ?? BattleTagDefaultValue; }
      set {
        battleTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "battle_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleTag {
      get { return battleTag_ != null; }
    }
    /// <summary>Clears the value of the "battle_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleTag() {
      battleTag_ = null;
    }

    /// <summary>Field number for the "creation_time_us" field.</summary>
    public const int CreationTimeUsFieldNumber = 4;
    private readonly static ulong CreationTimeUsDefaultValue = 0UL;

    private ulong creationTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTimeUs {
      get { if ((_hasBits0 & 2) != 0) { return creationTimeUs_; } else { return CreationTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        creationTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTimeUs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "creation_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTimeUs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "modified_time_us" field.</summary>
    public const int ModifiedTimeUsFieldNumber = 5;
    private readonly static ulong ModifiedTimeUsDefaultValue = 0UL;

    private ulong modifiedTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ModifiedTimeUs {
      get { if ((_hasBits0 & 4) != 0) { return modifiedTimeUs_; } else { return ModifiedTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        modifiedTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "modified_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModifiedTimeUs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "modified_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModifiedTimeUs() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockedPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockedPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BattleTag != other.BattleTag) return false;
      if (CreationTimeUs != other.CreationTimeUs) return false;
      if (ModifiedTimeUs != other.ModifiedTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasBattleTag) hash ^= BattleTag.GetHashCode();
      if (HasCreationTimeUs) hash ^= CreationTimeUs.GetHashCode();
      if (HasModifiedTimeUs) hash ^= ModifiedTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasBattleTag) {
        output.WriteRawTag(18);
        output.WriteString(BattleTag);
      }
      if (HasCreationTimeUs) {
        output.WriteRawTag(32);
        output.WriteUInt64(CreationTimeUs);
      }
      if (HasModifiedTimeUs) {
        output.WriteRawTag(40);
        output.WriteUInt64(ModifiedTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasBattleTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleTag);
      }
      if (HasCreationTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTimeUs);
      }
      if (HasModifiedTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ModifiedTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockedPlayer other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasBattleTag) {
        BattleTag = other.BattleTag;
      }
      if (other.HasCreationTimeUs) {
        CreationTimeUs = other.CreationTimeUs;
      }
      if (other.HasModifiedTimeUs) {
        ModifiedTimeUs = other.ModifiedTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            BattleTag = input.ReadString();
            break;
          }
          case 32: {
            CreationTimeUs = input.ReadUInt64();
            break;
          }
          case 40: {
            ModifiedTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockPlayerOptions : pb::IMessage<BlockPlayerOptions> {
    private static readonly pb::MessageParser<BlockPlayerOptions> _parser = new pb::MessageParser<BlockPlayerOptions>(() => new BlockPlayerOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockPlayerOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.BlockList.V1.Client.BlockListTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockPlayerOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockPlayerOptions(BlockPlayerOptions other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockPlayerOptions Clone() {
      return new BlockPlayerOptions(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static ulong AccountIdDefaultValue = 0UL;

    private ulong accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockPlayerOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockPlayerOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockPlayerOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnblockPlayerOptions : pb::IMessage<UnblockPlayerOptions> {
    private static readonly pb::MessageParser<UnblockPlayerOptions> _parser = new pb::MessageParser<UnblockPlayerOptions>(() => new UnblockPlayerOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnblockPlayerOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.BlockList.V1.Client.BlockListTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerOptions(UnblockPlayerOptions other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerOptions Clone() {
      return new UnblockPlayerOptions(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static ulong AccountIdDefaultValue = 0UL;

    private ulong accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnblockPlayerOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnblockPlayerOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(AccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnblockPlayerOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnblockPlayerAssignment : pb::IMessage<UnblockPlayerAssignment> {
    private static readonly pb::MessageParser<UnblockPlayerAssignment> _parser = new pb::MessageParser<UnblockPlayerAssignment>(() => new UnblockPlayerAssignment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnblockPlayerAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.BlockList.V1.Client.BlockListTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerAssignment(UnblockPlayerAssignment other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnblockPlayerAssignment Clone() {
      return new UnblockPlayerAssignment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnblockPlayerAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnblockPlayerAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnblockPlayerAssignment other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockListState : pb::IMessage<BlockListState> {
    private static readonly pb::MessageParser<BlockListState> _parser = new pb::MessageParser<BlockListState>(() => new BlockListState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockListState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.BlockList.V1.Client.BlockListTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockListState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockListState(BlockListState other) : this() {
      player_ = other.player_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockListState Clone() {
      return new BlockListState(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer> _repeated_player_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer> player_ = new pbc::RepeatedField<global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.BlockList.V1.Client.BlockedPlayer> Player {
      get { return player_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockListState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockListState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!player_.Equals(other.player_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= player_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      player_.WriteTo(output, _repeated_player_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += player_.CalculateSize(_repeated_player_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockListState other) {
      if (other == null) {
        return;
      }
      player_.Add(other.player_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
