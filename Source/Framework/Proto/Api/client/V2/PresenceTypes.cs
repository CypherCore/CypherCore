// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v2/presence_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Presence.V2 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v2/presence_types.proto</summary>
  public static partial class PresenceTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v2/presence_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PresenceTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YyL3ByZXNlbmNlX3R5",
            "cGVzLnByb3RvEhhiZ3MucHJvdG9jb2wucHJlc2VuY2UudjIaNWJncy9sb3cv",
            "cGIvY2xpZW50L2FwaS9jb21tb24vdjIvYXR0cmlidXRlX3R5cGVzLnByb3Rv",
            "GjliZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YyL2dhbWVfYWNjb3Vu",
            "dF9oYW5kbGUucHJvdG8iTAoPUmljaFByZXNlbmNlS2V5EhAKCHRpdGxlX2lk",
            "GAEgASgNEg4KBnN0cmVhbRgCIAEoBxIXCg9sb2NhbGl6YXRpb25faWQYAyAB",
            "KA0iVQoQUHJlc2VuY2VGaWVsZEtleRIQCgh0aXRsZV9pZBgBIAEoDRINCgVn",
            "cm91cBgCIAEoDRINCgVmaWVsZBgDIAEoDRIRCgl1bmlxdWVfaWQYBCABKAQi",
            "mwEKDVByZXNlbmNlRmllbGQSNwoDa2V5GAEgASgLMiouYmdzLnByb3RvY29s",
            "LnByZXNlbmNlLnYyLlByZXNlbmNlRmllbGRLZXkSJwoFdmFsdWUYAiABKAsy",
            "GC5iZ3MucHJvdG9jb2wudjIuVmFyaWFudBIPCgdkZWxldGVkGAMgASgIEhcK",
            "D3VwZGF0ZWRfdGltZV91cxgEIAEoBCK7AQoSUHJlc2VuY2VGaWVsZFN0YXRl",
            "EhIKCmFjY291bnRfaWQYASABKAQSQAoMZ2FtZV9hY2NvdW50GAIgASgLMiou",
            "YmdzLnByb3RvY29sLmFjY291bnQudjIuR2FtZUFjY291bnRIYW5kbGUSNwoG",
            "ZmllbGRzGAMgAygLMicuYmdzLnByb3RvY29sLnByZXNlbmNlLnYyLlByZXNl",
            "bmNlRmllbGQSFgoOb2xkZXN0X3RpbWVfdXMYBCABKAQihwEKE1ByZXNlbmNl",
            "RmllbGRVcGRhdGUSNwoDa2V5GAEgASgLMiouYmdzLnByb3RvY29sLnByZXNl",
            "bmNlLnYyLlByZXNlbmNlRmllbGRLZXkSJwoFdmFsdWUYAiABKAsyGC5iZ3Mu",
            "cHJvdG9jb2wudjIuVmFyaWFudBIOCgZkZWxldGUYAyABKAgidQoZUHJlc2Vu",
            "Y2VPbmxpbmVHYW1lQWNjb3VudBJACgxnYW1lX2FjY291bnQYASABKAsyKi5i",
            "Z3MucHJvdG9jb2wuYWNjb3VudC52Mi5HYW1lQWNjb3VudEhhbmRsZRIWCg5v",
            "bmxpbmVfdGltZV91cxgCIAEoBCJ4CiNQcmVzZW5jZU9ubGluZUdhbWVBY2Nv",
            "dW50RmllbGRWYWx1ZRJRChRvbmxpbmVfZ2FtZV9hY2NvdW50cxgBIAMoCzIz",
            "LmJncy5wcm90b2NvbC5wcmVzZW5jZS52Mi5QcmVzZW5jZU9ubGluZUdhbWVB",
            "Y2NvdW50IksKIlByZXNlbmNlRXh0ZXJuYWxJZGVudGl0eUZpZWxkVmFsdWUS",
            "EQoJdW5pcXVlX2lkGAEgASgJEhIKCmRpc3BsYXlfaWQYAiABKAkqcgoVUHJl",
            "c2VuY2VRdWVyeUJlaGF2aW9yEhsKF0JBVFRMRV9ORVRfQUNDT1VOVF9PTkxZ",
            "EAASHQoZSU5DTFVERV9TQU1FX0dBTUVfQUNDT1VOVBABEh0KGUlOQ0xVREVf",
            "QUxMX0dBTUVfQUNDT1VOVFMQAipDChVQcmVzZW5jZUFjY291bnRTdGF0dXMS",
            "CwoHT0ZGTElORRAAEgoKBk9OTElORRABEggKBEFXQVkQAhIHCgNETkQQAw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.Account.V2.GameAccountHandleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bgs.Protocol.Presence.V2.PresenceQueryBehavior), typeof(global::Bgs.Protocol.Presence.V2.PresenceAccountStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.RichPresenceKey), global::Bgs.Protocol.Presence.V2.RichPresenceKey.Parser, new[]{ "TitleId", "Stream", "LocalizationId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceFieldKey), global::Bgs.Protocol.Presence.V2.PresenceFieldKey.Parser, new[]{ "TitleId", "Group", "Field", "UniqueId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceField), global::Bgs.Protocol.Presence.V2.PresenceField.Parser, new[]{ "Key", "Value", "Deleted", "UpdatedTimeUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceFieldState), global::Bgs.Protocol.Presence.V2.PresenceFieldState.Parser, new[]{ "AccountId", "GameAccount", "Fields", "OldestTimeUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceFieldUpdate), global::Bgs.Protocol.Presence.V2.PresenceFieldUpdate.Parser, new[]{ "Key", "Value", "Delete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount), global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount.Parser, new[]{ "GameAccount", "OnlineTimeUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccountFieldValue), global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccountFieldValue.Parser, new[]{ "OnlineGameAccounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Presence.V2.PresenceExternalIdentityFieldValue), global::Bgs.Protocol.Presence.V2.PresenceExternalIdentityFieldValue.Parser, new[]{ "UniqueId", "DisplayId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PresenceQueryBehavior {
    [pbr::OriginalName("BATTLE_NET_ACCOUNT_ONLY")] BattleNetAccountOnly = 0,
    [pbr::OriginalName("INCLUDE_SAME_GAME_ACCOUNT")] IncludeSameGameAccount = 1,
    [pbr::OriginalName("INCLUDE_ALL_GAME_ACCOUNTS")] IncludeAllGameAccounts = 2,
  }

  public enum PresenceAccountStatus {
    [pbr::OriginalName("OFFLINE")] Offline = 0,
    [pbr::OriginalName("ONLINE")] Online = 1,
    [pbr::OriginalName("AWAY")] Away = 2,
    [pbr::OriginalName("DND")] Dnd = 3,
  }

  #endregion

  #region Messages
  public sealed partial class RichPresenceKey : pb::IMessage<RichPresenceKey> {
    private static readonly pb::MessageParser<RichPresenceKey> _parser = new pb::MessageParser<RichPresenceKey>(() => new RichPresenceKey());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RichPresenceKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichPresenceKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichPresenceKey(RichPresenceKey other) : this() {
      _hasBits0 = other._hasBits0;
      titleId_ = other.titleId_;
      stream_ = other.stream_;
      localizationId_ = other.localizationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichPresenceKey Clone() {
      return new RichPresenceKey(this);
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private readonly static uint TitleIdDefaultValue = 0;

    private uint titleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { if ((_hasBits0 & 1) != 0) { return titleId_; } else { return TitleIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        titleId_ = value;
      }
    }
    /// <summary>Gets whether the "title_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitleId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "title_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitleId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 2;
    private readonly static uint StreamDefaultValue = 0;

    private uint stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stream {
      get { if ((_hasBits0 & 2) != 0) { return stream_; } else { return StreamDefaultValue; } }
      set {
        _hasBits0 |= 2;
        stream_ = value;
      }
    }
    /// <summary>Gets whether the "stream" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStream {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "stream" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStream() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "localization_id" field.</summary>
    public const int LocalizationIdFieldNumber = 3;
    private readonly static uint LocalizationIdDefaultValue = 0;

    private uint localizationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalizationId {
      get { if ((_hasBits0 & 4) != 0) { return localizationId_; } else { return LocalizationIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        localizationId_ = value;
      }
    }
    /// <summary>Gets whether the "localization_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLocalizationId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "localization_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalizationId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RichPresenceKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RichPresenceKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TitleId != other.TitleId) return false;
      if (Stream != other.Stream) return false;
      if (LocalizationId != other.LocalizationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitleId) hash ^= TitleId.GetHashCode();
      if (HasStream) hash ^= Stream.GetHashCode();
      if (HasLocalizationId) hash ^= LocalizationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTitleId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
      if (HasStream) {
        output.WriteRawTag(21);
        output.WriteFixed32(Stream);
      }
      if (HasLocalizationId) {
        output.WriteRawTag(24);
        output.WriteUInt32(LocalizationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitleId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (HasStream) {
        size += 1 + 4;
      }
      if (HasLocalizationId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalizationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RichPresenceKey other) {
      if (other == null) {
        return;
      }
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.HasStream) {
        Stream = other.Stream;
      }
      if (other.HasLocalizationId) {
        LocalizationId = other.LocalizationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 21: {
            Stream = input.ReadFixed32();
            break;
          }
          case 24: {
            LocalizationId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceFieldKey : pb::IMessage<PresenceFieldKey> {
    private static readonly pb::MessageParser<PresenceFieldKey> _parser = new pb::MessageParser<PresenceFieldKey>(() => new PresenceFieldKey());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceFieldKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldKey(PresenceFieldKey other) : this() {
      _hasBits0 = other._hasBits0;
      titleId_ = other.titleId_;
      group_ = other.group_;
      field_ = other.field_;
      uniqueId_ = other.uniqueId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldKey Clone() {
      return new PresenceFieldKey(this);
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private readonly static uint TitleIdDefaultValue = 0;

    private uint titleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { if ((_hasBits0 & 1) != 0) { return titleId_; } else { return TitleIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        titleId_ = value;
      }
    }
    /// <summary>Gets whether the "title_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitleId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "title_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitleId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private readonly static uint GroupDefaultValue = 0;

    private uint group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { if ((_hasBits0 & 2) != 0) { return group_; } else { return GroupDefaultValue; } }
      set {
        _hasBits0 |= 2;
        group_ = value;
      }
    }
    /// <summary>Gets whether the "group" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroup {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "group" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroup() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 3;
    private readonly static uint FieldDefaultValue = 0;

    private uint field_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Field {
      get { if ((_hasBits0 & 4) != 0) { return field_; } else { return FieldDefaultValue; } }
      set {
        _hasBits0 |= 4;
        field_ = value;
      }
    }
    /// <summary>Gets whether the "field" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasField {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "field" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearField() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 4;
    private readonly static ulong UniqueIdDefaultValue = 0UL;

    private ulong uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UniqueId {
      get { if ((_hasBits0 & 8) != 0) { return uniqueId_; } else { return UniqueIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        uniqueId_ = value;
      }
    }
    /// <summary>Gets whether the "unique_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUniqueId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "unique_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUniqueId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceFieldKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceFieldKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TitleId != other.TitleId) return false;
      if (Group != other.Group) return false;
      if (Field != other.Field) return false;
      if (UniqueId != other.UniqueId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitleId) hash ^= TitleId.GetHashCode();
      if (HasGroup) hash ^= Group.GetHashCode();
      if (HasField) hash ^= Field.GetHashCode();
      if (HasUniqueId) hash ^= UniqueId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTitleId) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
      if (HasGroup) {
        output.WriteRawTag(16);
        output.WriteUInt32(Group);
      }
      if (HasField) {
        output.WriteRawTag(24);
        output.WriteUInt32(Field);
      }
      if (HasUniqueId) {
        output.WriteRawTag(32);
        output.WriteUInt64(UniqueId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitleId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (HasGroup) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (HasField) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Field);
      }
      if (HasUniqueId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceFieldKey other) {
      if (other == null) {
        return;
      }
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.HasGroup) {
        Group = other.Group;
      }
      if (other.HasField) {
        Field = other.Field;
      }
      if (other.HasUniqueId) {
        UniqueId = other.UniqueId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 16: {
            Group = input.ReadUInt32();
            break;
          }
          case 24: {
            Field = input.ReadUInt32();
            break;
          }
          case 32: {
            UniqueId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceField : pb::IMessage<PresenceField> {
    private static readonly pb::MessageParser<PresenceField> _parser = new pb::MessageParser<PresenceField>(() => new PresenceField());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceField(PresenceField other) : this() {
      _hasBits0 = other._hasBits0;
      key_ = other.HasKey ? other.key_.Clone() : null;
      value_ = other.HasValue ? other.value_.Clone() : null;
      deleted_ = other.deleted_;
      updatedTimeUs_ = other.updatedTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceField Clone() {
      return new PresenceField(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Bgs.Protocol.Presence.V2.PresenceFieldKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Presence.V2.PresenceFieldKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }
    /// <summary>Gets whether the key field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the key field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Bgs.Protocol.V2.Variant value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.V2.Variant Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }
    /// <summary>Gets whether the value field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the value field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 3;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { if ((_hasBits0 & 1) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeleted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeleted() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "updated_time_us" field.</summary>
    public const int UpdatedTimeUsFieldNumber = 4;
    private readonly static ulong UpdatedTimeUsDefaultValue = 0UL;

    private ulong updatedTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdatedTimeUs {
      get { if ((_hasBits0 & 2) != 0) { return updatedTimeUs_; } else { return UpdatedTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        updatedTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "updated_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpdatedTimeUs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "updated_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdatedTimeUs() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (Deleted != other.Deleted) return false;
      if (UpdatedTimeUs != other.UpdatedTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasUpdatedTimeUs) hash ^= UpdatedTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (HasDeleted) {
        output.WriteRawTag(24);
        output.WriteBool(Deleted);
      }
      if (HasUpdatedTimeUs) {
        output.WriteRawTag(32);
        output.WriteUInt64(UpdatedTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasUpdatedTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdatedTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceField other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        if (!HasKey) {
          Key = new global::Bgs.Protocol.Presence.V2.PresenceFieldKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.HasValue) {
        if (!HasValue) {
          Value = new global::Bgs.Protocol.V2.Variant();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasUpdatedTimeUs) {
        UpdatedTimeUs = other.UpdatedTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasKey) {
              Key = new global::Bgs.Protocol.Presence.V2.PresenceFieldKey();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (!HasValue) {
              Value = new global::Bgs.Protocol.V2.Variant();
            }
            input.ReadMessage(Value);
            break;
          }
          case 24: {
            Deleted = input.ReadBool();
            break;
          }
          case 32: {
            UpdatedTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceFieldState : pb::IMessage<PresenceFieldState> {
    private static readonly pb::MessageParser<PresenceFieldState> _parser = new pb::MessageParser<PresenceFieldState>(() => new PresenceFieldState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceFieldState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldState(PresenceFieldState other) : this() {
      _hasBits0 = other._hasBits0;
      accountId_ = other.accountId_;
      gameAccount_ = other.HasGameAccount ? other.gameAccount_.Clone() : null;
      fields_ = other.fields_.Clone();
      oldestTimeUs_ = other.oldestTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldState Clone() {
      return new PresenceFieldState(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private readonly static ulong AccountIdDefaultValue = 0UL;

    private ulong accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccountId {
      get { if ((_hasBits0 & 1) != 0) { return accountId_; } else { return AccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        accountId_ = value;
      }
    }
    /// <summary>Gets whether the "account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "game_account" field.</summary>
    public const int GameAccountFieldNumber = 2;
    private global::Bgs.Protocol.Account.V2.GameAccountHandle gameAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V2.GameAccountHandle GameAccount {
      get { return gameAccount_; }
      set {
        gameAccount_ = value;
      }
    }
    /// <summary>Gets whether the game_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameAccount {
      get { return gameAccount_ != null; }
    }
    /// <summary>Clears the value of the game_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameAccount() {
      gameAccount_ = null;
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Presence.V2.PresenceField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.Presence.V2.PresenceField.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceField> fields_ = new pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceField> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "oldest_time_us" field.</summary>
    public const int OldestTimeUsFieldNumber = 4;
    private readonly static ulong OldestTimeUsDefaultValue = 0UL;

    private ulong oldestTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OldestTimeUs {
      get { if ((_hasBits0 & 2) != 0) { return oldestTimeUs_; } else { return OldestTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oldestTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "oldest_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOldestTimeUs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "oldest_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOldestTimeUs() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceFieldState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceFieldState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(GameAccount, other.GameAccount)) return false;
      if(!fields_.Equals(other.fields_)) return false;
      if (OldestTimeUs != other.OldestTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccountId) hash ^= AccountId.GetHashCode();
      if (HasGameAccount) hash ^= GameAccount.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (HasOldestTimeUs) hash ^= OldestTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(AccountId);
      }
      if (HasGameAccount) {
        output.WriteRawTag(18);
        output.WriteMessage(GameAccount);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (HasOldestTimeUs) {
        output.WriteRawTag(32);
        output.WriteUInt64(OldestTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountId);
      }
      if (HasGameAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameAccount);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (HasOldestTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OldestTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceFieldState other) {
      if (other == null) {
        return;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasGameAccount) {
        if (!HasGameAccount) {
          GameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
        }
        GameAccount.MergeFrom(other.GameAccount);
      }
      fields_.Add(other.fields_);
      if (other.HasOldestTimeUs) {
        OldestTimeUs = other.OldestTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasGameAccount) {
              GameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
            }
            input.ReadMessage(GameAccount);
            break;
          }
          case 26: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 32: {
            OldestTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceFieldUpdate : pb::IMessage<PresenceFieldUpdate> {
    private static readonly pb::MessageParser<PresenceFieldUpdate> _parser = new pb::MessageParser<PresenceFieldUpdate>(() => new PresenceFieldUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceFieldUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldUpdate(PresenceFieldUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      key_ = other.HasKey ? other.key_.Clone() : null;
      value_ = other.HasValue ? other.value_.Clone() : null;
      delete_ = other.delete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceFieldUpdate Clone() {
      return new PresenceFieldUpdate(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Bgs.Protocol.Presence.V2.PresenceFieldKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Presence.V2.PresenceFieldKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }
    /// <summary>Gets whether the key field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the key field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Bgs.Protocol.V2.Variant value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.V2.Variant Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }
    /// <summary>Gets whether the value field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the value field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 3;
    private readonly static bool DeleteDefaultValue = false;

    private bool delete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Delete {
      get { if ((_hasBits0 & 1) != 0) { return delete_; } else { return DeleteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        delete_ = value;
      }
    }
    /// <summary>Gets whether the "delete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDelete {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "delete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDelete() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceFieldUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceFieldUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (Delete != other.Delete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasDelete) hash ^= Delete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (HasDelete) {
        output.WriteRawTag(24);
        output.WriteBool(Delete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (HasDelete) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceFieldUpdate other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        if (!HasKey) {
          Key = new global::Bgs.Protocol.Presence.V2.PresenceFieldKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.HasValue) {
        if (!HasValue) {
          Value = new global::Bgs.Protocol.V2.Variant();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.HasDelete) {
        Delete = other.Delete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasKey) {
              Key = new global::Bgs.Protocol.Presence.V2.PresenceFieldKey();
            }
            input.ReadMessage(Key);
            break;
          }
          case 18: {
            if (!HasValue) {
              Value = new global::Bgs.Protocol.V2.Variant();
            }
            input.ReadMessage(Value);
            break;
          }
          case 24: {
            Delete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceOnlineGameAccount : pb::IMessage<PresenceOnlineGameAccount> {
    private static readonly pb::MessageParser<PresenceOnlineGameAccount> _parser = new pb::MessageParser<PresenceOnlineGameAccount>(() => new PresenceOnlineGameAccount());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceOnlineGameAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccount(PresenceOnlineGameAccount other) : this() {
      _hasBits0 = other._hasBits0;
      gameAccount_ = other.HasGameAccount ? other.gameAccount_.Clone() : null;
      onlineTimeUs_ = other.onlineTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccount Clone() {
      return new PresenceOnlineGameAccount(this);
    }

    /// <summary>Field number for the "game_account" field.</summary>
    public const int GameAccountFieldNumber = 1;
    private global::Bgs.Protocol.Account.V2.GameAccountHandle gameAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V2.GameAccountHandle GameAccount {
      get { return gameAccount_; }
      set {
        gameAccount_ = value;
      }
    }
    /// <summary>Gets whether the game_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameAccount {
      get { return gameAccount_ != null; }
    }
    /// <summary>Clears the value of the game_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameAccount() {
      gameAccount_ = null;
    }

    /// <summary>Field number for the "online_time_us" field.</summary>
    public const int OnlineTimeUsFieldNumber = 2;
    private readonly static ulong OnlineTimeUsDefaultValue = 0UL;

    private ulong onlineTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OnlineTimeUs {
      get { if ((_hasBits0 & 1) != 0) { return onlineTimeUs_; } else { return OnlineTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        onlineTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "online_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnlineTimeUs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "online_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnlineTimeUs() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceOnlineGameAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceOnlineGameAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameAccount, other.GameAccount)) return false;
      if (OnlineTimeUs != other.OnlineTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasGameAccount) hash ^= GameAccount.GetHashCode();
      if (HasOnlineTimeUs) hash ^= OnlineTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGameAccount) {
        output.WriteRawTag(10);
        output.WriteMessage(GameAccount);
      }
      if (HasOnlineTimeUs) {
        output.WriteRawTag(16);
        output.WriteUInt64(OnlineTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGameAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameAccount);
      }
      if (HasOnlineTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OnlineTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceOnlineGameAccount other) {
      if (other == null) {
        return;
      }
      if (other.HasGameAccount) {
        if (!HasGameAccount) {
          GameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
        }
        GameAccount.MergeFrom(other.GameAccount);
      }
      if (other.HasOnlineTimeUs) {
        OnlineTimeUs = other.OnlineTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasGameAccount) {
              GameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
            }
            input.ReadMessage(GameAccount);
            break;
          }
          case 16: {
            OnlineTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceOnlineGameAccountFieldValue : pb::IMessage<PresenceOnlineGameAccountFieldValue> {
    private static readonly pb::MessageParser<PresenceOnlineGameAccountFieldValue> _parser = new pb::MessageParser<PresenceOnlineGameAccountFieldValue>(() => new PresenceOnlineGameAccountFieldValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceOnlineGameAccountFieldValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccountFieldValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccountFieldValue(PresenceOnlineGameAccountFieldValue other) : this() {
      onlineGameAccounts_ = other.onlineGameAccounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceOnlineGameAccountFieldValue Clone() {
      return new PresenceOnlineGameAccountFieldValue(this);
    }

    /// <summary>Field number for the "online_game_accounts" field.</summary>
    public const int OnlineGameAccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount> _repeated_onlineGameAccounts_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount> onlineGameAccounts_ = new pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Presence.V2.PresenceOnlineGameAccount> OnlineGameAccounts {
      get { return onlineGameAccounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceOnlineGameAccountFieldValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceOnlineGameAccountFieldValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!onlineGameAccounts_.Equals(other.onlineGameAccounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= onlineGameAccounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      onlineGameAccounts_.WriteTo(output, _repeated_onlineGameAccounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += onlineGameAccounts_.CalculateSize(_repeated_onlineGameAccounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceOnlineGameAccountFieldValue other) {
      if (other == null) {
        return;
      }
      onlineGameAccounts_.Add(other.onlineGameAccounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            onlineGameAccounts_.AddEntriesFrom(input, _repeated_onlineGameAccounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PresenceExternalIdentityFieldValue : pb::IMessage<PresenceExternalIdentityFieldValue> {
    private static readonly pb::MessageParser<PresenceExternalIdentityFieldValue> _parser = new pb::MessageParser<PresenceExternalIdentityFieldValue>(() => new PresenceExternalIdentityFieldValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceExternalIdentityFieldValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Presence.V2.PresenceTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceExternalIdentityFieldValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceExternalIdentityFieldValue(PresenceExternalIdentityFieldValue other) : this() {
      uniqueId_ = other.uniqueId_;
      displayId_ = other.displayId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceExternalIdentityFieldValue Clone() {
      return new PresenceExternalIdentityFieldValue(this);
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private readonly static string UniqueIdDefaultValue = "";

    private string uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_ ?? UniqueIdDefaultValue; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "unique_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUniqueId {
      get { return uniqueId_ != null; }
    }
    /// <summary>Clears the value of the "unique_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUniqueId() {
      uniqueId_ = null;
    }

    /// <summary>Field number for the "display_id" field.</summary>
    public const int DisplayIdFieldNumber = 2;
    private readonly static string DisplayIdDefaultValue = "";

    private string displayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayId {
      get { return displayId_ ?? DisplayIdDefaultValue; }
      set {
        displayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "display_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDisplayId {
      get { return displayId_ != null; }
    }
    /// <summary>Clears the value of the "display_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisplayId() {
      displayId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceExternalIdentityFieldValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceExternalIdentityFieldValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (DisplayId != other.DisplayId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUniqueId) hash ^= UniqueId.GetHashCode();
      if (HasDisplayId) hash ^= DisplayId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUniqueId) {
        output.WriteRawTag(10);
        output.WriteString(UniqueId);
      }
      if (HasDisplayId) {
        output.WriteRawTag(18);
        output.WriteString(DisplayId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUniqueId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (HasDisplayId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceExternalIdentityFieldValue other) {
      if (other == null) {
        return;
      }
      if (other.HasUniqueId) {
        UniqueId = other.UniqueId;
      }
      if (other.HasDisplayId) {
        DisplayId = other.DisplayId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueId = input.ReadString();
            break;
          }
          case 18: {
            DisplayId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
