// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/api/client/v2/whisper_listener.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Whisper.V2.Client {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/api/client/v2/whisper_listener.proto</summary>
  public static partial class WhisperListenerReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/api/client/v2/whisper_listener.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WhisperListenerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YyL3doaXNwZXJfbGlz",
            "dGVuZXIucHJvdG8SHmJncy5wcm90b2NvbC53aGlzcGVyLnYyLmNsaWVudBoz",
            "YmdzL2xvdy9wYi9jbGllbnQvYXBpL2NvbW1vbi92MS9tZXNzYWdlX3R5cGVz",
            "LnByb3RvGjliZ3MvbG93L3BiL2NsaWVudC9hcGkvY29tbW9uL3YyL2dhbWVf",
            "YWNjb3VudF9oYW5kbGUucHJvdG8aM2Jncy9sb3cvcGIvY2xpZW50L2FwaS9j",
            "b21tb24vdjIvd2hpc3Blcl90eXBlcy5wcm90bxohYmdzL2xvdy9wYi9jbGll",
            "bnQvcnBjX3R5cGVzLnByb3RvGjdiZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxf",
            "ZXh0ZW5zaW9ucy9maWVsZF9vcHRpb25zLnByb3RvGjliZ3MvbG93L3BiL2Ns",
            "aWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9tZXNzYWdlX29wdGlvbnMucHJvdG8a",
            "OGJncy9sb3cvcGIvY2xpZW50L2dsb2JhbF9leHRlbnNpb25zL21ldGhvZF9v",
            "cHRpb25zLnByb3RvGjliZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5z",
            "aW9ucy9zZXJ2aWNlX29wdGlvbnMucHJvdG8i0wEKE1doaXNwZXJOb3RpZmlj",
            "YXRpb24SHQoVc3Vic2NyaWJlcl9hY2NvdW50X2lkGAEgASgEEjEKB3doaXNw",
            "ZXIYAiABKAsyIC5iZ3MucHJvdG9jb2wud2hpc3Blci52Mi5XaGlzcGVyEiEK",
            "EXRhcmdldF9iYXR0bGVfdGFnGAMgASgJQgaC+SsCCAESRwoTdGFyZ2V0X2dh",
            "bWVfYWNjb3VudBgEIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50LnYyLkdh",
            "bWVBY2NvdW50SGFuZGxlIpgBChdXaGlzcGVyRWNob05vdGlmaWNhdGlvbhId",
            "ChVzdWJzY3JpYmVyX2FjY291bnRfaWQYASABKAQSMQoHd2hpc3BlchgCIAEo",
            "CzIgLmJncy5wcm90b2NvbC53aGlzcGVyLnYyLldoaXNwZXISKwoObWVzc2Fn",
            "ZV9vcmlnaW4YAyABKA1CE4L5Kw8qDU1lc3NhZ2VPcmlnaW4ibgoaV2hpc3Bl",
            "clVwZGF0ZWROb3RpZmljYXRpb24SHQoVc3Vic2NyaWJlcl9hY2NvdW50X2lk",
            "GAEgASgEEjEKB3doaXNwZXIYAiABKAsyIC5iZ3MucHJvdG9jb2wud2hpc3Bl",
            "ci52Mi5XaGlzcGVyIpcBChtUeXBpbmdJbmRpY2F0b3JOb3RpZmljYXRpb24S",
            "HQoVc3Vic2NyaWJlcl9hY2NvdW50X2lkGAEgASgEEhkKEXRhcmdldF9hY2Nv",
            "dW50X2lkGAIgASgEEj4KCWluZGljYXRvchgDIAEoDjIdLmJncy5wcm90b2Nv",
            "bC5UeXBpbmdJbmRpY2F0b3I6DFRZUElOR19TVEFSVCJtChtBZHZhbmNlVmll",
            "d1RpbWVOb3RpZmljYXRpb24SHQoVc3Vic2NyaWJlcl9hY2NvdW50X2lkGAEg",
            "ASgEEhkKEXRhcmdldF9hY2NvdW50X2lkGAIgASgEEhQKDHZpZXdfdGltZV91",
            "cxgDIAEoBCJvChxBZHZhbmNlQ2xlYXJUaW1lTm90aWZpY2F0aW9uEh0KFXN1",
            "YnNjcmliZXJfYWNjb3VudF9pZBgBIAEoBBIZChF0YXJnZXRfYWNjb3VudF9p",
            "ZBgCIAEoBBIVCg1jbGVhcl90aW1lX3VzGAMgASgEMoYGCg9XaGlzcGVyTGlz",
            "dGVuZXISaQoJT25XaGlzcGVyEjMuYmdzLnByb3RvY29sLndoaXNwZXIudjIu",
            "Y2xpZW50LldoaXNwZXJOb3RpZmljYXRpb24aGS5iZ3MucHJvdG9jb2wuTk9f",
            "UkVTUE9OU0UiDIL5KwIIAYL5KwI4ARJrCg1PbldoaXNwZXJFY2hvEjcuYmdz",
            "LnByb3RvY29sLndoaXNwZXIudjIuY2xpZW50LldoaXNwZXJFY2hvTm90aWZp",
            "Y2F0aW9uGhkuYmdzLnByb3RvY29sLk5PX1JFU1BPTlNFIgaC+SsCCAIScQoQ",
            "T25XaGlzcGVyVXBkYXRlZBI6LmJncy5wcm90b2NvbC53aGlzcGVyLnYyLmNs",
            "aWVudC5XaGlzcGVyVXBkYXRlZE5vdGlmaWNhdGlvbhoZLmJncy5wcm90b2Nv",
            "bC5OT19SRVNQT05TRSIGgvkrAggDEnMKEU9uQWR2YW5jZVZpZXdUaW1lEjsu",
            "YmdzLnByb3RvY29sLndoaXNwZXIudjIuY2xpZW50LkFkdmFuY2VWaWV3VGlt",
            "ZU5vdGlmaWNhdGlvbhoZLmJncy5wcm90b2NvbC5OT19SRVNQT05TRSIGgvkr",
            "AggEEnUKEk9uQWR2YW5jZUNsZWFyVGltZRI8LmJncy5wcm90b2NvbC53aGlz",
            "cGVyLnYyLmNsaWVudC5BZHZhbmNlQ2xlYXJUaW1lTm90aWZpY2F0aW9uGhku",
            "YmdzLnByb3RvY29sLk5PX1JFU1BPTlNFIgaC+SsCCAUScwoRT25UeXBpbmdJ",
            "bmRpY2F0b3ISOy5iZ3MucHJvdG9jb2wud2hpc3Blci52Mi5jbGllbnQuVHlw",
            "aW5nSW5kaWNhdG9yTm90aWZpY2F0aW9uGhkuYmdzLnByb3RvY29sLk5PX1JF",
            "U1BPTlNFIgaC+SsCCAYaR4L5KzEKL2JuZXQucHJvdG9jb2wud2hpc3Blci52",
            "Mi5jbGllbnQuV2hpc3Blckxpc3RlbmVygvkrAjgBivkrAggBivkrAhgB"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.MessageTypesReflection.Descriptor, global::Bgs.Protocol.Account.V2.GameAccountHandleReflection.Descriptor, global::Bgs.Protocol.Whisper.V2.WhisperTypesReflection.Descriptor, global::Bgs.Protocol.RpcTypesReflection.Descriptor, global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.WhisperNotification), global::Bgs.Protocol.Whisper.V2.Client.WhisperNotification.Parser, new[]{ "SubscriberAccountId", "Whisper", "TargetBattleTag", "TargetGameAccount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.WhisperEchoNotification), global::Bgs.Protocol.Whisper.V2.Client.WhisperEchoNotification.Parser, new[]{ "SubscriberAccountId", "Whisper", "MessageOrigin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.WhisperUpdatedNotification), global::Bgs.Protocol.Whisper.V2.Client.WhisperUpdatedNotification.Parser, new[]{ "SubscriberAccountId", "Whisper" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.TypingIndicatorNotification), global::Bgs.Protocol.Whisper.V2.Client.TypingIndicatorNotification.Parser, new[]{ "SubscriberAccountId", "TargetAccountId", "Indicator" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.AdvanceViewTimeNotification), global::Bgs.Protocol.Whisper.V2.Client.AdvanceViewTimeNotification.Parser, new[]{ "SubscriberAccountId", "TargetAccountId", "ViewTimeUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Whisper.V2.Client.AdvanceClearTimeNotification), global::Bgs.Protocol.Whisper.V2.Client.AdvanceClearTimeNotification.Parser, new[]{ "SubscriberAccountId", "TargetAccountId", "ClearTimeUs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WhisperNotification : pb::IMessage<WhisperNotification> {
    private static readonly pb::MessageParser<WhisperNotification> _parser = new pb::MessageParser<WhisperNotification>(() => new WhisperNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhisperNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperNotification(WhisperNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      whisper_ = other.HasWhisper ? other.whisper_.Clone() : null;
      targetBattleTag_ = other.targetBattleTag_;
      targetGameAccount_ = other.HasTargetGameAccount ? other.targetGameAccount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperNotification Clone() {
      return new WhisperNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "whisper" field.</summary>
    public const int WhisperFieldNumber = 2;
    private global::Bgs.Protocol.Whisper.V2.Whisper whisper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Whisper.V2.Whisper Whisper {
      get { return whisper_; }
      set {
        whisper_ = value;
      }
    }
    /// <summary>Gets whether the whisper field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWhisper {
      get { return whisper_ != null; }
    }
    /// <summary>Clears the value of the whisper field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWhisper() {
      whisper_ = null;
    }

    /// <summary>Field number for the "target_battle_tag" field.</summary>
    public const int TargetBattleTagFieldNumber = 3;
    private readonly static string TargetBattleTagDefaultValue = "";

    private string targetBattleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetBattleTag {
      get { return targetBattleTag_ ?? TargetBattleTagDefaultValue; }
      set {
        targetBattleTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "target_battle_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetBattleTag {
      get { return targetBattleTag_ != null; }
    }
    /// <summary>Clears the value of the "target_battle_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetBattleTag() {
      targetBattleTag_ = null;
    }

    /// <summary>Field number for the "target_game_account" field.</summary>
    public const int TargetGameAccountFieldNumber = 4;
    private global::Bgs.Protocol.Account.V2.GameAccountHandle targetGameAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V2.GameAccountHandle TargetGameAccount {
      get { return targetGameAccount_; }
      set {
        targetGameAccount_ = value;
      }
    }
    /// <summary>Gets whether the target_game_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetGameAccount {
      get { return targetGameAccount_ != null; }
    }
    /// <summary>Clears the value of the target_game_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetGameAccount() {
      targetGameAccount_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhisperNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhisperNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (!object.Equals(Whisper, other.Whisper)) return false;
      if (TargetBattleTag != other.TargetBattleTag) return false;
      if (!object.Equals(TargetGameAccount, other.TargetGameAccount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasWhisper) hash ^= Whisper.GetHashCode();
      if (HasTargetBattleTag) hash ^= TargetBattleTag.GetHashCode();
      if (HasTargetGameAccount) hash ^= TargetGameAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasWhisper) {
        output.WriteRawTag(18);
        output.WriteMessage(Whisper);
      }
      if (HasTargetBattleTag) {
        output.WriteRawTag(26);
        output.WriteString(TargetBattleTag);
      }
      if (HasTargetGameAccount) {
        output.WriteRawTag(34);
        output.WriteMessage(TargetGameAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasWhisper) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whisper);
      }
      if (HasTargetBattleTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetBattleTag);
      }
      if (HasTargetGameAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetGameAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhisperNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasWhisper) {
        if (!HasWhisper) {
          Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
        }
        Whisper.MergeFrom(other.Whisper);
      }
      if (other.HasTargetBattleTag) {
        TargetBattleTag = other.TargetBattleTag;
      }
      if (other.HasTargetGameAccount) {
        if (!HasTargetGameAccount) {
          TargetGameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
        }
        TargetGameAccount.MergeFrom(other.TargetGameAccount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasWhisper) {
              Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
            }
            input.ReadMessage(Whisper);
            break;
          }
          case 26: {
            TargetBattleTag = input.ReadString();
            break;
          }
          case 34: {
            if (!HasTargetGameAccount) {
              TargetGameAccount = new global::Bgs.Protocol.Account.V2.GameAccountHandle();
            }
            input.ReadMessage(TargetGameAccount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WhisperEchoNotification : pb::IMessage<WhisperEchoNotification> {
    private static readonly pb::MessageParser<WhisperEchoNotification> _parser = new pb::MessageParser<WhisperEchoNotification>(() => new WhisperEchoNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhisperEchoNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperEchoNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperEchoNotification(WhisperEchoNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      whisper_ = other.HasWhisper ? other.whisper_.Clone() : null;
      messageOrigin_ = other.messageOrigin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperEchoNotification Clone() {
      return new WhisperEchoNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "whisper" field.</summary>
    public const int WhisperFieldNumber = 2;
    private global::Bgs.Protocol.Whisper.V2.Whisper whisper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Whisper.V2.Whisper Whisper {
      get { return whisper_; }
      set {
        whisper_ = value;
      }
    }
    /// <summary>Gets whether the whisper field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWhisper {
      get { return whisper_ != null; }
    }
    /// <summary>Clears the value of the whisper field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWhisper() {
      whisper_ = null;
    }

    /// <summary>Field number for the "message_origin" field.</summary>
    public const int MessageOriginFieldNumber = 3;
    private readonly static uint MessageOriginDefaultValue = 0;

    private uint messageOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageOrigin {
      get { if ((_hasBits0 & 2) != 0) { return messageOrigin_; } else { return MessageOriginDefaultValue; } }
      set {
        _hasBits0 |= 2;
        messageOrigin_ = value;
      }
    }
    /// <summary>Gets whether the "message_origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageOrigin {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "message_origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageOrigin() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhisperEchoNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhisperEchoNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (!object.Equals(Whisper, other.Whisper)) return false;
      if (MessageOrigin != other.MessageOrigin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasWhisper) hash ^= Whisper.GetHashCode();
      if (HasMessageOrigin) hash ^= MessageOrigin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasWhisper) {
        output.WriteRawTag(18);
        output.WriteMessage(Whisper);
      }
      if (HasMessageOrigin) {
        output.WriteRawTag(24);
        output.WriteUInt32(MessageOrigin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasWhisper) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whisper);
      }
      if (HasMessageOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageOrigin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhisperEchoNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasWhisper) {
        if (!HasWhisper) {
          Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
        }
        Whisper.MergeFrom(other.Whisper);
      }
      if (other.HasMessageOrigin) {
        MessageOrigin = other.MessageOrigin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasWhisper) {
              Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
            }
            input.ReadMessage(Whisper);
            break;
          }
          case 24: {
            MessageOrigin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WhisperUpdatedNotification : pb::IMessage<WhisperUpdatedNotification> {
    private static readonly pb::MessageParser<WhisperUpdatedNotification> _parser = new pb::MessageParser<WhisperUpdatedNotification>(() => new WhisperUpdatedNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhisperUpdatedNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperUpdatedNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperUpdatedNotification(WhisperUpdatedNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      whisper_ = other.HasWhisper ? other.whisper_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhisperUpdatedNotification Clone() {
      return new WhisperUpdatedNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "whisper" field.</summary>
    public const int WhisperFieldNumber = 2;
    private global::Bgs.Protocol.Whisper.V2.Whisper whisper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Whisper.V2.Whisper Whisper {
      get { return whisper_; }
      set {
        whisper_ = value;
      }
    }
    /// <summary>Gets whether the whisper field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWhisper {
      get { return whisper_ != null; }
    }
    /// <summary>Clears the value of the whisper field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWhisper() {
      whisper_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhisperUpdatedNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhisperUpdatedNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (!object.Equals(Whisper, other.Whisper)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasWhisper) hash ^= Whisper.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasWhisper) {
        output.WriteRawTag(18);
        output.WriteMessage(Whisper);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasWhisper) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whisper);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhisperUpdatedNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasWhisper) {
        if (!HasWhisper) {
          Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
        }
        Whisper.MergeFrom(other.Whisper);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasWhisper) {
              Whisper = new global::Bgs.Protocol.Whisper.V2.Whisper();
            }
            input.ReadMessage(Whisper);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TypingIndicatorNotification : pb::IMessage<TypingIndicatorNotification> {
    private static readonly pb::MessageParser<TypingIndicatorNotification> _parser = new pb::MessageParser<TypingIndicatorNotification>(() => new TypingIndicatorNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypingIndicatorNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingIndicatorNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingIndicatorNotification(TypingIndicatorNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      targetAccountId_ = other.targetAccountId_;
      indicator_ = other.indicator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingIndicatorNotification Clone() {
      return new TypingIndicatorNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 2;
    private readonly static ulong TargetAccountIdDefaultValue = 0UL;

    private ulong targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetAccountId {
      get { if ((_hasBits0 & 2) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "indicator" field.</summary>
    public const int IndicatorFieldNumber = 3;
    private readonly static global::Bgs.Protocol.TypingIndicator IndicatorDefaultValue = global::Bgs.Protocol.TypingIndicator.TypingStart;

    private global::Bgs.Protocol.TypingIndicator indicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.TypingIndicator Indicator {
      get { if ((_hasBits0 & 4) != 0) { return indicator_; } else { return IndicatorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        indicator_ = value;
      }
    }
    /// <summary>Gets whether the "indicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndicator {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "indicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndicator() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypingIndicatorNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypingIndicatorNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (TargetAccountId != other.TargetAccountId) return false;
      if (Indicator != other.Indicator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasIndicator) hash ^= Indicator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetAccountId);
      }
      if (HasIndicator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Indicator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetAccountId);
      }
      if (HasIndicator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Indicator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypingIndicatorNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasIndicator) {
        Indicator = other.Indicator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetAccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            Indicator = (global::Bgs.Protocol.TypingIndicator) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdvanceViewTimeNotification : pb::IMessage<AdvanceViewTimeNotification> {
    private static readonly pb::MessageParser<AdvanceViewTimeNotification> _parser = new pb::MessageParser<AdvanceViewTimeNotification>(() => new AdvanceViewTimeNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvanceViewTimeNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceViewTimeNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceViewTimeNotification(AdvanceViewTimeNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      targetAccountId_ = other.targetAccountId_;
      viewTimeUs_ = other.viewTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceViewTimeNotification Clone() {
      return new AdvanceViewTimeNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 2;
    private readonly static ulong TargetAccountIdDefaultValue = 0UL;

    private ulong targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetAccountId {
      get { if ((_hasBits0 & 2) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "view_time_us" field.</summary>
    public const int ViewTimeUsFieldNumber = 3;
    private readonly static ulong ViewTimeUsDefaultValue = 0UL;

    private ulong viewTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ViewTimeUs {
      get { if ((_hasBits0 & 4) != 0) { return viewTimeUs_; } else { return ViewTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        viewTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "view_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasViewTimeUs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "view_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewTimeUs() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvanceViewTimeNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvanceViewTimeNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (TargetAccountId != other.TargetAccountId) return false;
      if (ViewTimeUs != other.ViewTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasViewTimeUs) hash ^= ViewTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetAccountId);
      }
      if (HasViewTimeUs) {
        output.WriteRawTag(24);
        output.WriteUInt64(ViewTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetAccountId);
      }
      if (HasViewTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ViewTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvanceViewTimeNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasViewTimeUs) {
        ViewTimeUs = other.ViewTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetAccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            ViewTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdvanceClearTimeNotification : pb::IMessage<AdvanceClearTimeNotification> {
    private static readonly pb::MessageParser<AdvanceClearTimeNotification> _parser = new pb::MessageParser<AdvanceClearTimeNotification>(() => new AdvanceClearTimeNotification());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvanceClearTimeNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Whisper.V2.Client.WhisperListenerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceClearTimeNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceClearTimeNotification(AdvanceClearTimeNotification other) : this() {
      _hasBits0 = other._hasBits0;
      subscriberAccountId_ = other.subscriberAccountId_;
      targetAccountId_ = other.targetAccountId_;
      clearTimeUs_ = other.clearTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceClearTimeNotification Clone() {
      return new AdvanceClearTimeNotification(this);
    }

    /// <summary>Field number for the "subscriber_account_id" field.</summary>
    public const int SubscriberAccountIdFieldNumber = 1;
    private readonly static ulong SubscriberAccountIdDefaultValue = 0UL;

    private ulong subscriberAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SubscriberAccountId {
      get { if ((_hasBits0 & 1) != 0) { return subscriberAccountId_; } else { return SubscriberAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriberAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "subscriber_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriberAccountId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscriber_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriberAccountId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "target_account_id" field.</summary>
    public const int TargetAccountIdFieldNumber = 2;
    private readonly static ulong TargetAccountIdDefaultValue = 0UL;

    private ulong targetAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetAccountId {
      get { if ((_hasBits0 & 2) != 0) { return targetAccountId_; } else { return TargetAccountIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        targetAccountId_ = value;
      }
    }
    /// <summary>Gets whether the "target_account_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTargetAccountId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "target_account_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetAccountId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "clear_time_us" field.</summary>
    public const int ClearTimeUsFieldNumber = 3;
    private readonly static ulong ClearTimeUsDefaultValue = 0UL;

    private ulong clearTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClearTimeUs {
      get { if ((_hasBits0 & 4) != 0) { return clearTimeUs_; } else { return ClearTimeUsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        clearTimeUs_ = value;
      }
    }
    /// <summary>Gets whether the "clear_time_us" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClearTimeUs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "clear_time_us" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClearTimeUs() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvanceClearTimeNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvanceClearTimeNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriberAccountId != other.SubscriberAccountId) return false;
      if (TargetAccountId != other.TargetAccountId) return false;
      if (ClearTimeUs != other.ClearTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSubscriberAccountId) hash ^= SubscriberAccountId.GetHashCode();
      if (HasTargetAccountId) hash ^= TargetAccountId.GetHashCode();
      if (HasClearTimeUs) hash ^= ClearTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSubscriberAccountId) {
        output.WriteRawTag(8);
        output.WriteUInt64(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetAccountId);
      }
      if (HasClearTimeUs) {
        output.WriteRawTag(24);
        output.WriteUInt64(ClearTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSubscriberAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberAccountId);
      }
      if (HasTargetAccountId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetAccountId);
      }
      if (HasClearTimeUs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClearTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvanceClearTimeNotification other) {
      if (other == null) {
        return;
      }
      if (other.HasSubscriberAccountId) {
        SubscriberAccountId = other.SubscriberAccountId;
      }
      if (other.HasTargetAccountId) {
        TargetAccountId = other.TargetAccountId;
      }
      if (other.HasClearTimeUs) {
        ClearTimeUs = other.ClearTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SubscriberAccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetAccountId = input.ReadUInt64();
            break;
          }
          case 24: {
            ClearTimeUs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
